/home/ubuntu/Desktop/OpenFPGA/build/yosys/bin/yosys yosys.ys

 /----------------------------------------------------------------------------\
 |  yosys -- Yosys Open SYnthesis Suite                                       |
 |  Copyright (C) 2012 - 2024  Claire Xenia Wolf <claire@yosyshq.com>         |
 |  Distributed under an ISC-like license, type "license" to see terms        |
 \----------------------------------------------------------------------------/
 Yosys 0.45+148 (git sha1 1bf908dea, g++ 11.4.0-1ubuntu1~22.04 -fPIC -O3)

-- Executing script file `yosys.ys' --

1. Executing Verilog-2005 frontend: ./benchmark/mac_4.v
Parsing Verilog input from `./benchmark/mac_4.v' to AST representation.
Generating RTLIL representation for module `\mac_4'.
Successfully finished Verilog frontend.

2. Executing Verilog-2005 frontend: /home/ubuntu/Desktop/OpenFPGA/openfpga_flow/openfpga_yosys_techlib/k6_frac_N10_tileable_adder_chain_dpram8K_dsp36_fracff_40nm_cell_sim.v
Parsing Verilog input from `/home/ubuntu/Desktop/OpenFPGA/openfpga_flow/openfpga_yosys_techlib/k6_frac_N10_tileable_adder_chain_dpram8K_dsp36_fracff_40nm_cell_sim.v' to AST representation.
Generating RTLIL representation for module `\dpram_1024x8_core'.
Generating RTLIL representation for module `\dpram_1024x8'.
Generating RTLIL representation for module `\mult_36'.
Generating RTLIL representation for module `\dff'.
Generating RTLIL representation for module `\dffr'.
Generating RTLIL representation for module `\dffs'.
Generating RTLIL representation for module `\dffrn'.
Generating RTLIL representation for module `\dffsn'.
Successfully finished Verilog frontend.

3. Executing HIERARCHY pass (managing design hierarchy).

3.1. Analyzing design hierarchy..
Top module:  \mac_4

3.2. Analyzing design hierarchy..
Top module:  \mac_4
Removed 0 unused modules.

4. Executing PROC pass (convert processes to netlists).

4.1. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

4.2. Executing PROC_RMDEAD pass (remove dead branches from decision trees).
Marked 1 switch rules as full_case in process $proc$/home/ubuntu/Desktop/OpenFPGA/openfpga_flow/openfpga_yosys_techlib/k6_frac_N10_tileable_adder_chain_dpram8K_dsp36_fracff_40nm_cell_sim.v:207$15 in module dffsn.
Marked 1 switch rules as full_case in process $proc$/home/ubuntu/Desktop/OpenFPGA/openfpga_flow/openfpga_yosys_techlib/k6_frac_N10_tileable_adder_chain_dpram8K_dsp36_fracff_40nm_cell_sim.v:176$12 in module dffrn.
Marked 1 switch rules as full_case in process $proc$/home/ubuntu/Desktop/OpenFPGA/openfpga_flow/openfpga_yosys_techlib/k6_frac_N10_tileable_adder_chain_dpram8K_dsp36_fracff_40nm_cell_sim.v:145$9 in module dffs.
Marked 1 switch rules as full_case in process $proc$/home/ubuntu/Desktop/OpenFPGA/openfpga_flow/openfpga_yosys_techlib/k6_frac_N10_tileable_adder_chain_dpram8K_dsp36_fracff_40nm_cell_sim.v:114$6 in module dffr.
Removed a total of 0 dead cases.

4.3. Executing PROC_PRUNE pass (remove redundant assignments in processes).
Removed 4 redundant assignments.
Promoted 6 assignments to connections.

4.4. Executing PROC_INIT pass (extract init attributes).
Found init rule in `\dffsn.$proc$/home/ubuntu/Desktop/OpenFPGA/openfpga_flow/openfpga_yosys_techlib/k6_frac_N10_tileable_adder_chain_dpram8K_dsp36_fracff_40nm_cell_sim.v:0$17'.
  Set init value: \Q = 1'0
Found init rule in `\dffrn.$proc$/home/ubuntu/Desktop/OpenFPGA/openfpga_flow/openfpga_yosys_techlib/k6_frac_N10_tileable_adder_chain_dpram8K_dsp36_fracff_40nm_cell_sim.v:0$14'.
  Set init value: \Q = 1'0
Found init rule in `\dffs.$proc$/home/ubuntu/Desktop/OpenFPGA/openfpga_flow/openfpga_yosys_techlib/k6_frac_N10_tileable_adder_chain_dpram8K_dsp36_fracff_40nm_cell_sim.v:0$11'.
  Set init value: \Q = 1'0
Found init rule in `\dffr.$proc$/home/ubuntu/Desktop/OpenFPGA/openfpga_flow/openfpga_yosys_techlib/k6_frac_N10_tileable_adder_chain_dpram8K_dsp36_fracff_40nm_cell_sim.v:0$8'.
  Set init value: \Q = 1'0
Found init rule in `\dff.$proc$/home/ubuntu/Desktop/OpenFPGA/openfpga_flow/openfpga_yosys_techlib/k6_frac_N10_tileable_adder_chain_dpram8K_dsp36_fracff_40nm_cell_sim.v:0$5'.
  Set init value: \Q = 1'0

4.5. Executing PROC_ARST pass (detect async resets in processes).
Found async reset \SN in `\dffsn.$proc$/home/ubuntu/Desktop/OpenFPGA/openfpga_flow/openfpga_yosys_techlib/k6_frac_N10_tileable_adder_chain_dpram8K_dsp36_fracff_40nm_cell_sim.v:207$15'.
Found async reset \RN in `\dffrn.$proc$/home/ubuntu/Desktop/OpenFPGA/openfpga_flow/openfpga_yosys_techlib/k6_frac_N10_tileable_adder_chain_dpram8K_dsp36_fracff_40nm_cell_sim.v:176$12'.
Found async reset \S in `\dffs.$proc$/home/ubuntu/Desktop/OpenFPGA/openfpga_flow/openfpga_yosys_techlib/k6_frac_N10_tileable_adder_chain_dpram8K_dsp36_fracff_40nm_cell_sim.v:145$9'.
Found async reset \R in `\dffr.$proc$/home/ubuntu/Desktop/OpenFPGA/openfpga_flow/openfpga_yosys_techlib/k6_frac_N10_tileable_adder_chain_dpram8K_dsp36_fracff_40nm_cell_sim.v:114$6'.

4.6. Executing PROC_ROM pass (convert switches to ROMs).
Converted 0 switches.

4.7. Executing PROC_MUX pass (convert decision trees to multiplexers).
Creating decoders for process `\dffsn.$proc$/home/ubuntu/Desktop/OpenFPGA/openfpga_flow/openfpga_yosys_techlib/k6_frac_N10_tileable_adder_chain_dpram8K_dsp36_fracff_40nm_cell_sim.v:0$17'.
Creating decoders for process `\dffsn.$proc$/home/ubuntu/Desktop/OpenFPGA/openfpga_flow/openfpga_yosys_techlib/k6_frac_N10_tileable_adder_chain_dpram8K_dsp36_fracff_40nm_cell_sim.v:207$15'.
     1/1: $0\Q[0:0]
Creating decoders for process `\dffrn.$proc$/home/ubuntu/Desktop/OpenFPGA/openfpga_flow/openfpga_yosys_techlib/k6_frac_N10_tileable_adder_chain_dpram8K_dsp36_fracff_40nm_cell_sim.v:0$14'.
Creating decoders for process `\dffrn.$proc$/home/ubuntu/Desktop/OpenFPGA/openfpga_flow/openfpga_yosys_techlib/k6_frac_N10_tileable_adder_chain_dpram8K_dsp36_fracff_40nm_cell_sim.v:176$12'.
     1/1: $0\Q[0:0]
Creating decoders for process `\dffs.$proc$/home/ubuntu/Desktop/OpenFPGA/openfpga_flow/openfpga_yosys_techlib/k6_frac_N10_tileable_adder_chain_dpram8K_dsp36_fracff_40nm_cell_sim.v:0$11'.
Creating decoders for process `\dffs.$proc$/home/ubuntu/Desktop/OpenFPGA/openfpga_flow/openfpga_yosys_techlib/k6_frac_N10_tileable_adder_chain_dpram8K_dsp36_fracff_40nm_cell_sim.v:145$9'.
     1/1: $0\Q[0:0]
Creating decoders for process `\dffr.$proc$/home/ubuntu/Desktop/OpenFPGA/openfpga_flow/openfpga_yosys_techlib/k6_frac_N10_tileable_adder_chain_dpram8K_dsp36_fracff_40nm_cell_sim.v:0$8'.
Creating decoders for process `\dffr.$proc$/home/ubuntu/Desktop/OpenFPGA/openfpga_flow/openfpga_yosys_techlib/k6_frac_N10_tileable_adder_chain_dpram8K_dsp36_fracff_40nm_cell_sim.v:114$6'.
     1/1: $0\Q[0:0]
Creating decoders for process `\dff.$proc$/home/ubuntu/Desktop/OpenFPGA/openfpga_flow/openfpga_yosys_techlib/k6_frac_N10_tileable_adder_chain_dpram8K_dsp36_fracff_40nm_cell_sim.v:0$5'.
Creating decoders for process `\dff.$proc$/home/ubuntu/Desktop/OpenFPGA/openfpga_flow/openfpga_yosys_techlib/k6_frac_N10_tileable_adder_chain_dpram8K_dsp36_fracff_40nm_cell_sim.v:89$4'.

4.8. Executing PROC_DLATCH pass (convert process syncs to latches).

4.9. Executing PROC_DFF pass (convert process syncs to FFs).
Creating register for signal `\dffsn.\Q' using process `\dffsn.$proc$/home/ubuntu/Desktop/OpenFPGA/openfpga_flow/openfpga_yosys_techlib/k6_frac_N10_tileable_adder_chain_dpram8K_dsp36_fracff_40nm_cell_sim.v:207$15'.
  created $adff cell `$procdff$22' with positive edge clock and positive level reset.
Creating register for signal `\dffrn.\Q' using process `\dffrn.$proc$/home/ubuntu/Desktop/OpenFPGA/openfpga_flow/openfpga_yosys_techlib/k6_frac_N10_tileable_adder_chain_dpram8K_dsp36_fracff_40nm_cell_sim.v:176$12'.
  created $adff cell `$procdff$27' with positive edge clock and positive level reset.
Creating register for signal `\dffs.\Q' using process `\dffs.$proc$/home/ubuntu/Desktop/OpenFPGA/openfpga_flow/openfpga_yosys_techlib/k6_frac_N10_tileable_adder_chain_dpram8K_dsp36_fracff_40nm_cell_sim.v:145$9'.
  created $adff cell `$procdff$30' with positive edge clock and positive level reset.
Creating register for signal `\dffr.\Q' using process `\dffr.$proc$/home/ubuntu/Desktop/OpenFPGA/openfpga_flow/openfpga_yosys_techlib/k6_frac_N10_tileable_adder_chain_dpram8K_dsp36_fracff_40nm_cell_sim.v:114$6'.
  created $adff cell `$procdff$33' with positive edge clock and positive level reset.
Creating register for signal `\dff.\Q' using process `\dff.$proc$/home/ubuntu/Desktop/OpenFPGA/openfpga_flow/openfpga_yosys_techlib/k6_frac_N10_tileable_adder_chain_dpram8K_dsp36_fracff_40nm_cell_sim.v:89$4'.
  created $dff cell `$procdff$34' with positive edge clock.

4.10. Executing PROC_MEMWR pass (convert process memory writes to cells).

4.11. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Removing empty process `dffsn.$proc$/home/ubuntu/Desktop/OpenFPGA/openfpga_flow/openfpga_yosys_techlib/k6_frac_N10_tileable_adder_chain_dpram8K_dsp36_fracff_40nm_cell_sim.v:0$17'.
Removing empty process `dffsn.$proc$/home/ubuntu/Desktop/OpenFPGA/openfpga_flow/openfpga_yosys_techlib/k6_frac_N10_tileable_adder_chain_dpram8K_dsp36_fracff_40nm_cell_sim.v:207$15'.
Removing empty process `dffrn.$proc$/home/ubuntu/Desktop/OpenFPGA/openfpga_flow/openfpga_yosys_techlib/k6_frac_N10_tileable_adder_chain_dpram8K_dsp36_fracff_40nm_cell_sim.v:0$14'.
Removing empty process `dffrn.$proc$/home/ubuntu/Desktop/OpenFPGA/openfpga_flow/openfpga_yosys_techlib/k6_frac_N10_tileable_adder_chain_dpram8K_dsp36_fracff_40nm_cell_sim.v:176$12'.
Removing empty process `dffs.$proc$/home/ubuntu/Desktop/OpenFPGA/openfpga_flow/openfpga_yosys_techlib/k6_frac_N10_tileable_adder_chain_dpram8K_dsp36_fracff_40nm_cell_sim.v:0$11'.
Removing empty process `dffs.$proc$/home/ubuntu/Desktop/OpenFPGA/openfpga_flow/openfpga_yosys_techlib/k6_frac_N10_tileable_adder_chain_dpram8K_dsp36_fracff_40nm_cell_sim.v:145$9'.
Removing empty process `dffr.$proc$/home/ubuntu/Desktop/OpenFPGA/openfpga_flow/openfpga_yosys_techlib/k6_frac_N10_tileable_adder_chain_dpram8K_dsp36_fracff_40nm_cell_sim.v:0$8'.
Removing empty process `dffr.$proc$/home/ubuntu/Desktop/OpenFPGA/openfpga_flow/openfpga_yosys_techlib/k6_frac_N10_tileable_adder_chain_dpram8K_dsp36_fracff_40nm_cell_sim.v:114$6'.
Removing empty process `dff.$proc$/home/ubuntu/Desktop/OpenFPGA/openfpga_flow/openfpga_yosys_techlib/k6_frac_N10_tileable_adder_chain_dpram8K_dsp36_fracff_40nm_cell_sim.v:0$5'.
Removing empty process `dff.$proc$/home/ubuntu/Desktop/OpenFPGA/openfpga_flow/openfpga_yosys_techlib/k6_frac_N10_tileable_adder_chain_dpram8K_dsp36_fracff_40nm_cell_sim.v:89$4'.
Cleaned up 0 empty switches.

4.12. Executing OPT_EXPR pass (perform const folding).
Optimizing module mac_4.

5. Executing TECHMAP pass (map to technology primitives).

5.1. Executing Verilog-2005 frontend: /home/ubuntu/Desktop/OpenFPGA/openfpga_flow/openfpga_yosys_techlib/k6_frac_N10_tileable_adder_chain_dpram8K_dsp36_fracff_40nm_dff_map.v
Parsing Verilog input from `/home/ubuntu/Desktop/OpenFPGA/openfpga_flow/openfpga_yosys_techlib/k6_frac_N10_tileable_adder_chain_dpram8K_dsp36_fracff_40nm_dff_map.v' to AST representation.
Generating RTLIL representation for module `\$_DFF_P_'.
Generating RTLIL representation for module `\$_DFF_PP0_'.
Generating RTLIL representation for module `\$_DFF_PP1_'.
Generating RTLIL representation for module `\$_DFF_PN0_'.
Generating RTLIL representation for module `\$_DFF_PN1_'.
Successfully finished Verilog frontend.

5.2. Continuing TECHMAP pass.
No more expansions possible.
<suppressed ~7 debug messages>

6. Executing FLATTEN pass (flatten design).

7. Executing OPT_EXPR pass (perform const folding).
Optimizing module mac_4.

8. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \mac_4..
Removed 0 unused cells and 1 unused wires.
<suppressed ~1 debug messages>

9. Executing CHECK pass (checking for obvious problems).
Checking module mac_4...
Found and reported 0 problems.

10. Executing OPT pass (performing simple optimizations).

10.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module mac_4.

10.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\mac_4'.
Removed a total of 0 cells.

10.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \mac_4..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

10.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \mac_4.
Performed a total of 0 changes.

10.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\mac_4'.
Removed a total of 0 cells.

10.6. Executing OPT_DFF pass (perform DFF optimizations).

10.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \mac_4..

10.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module mac_4.

10.9. Finished OPT passes. (There is nothing left to do.)

11. Executing FSM pass (extract and optimize FSM).

11.1. Executing FSM_DETECT pass (finding FSMs in design).

11.2. Executing FSM_EXTRACT pass (extracting FSM from design).

11.3. Executing FSM_OPT pass (simple optimizations of FSMs).

11.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \mac_4..

11.5. Executing FSM_OPT pass (simple optimizations of FSMs).

11.6. Executing FSM_RECODE pass (re-assigning FSM state encoding).

11.7. Executing FSM_INFO pass (dumping all available information on FSM cells).

11.8. Executing FSM_MAP pass (mapping FSMs to basic logic).

12. Executing OPT pass (performing simple optimizations).

12.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module mac_4.

12.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\mac_4'.
Removed a total of 0 cells.

12.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \mac_4..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

12.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \mac_4.
Performed a total of 0 changes.

12.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\mac_4'.
Removed a total of 0 cells.

12.6. Executing OPT_DFF pass (perform DFF optimizations).

12.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \mac_4..

12.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module mac_4.

12.9. Finished OPT passes. (There is nothing left to do.)

13. Executing WREDUCE pass (reducing word size of cells).

14. Executing PEEPOPT pass (run peephole optimizers).

15. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \mac_4..

16. Executing OPT pass (performing simple optimizations).

16.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module mac_4.

16.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\mac_4'.
Removed a total of 0 cells.

16.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \mac_4..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

16.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \mac_4.
Performed a total of 0 changes.

16.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\mac_4'.
Removed a total of 0 cells.

16.6. Executing OPT_DFF pass (perform DFF optimizations).

16.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \mac_4..

16.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module mac_4.

16.9. Finished OPT passes. (There is nothing left to do.)

17. Executing MEMORY pass.

17.1. Executing OPT_MEM pass (optimize memories).
Performed a total of 0 transformations.

17.2. Executing OPT_MEM_PRIORITY pass (removing unnecessary memory write priority relations).
Performed a total of 0 transformations.

17.3. Executing OPT_MEM_FEEDBACK pass (finding memory read-to-write feedback paths).

17.4. Executing MEMORY_BMUX2ROM pass (converting muxes to ROMs).

17.5. Executing MEMORY_DFF pass (merging $dff cells to $memrd).

17.6. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \mac_4..

17.7. Executing MEMORY_SHARE pass (consolidating $memrd/$memwr cells).

17.8. Executing OPT_MEM_WIDEN pass (optimize memories where all ports are wide).
Performed a total of 0 transformations.

17.9. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \mac_4..

17.10. Executing MEMORY_COLLECT pass (generating $mem cells).

18. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \mac_4..

19. Executing OPT pass (performing simple optimizations).

19.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module mac_4.

19.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\mac_4'.
Removed a total of 0 cells.

19.3. Executing OPT_DFF pass (perform DFF optimizations).

19.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \mac_4..

19.5. Finished fast OPT passes.

20. Executing MEMORY_MAP pass (converting memories to logic and flip-flops).

21. Executing OPT pass (performing simple optimizations).

21.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module mac_4.

21.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\mac_4'.
Removed a total of 0 cells.

21.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \mac_4..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

21.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \mac_4.
Performed a total of 0 changes.

21.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\mac_4'.
Removed a total of 0 cells.

21.6. Executing OPT_SHARE pass.

21.7. Executing OPT_DFF pass (perform DFF optimizations).

21.8. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \mac_4..

21.9. Executing OPT_EXPR pass (perform const folding).
Optimizing module mac_4.

21.10. Finished OPT passes. (There is nothing left to do.)

22. Executing TECHMAP pass (map to technology primitives).

22.1. Executing Verilog-2005 frontend: /home/ubuntu/Desktop/OpenFPGA/build/yosys/bin/../share/yosys/techmap.v
Parsing Verilog input from `/home/ubuntu/Desktop/OpenFPGA/build/yosys/bin/../share/yosys/techmap.v' to AST representation.
Generating RTLIL representation for module `\_90_simplemap_bool_ops'.
Generating RTLIL representation for module `\_90_simplemap_reduce_ops'.
Generating RTLIL representation for module `\_90_simplemap_logic_ops'.
Generating RTLIL representation for module `\_90_simplemap_compare_ops'.
Generating RTLIL representation for module `\_90_simplemap_various'.
Generating RTLIL representation for module `\_90_simplemap_registers'.
Generating RTLIL representation for module `\_90_shift_ops_shr_shl_sshl_sshr'.
Generating RTLIL representation for module `\_90_shift_shiftx'.
Generating RTLIL representation for module `\_90_fa'.
Generating RTLIL representation for module `\_90_lcu_brent_kung'.
Generating RTLIL representation for module `\_90_alu'.
Generating RTLIL representation for module `\_90_macc'.
Generating RTLIL representation for module `\_90_alumacc'.
Generating RTLIL representation for module `\$__div_mod_u'.
Generating RTLIL representation for module `\$__div_mod_trunc'.
Generating RTLIL representation for module `\_90_div'.
Generating RTLIL representation for module `\_90_mod'.
Generating RTLIL representation for module `\$__div_mod_floor'.
Generating RTLIL representation for module `\_90_divfloor'.
Generating RTLIL representation for module `\_90_modfloor'.
Generating RTLIL representation for module `\_90_pow'.
Generating RTLIL representation for module `\_90_pmux'.
Generating RTLIL representation for module `\_90_demux'.
Generating RTLIL representation for module `\_90_lut'.
Successfully finished Verilog frontend.

22.2. Continuing TECHMAP pass.
Running "alumacc" on wrapper $extern:wrap:$mul:A_SIGNED=0:A_WIDTH=4:B_SIGNED=0:B_WIDTH=4:Y_WIDTH=4:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$mul:A_SIGNED=0:A_WIDTH=4:B_SIGNED=0:B_WIDTH=4:Y_WIDTH=4:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$mul:A_SIGNED=0:A_WIDTH=4:B_SIGNED=0:B_WIDTH=4:Y_WIDTH=4:394426c56d1a028ba8fdd5469b163e04011def47.
Running "alumacc" on wrapper $extern:wrap:$add:A_SIGNED=0:A_WIDTH=4:B_SIGNED=0:B_WIDTH=4:Y_WIDTH=4:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$add:A_SIGNED=0:A_WIDTH=4:B_SIGNED=0:B_WIDTH=4:Y_WIDTH=4:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$add:A_SIGNED=0:A_WIDTH=4:B_SIGNED=0:B_WIDTH=4:Y_WIDTH=4:394426c56d1a028ba8fdd5469b163e04011def47.
Using extmapper maccmap for cells of type $macc.
  add \a * \b (4x4 bits, unsigned)
Using template $paramod$740b056ede97228d3eae64ea2fdc81f0a33e0fe7\_90_alu for cells of type $alu.
Using extmapper simplemap for cells of type $and.
Using template $paramod\_90_fa\WIDTH=32'00000000000000000000000000000100 for cells of type $fa.
Using extmapper simplemap for cells of type $xor.
Using template $paramod\_90_lcu_brent_kung\WIDTH=32'00000000000000000000000000000100 for cells of type $lcu.
Using extmapper simplemap for cells of type $pos.
Using extmapper simplemap for cells of type $mux.
Using extmapper simplemap for cells of type $not.
Using extmapper simplemap for cells of type $or.
No more expansions possible.
<suppressed ~298 debug messages>

23. Executing OPT pass (performing simple optimizations).

23.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module mac_4.
<suppressed ~63 debug messages>

23.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\mac_4'.
Removed a total of 0 cells.

23.3. Executing OPT_DFF pass (perform DFF optimizations).

23.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \mac_4..
Removed 19 unused cells and 92 unused wires.
<suppressed ~20 debug messages>

23.5. Finished fast OPT passes.

24. Executing ABC pass (technology mapping using ABC).

24.1. Extracting gate netlist of module `\mac_4' to `<abc-temp-dir>/input.blif'..
Extracted 38 gates and 50 wires to a netlist network with 12 inputs and 4 outputs.

24.1.1. Executing ABC.
Running ABC command: "<yosys-exe-dir>/yosys-abc" -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_lut <abc-temp-dir>/lutdefs.txt 
ABC: + strash 
ABC: + &get -n 
ABC: + &fraig -x 
ABC: + &put 
ABC: + scorr 
ABC: Warning: The network is combinational (run "fraig" or "fraig_sweep").
ABC: + dc2 
ABC: + dretime 
ABC: + strash 
ABC: + dch -f 
ABC: + if 
ABC: + mfs2 
ABC: + lutpack -S 1 
ABC: + write_blif <abc-temp-dir>/output.blif 

24.1.2. Re-integrating ABC results.
ABC RESULTS:              $lut cells:        9
ABC RESULTS:        internal signals:       34
ABC RESULTS:           input signals:       12
ABC RESULTS:          output signals:        4
Removing temp directory.

25. Executing TECHMAP pass (map to technology primitives).

25.1. Executing Verilog-2005 frontend: /home/ubuntu/Desktop/OpenFPGA/openfpga_flow/openfpga_yosys_techlib/k6_frac_N10_tileable_adder_chain_dpram8K_dsp36_fracff_40nm_dff_map.v
Parsing Verilog input from `/home/ubuntu/Desktop/OpenFPGA/openfpga_flow/openfpga_yosys_techlib/k6_frac_N10_tileable_adder_chain_dpram8K_dsp36_fracff_40nm_dff_map.v' to AST representation.
Generating RTLIL representation for module `\$_DFF_P_'.
Generating RTLIL representation for module `\$_DFF_PP0_'.
Generating RTLIL representation for module `\$_DFF_PP1_'.
Generating RTLIL representation for module `\$_DFF_PN0_'.
Generating RTLIL representation for module `\$_DFF_PN1_'.
Successfully finished Verilog frontend.

25.2. Continuing TECHMAP pass.
No more expansions possible.
<suppressed ~7 debug messages>

26. Executing SYNTH pass.

26.1. Executing HIERARCHY pass (managing design hierarchy).

26.1.1. Analyzing design hierarchy..
Top module:  \mac_4

26.1.2. Analyzing design hierarchy..
Top module:  \mac_4
Removed 0 unused modules.

26.2. Printing statistics.

=== mac_4 ===

   Number of wires:                 43
   Number of wire bits:            103
   Number of public wires:           4
   Number of public wire bits:      16
   Number of ports:                  4
   Number of port bits:             16
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                  9
     $lut                            9

26.3. Executing CHECK pass (checking for obvious problems).
Checking module mac_4...
Found and reported 0 problems.

27. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \mac_4..
Removed 0 unused cells and 34 unused wires.
<suppressed ~1 debug messages>

28. Executing BLIF backend.

End of script. Logfile hash: 29a15c6da2, CPU: user 0.06s system 0.01s, MEM: 22.55 MB peak
Yosys 0.45+148 (git sha1 1bf908dea, g++ 11.4.0-1ubuntu1~22.04 -fPIC -O3)
Time spent: 64% 1x abc (0 sec), 8% 7x read_verilog (0 sec), ...
0