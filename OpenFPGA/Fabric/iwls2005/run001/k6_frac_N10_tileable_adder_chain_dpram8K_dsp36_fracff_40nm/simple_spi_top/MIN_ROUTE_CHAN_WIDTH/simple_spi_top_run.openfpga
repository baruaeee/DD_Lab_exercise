# Run VPR for the 'and' design
# When the global clock is defined as a port of a tile, clock routing in VPR should be skipped
# This is due to the Fc_in of clock port is set to 0 for global wiring
# The constant net such as logic '0' and logic '1' must be routed because current architecture cannot produce them locally
# Enable block usage in log file, otherwise QoR check in OpenFPGA flow-run will fail
vpr /home/cae_sajib/Desktop/RZ_home/Desktop/DD_Lab_exercise/OpenFPGA/Fabric/iwls2005/run001/k6_frac_N10_tileable_adder_chain_dpram8K_dsp36_fracff_40nm/simple_spi_top/MIN_ROUTE_CHAN_WIDTH/arch/k6_frac_N10_tileable_adder_chain_dpram8K_dsp36_fracff_40nm.xml simple_spi_top.blif --route_chan_width 300 --constant_net_method route --write_block_usage vpr_pack_block_usage.txt

# Read OpenFPGA architecture definition
read_openfpga_arch -f /home/cae_sajib/Desktop/RZ_home/Desktop/DD_Lab_exercise/OpenFPGA/Fabric/iwls2005/run001/k6_frac_N10_tileable_adder_chain_dpram8K_dsp36_fracff_40nm/simple_spi_top/MIN_ROUTE_CHAN_WIDTH/arch/k6_frac_N10_adder_chain_dpram8K_dsp36_fracff_40nm_openfpga_IHP_sg13g2_cds.xml

# Read OpenFPGA simulation settings
read_openfpga_simulation_setting -f /home/cae_sajib/Desktop/OpenFPGA/openfpga_flow/openfpga_simulation_settings/fixed_sim_openfpga.xml

# Annotate the OpenFPGA architecture to VPR data base
# to debug use --verbose options
# Note: no need to assign activity file when you used a fixed number 
#       of clock cycles in simulation settings
#       Also, ACE2 does not support multiple clocks
#       Therefore, activity file is not recommended for multi-clock fabric/implementations
link_openfpga_arch --sort_gsb_chan_node_in_edges

# Check and correct any naming conflicts in the BLIF netlist
check_netlist_naming_conflict --fix --report ./netlist_renaming.xml

# Apply fix-up to Look-Up Table truth tables based on packing results
lut_truth_table_fixup

# Build the module graph
#  - Enabled compression on routing architecture modules
#  - Enabled frame view creation to save runtime and memory
#    Note that this is turned on when bitstream generation 
#    is the ONLY purpose of the flow!!!
build_fabric --compress_routing --frame_view #--verbose

# Write the fabric hierarchy of module graph to a file
# This is used by hierarchical PnR flows
write_fabric_hierarchy --file ./fabric_hierarchy.txt

# Repack the netlist to physical pbs
# This must be done before bitstream generator and testbench generation
# Strongly recommend it is done after all the fix-up have been applied
repack #--verbose

# Build the bitstream
#  - Output the fabric-independent bitstream to a file
# # Skipped becasue it takes long time to run for bigger fabric
# --write_file fabric_independent_bitstream.xml
build_architecture_bitstream --verbose 

# Build fabric-dependent bitstream
build_fabric_bitstream --verbose

# Write fabric-dependent bitstream
##write_fabric_bitstream --file fabric_bitstream.xml --format xml

##write_fabric_bitstream --file fabric_bitstream.bit --format plain_text ${OPENFPGA_FAST_CONFIGURATION}

write_fabric_bitstream --file fabric_bitstream.bit --format plain_text

# Write the Verilog netlist for FPGA fabric
#  - Enable the use of explicit port mapping in Verilog netlist
write_fabric_verilog --file ./SRC --explicit_port_mapping --include_timing --print_user_defined_template --verbose

# Write the Verilog testbench for FPGA fabric
#  - We suggest the use of same output directory as fabric Verilog netlists
#  - Must specify the reference benchmark file if you want to output any testbenches
#  - Enable top-level testbench which is a full verification including programming circuit and core logic of FPGA
#  - Enable pre-configured top-level testbench which is a fast verification skipping programming phase
#  - Simulation ini file is optional and is needed only when you need to interface different HDL simulators using openfpga flow-run scripts
#write_full_testbench --file ./SRC --reference_benchmark_file_path simple_spi_top_output_verilog.v --include_signal_init --explicit_port_mapping --bitstream fabric_bitstream.bit ${OPENFPGA_FAST_CONFIGURATION}

# Write the SDC files for PnR backend
#  - Turn on every options here
write_pnr_sdc --file ./SDC

# Write SDC to disable timing for configure ports
write_sdc_disable_timing_configure_ports --file ./SDC/disable_configure_ports.sdc

# Write the SDC to run timing analysis for a mapped FPGA fabric
write_analysis_sdc --file ./SDC_analysis


# Finish and exit OpenFPGA
exit

# Note :
# To run verification at the end of the flow maintain source in ./SRC directory
