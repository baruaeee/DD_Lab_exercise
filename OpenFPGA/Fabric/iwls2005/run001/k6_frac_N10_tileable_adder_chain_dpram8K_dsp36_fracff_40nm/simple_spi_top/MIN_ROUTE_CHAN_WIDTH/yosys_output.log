/home/cae_sajib/Desktop/OpenFPGA/build/yosys/bin/yosys yosys.ys

 /----------------------------------------------------------------------------\
 |  yosys -- Yosys Open SYnthesis Suite                                       |
 |  Copyright (C) 2012 - 2025  Claire Xenia Wolf <claire@yosyshq.com>         |
 |  Distributed under an ISC-like license, type "license" to see terms        |
 \----------------------------------------------------------------------------/
 Yosys 0.54+29 (git sha1 7b0c1fe49, g++ 11.4.0-1ubuntu1~22.04 -fPIC -O3)

-- Executing script file `yosys.ys' --

1. Executing Verilog-2005 frontend: ./benchmark/fifo4.v
Parsing Verilog input from `./benchmark/fifo4.v' to AST representation.
Warning: Encountered `translate_off' comment! Such legacy hot comments are supported by Yosys, but are not part of any formal language specification. Using a portable and standards-compliant construct such as `ifdef is recommended!
Generating RTLIL representation for module `\fifo4'.
Successfully finished Verilog frontend.

2. Executing Verilog-2005 frontend: ./benchmark/simple_spi_top.v
Parsing Verilog input from `./benchmark/simple_spi_top.v' to AST representation.
Warning: Encountered `full_case' comment! Such legacy hot comments are supported by Yosys, but are not part of any formal language specification. Using the Verilog `full_case' attribute or the SystemVerilog `unique' or `unique0' keywords is recommended!
Warning: Encountered `parallel_case' comment! Such legacy hot comments are supported by Yosys, but are not part of any formal language specification. Using the Verilog `parallel_case' attribute or the SystemVerilog `unique' or `priority' keywords is recommended!
Generating RTLIL representation for module `\simple_spi_top'.
Successfully finished Verilog frontend.

3. Executing Verilog-2005 frontend: /home/cae_sajib/Desktop/OpenFPGA/openfpga_flow/openfpga_yosys_techlib/k6_frac_N10_tileable_adder_chain_dpram8K_dsp36_fracff_40nm_cell_sim.v
Parsing Verilog input from `/home/cae_sajib/Desktop/OpenFPGA/openfpga_flow/openfpga_yosys_techlib/k6_frac_N10_tileable_adder_chain_dpram8K_dsp36_fracff_40nm_cell_sim.v' to AST representation.
Generating RTLIL representation for module `\dpram_1024x8_core'.
Generating RTLIL representation for module `\dpram_1024x8'.
Generating RTLIL representation for module `\mult_36'.
Generating RTLIL representation for module `\dff'.
Generating RTLIL representation for module `\dffr'.
Generating RTLIL representation for module `\dffs'.
Generating RTLIL representation for module `\dffrn'.
Generating RTLIL representation for module `\dffsn'.
Successfully finished Verilog frontend.

4. Executing HIERARCHY pass (managing design hierarchy).

4.1. Analyzing design hierarchy..
Top module:  \simple_spi_top
Used module:     \fifo4
Parameter 1 (\dw) = 8

4.2. Executing AST frontend in derive mode using pre-parsed AST for module `\fifo4'.
Parameter 1 (\dw) = 8
Generating RTLIL representation for module `$paramod\fifo4\dw=s32'00000000000000000000000000001000'.
Parameter 1 (\dw) = 8
Found cached RTLIL representation for module `$paramod\fifo4\dw=s32'00000000000000000000000000001000'.

4.3. Analyzing design hierarchy..
Top module:  \simple_spi_top
Used module:     $paramod\fifo4\dw=s32'00000000000000000000000000001000

4.4. Analyzing design hierarchy..
Top module:  \simple_spi_top
Used module:     $paramod\fifo4\dw=s32'00000000000000000000000000001000
Removing unused module `\fifo4'.
Removed 1 unused modules.

5. Executing PROC pass (convert processes to netlists).

5.1. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

5.2. Executing PROC_RMDEAD pass (remove dead branches from decision trees).
Marked 2 switch rules as full_case in process $proc$./benchmark/simple_spi_top.v:317$83 in module simple_spi_top.
Removed 1 dead cases from process $proc$./benchmark/simple_spi_top.v:258$74 in module simple_spi_top.
Marked 2 switch rules as full_case in process $proc$./benchmark/simple_spi_top.v:258$74 in module simple_spi_top.
Marked 1 switch rules as full_case in process $proc$./benchmark/simple_spi_top.v:235$66 in module simple_spi_top.
Marked 1 switch rules as full_case in process $proc$./benchmark/simple_spi_top.v:187$56 in module simple_spi_top.
Marked 1 switch rules as full_case in process $proc$./benchmark/simple_spi_top.v:180$50 in module simple_spi_top.
Marked 1 switch rules as full_case in process $proc$./benchmark/simple_spi_top.v:155$44 in module simple_spi_top.
Removed 1 dead cases from process $proc$./benchmark/simple_spi_top.v:143$38 in module simple_spi_top.
Marked 1 switch rules as full_case in process $proc$./benchmark/simple_spi_top.v:123$28 in module simple_spi_top.
Marked 3 switch rules as full_case in process $proc$./benchmark/fifo4.v:125$126 in module $paramod\fifo4\dw=s32'00000000000000000000000000001000.
Marked 1 switch rules as full_case in process $proc$./benchmark/fifo4.v:117$114 in module $paramod\fifo4\dw=s32'00000000000000000000000000001000.
Marked 2 switch rules as full_case in process $proc$./benchmark/fifo4.v:104$110 in module $paramod\fifo4\dw=s32'00000000000000000000000000001000.
Marked 2 switch rules as full_case in process $proc$./benchmark/fifo4.v:94$106 in module $paramod\fifo4\dw=s32'00000000000000000000000000001000.
Removed a total of 2 dead cases.

5.3. Executing PROC_PRUNE pass (remove redundant assignments in processes).
Removed 6 redundant assignments.
Promoted 4 assignments to connections.

5.4. Executing PROC_INIT pass (extract init attributes).

5.5. Executing PROC_ARST pass (detect async resets in processes).
Found async reset \rst_i in `\simple_spi_top.$proc$./benchmark/simple_spi_top.v:155$44'.
Found async reset \rst_i in `\simple_spi_top.$proc$./benchmark/simple_spi_top.v:123$28'.
Found async reset \rst in `$paramod\fifo4\dw=s32'00000000000000000000000000001000.$proc$./benchmark/fifo4.v:104$110'.
Found async reset \rst in `$paramod\fifo4\dw=s32'00000000000000000000000000001000.$proc$./benchmark/fifo4.v:94$106'.

5.6. Executing PROC_ROM pass (convert switches to ROMs).
Converted 0 switches.
<suppressed ~27 debug messages>

5.7. Executing PROC_MUX pass (convert decision trees to multiplexers).
Creating decoders for process `\simple_spi_top.$proc$./benchmark/simple_spi_top.v:317$83'.
     1/1: $0\tcnt[1:0]
Creating decoders for process `\simple_spi_top.$proc$./benchmark/simple_spi_top.v:258$74'.
     1/6: $0\rfwe[0:0]
     2/6: $0\wfre[0:0]
     3/6: $0\bcnt[2:0]
     4/6: $0\state[1:0]
     5/6: $0\treg[7:0]
     6/6: $0\sck_o[0:0]
Creating decoders for process `\simple_spi_top.$proc$./benchmark/simple_spi_top.v:235$66'.
     1/1: $0\clkcnt[11:0]
Creating decoders for process `\simple_spi_top.$proc$./benchmark/simple_spi_top.v:203$62'.
Creating decoders for process `\simple_spi_top.$proc$./benchmark/simple_spi_top.v:187$56'.
     1/1: $0\wcol[0:0]
Creating decoders for process `\simple_spi_top.$proc$./benchmark/simple_spi_top.v:180$50'.
     1/1: $0\spif[0:0]
Creating decoders for process `\simple_spi_top.$proc$./benchmark/simple_spi_top.v:155$44'.
     1/1: $0\ack_o[0:0]
Creating decoders for process `\simple_spi_top.$proc$./benchmark/simple_spi_top.v:143$38'.
     1/1: $0\dat_o[7:0]
Creating decoders for process `\simple_spi_top.$proc$./benchmark/simple_spi_top.v:123$28'.
     1/2: $0\sper[7:0]
     2/2: $0\spcr[7:0]
Creating decoders for process `$paramod\fifo4\dw=s32'00000000000000000000000000001000.$proc$./benchmark/fifo4.v:125$126'.
     1/1: $0\gb[0:0]
Creating decoders for process `$paramod\fifo4\dw=s32'00000000000000000000000000001000.$proc$./benchmark/fifo4.v:117$114'.
     1/3: $1$memwr$\mem$./benchmark/fifo4.v:118$105_EN[7:0]$120
     2/3: $1$memwr$\mem$./benchmark/fifo4.v:118$105_DATA[7:0]$119
     3/3: $1$memwr$\mem$./benchmark/fifo4.v:118$105_ADDR[1:0]$118
Creating decoders for process `$paramod\fifo4\dw=s32'00000000000000000000000000001000.$proc$./benchmark/fifo4.v:104$110'.
     1/1: $0\rp[1:0]
Creating decoders for process `$paramod\fifo4\dw=s32'00000000000000000000000000001000.$proc$./benchmark/fifo4.v:94$106'.
     1/1: $0\wp[1:0]

5.8. Executing PROC_DLATCH pass (convert process syncs to latches).

5.9. Executing PROC_DFF pass (convert process syncs to FFs).
Creating register for signal `\simple_spi_top.\tcnt' using process `\simple_spi_top.$proc$./benchmark/simple_spi_top.v:317$83'.
  created $dff cell `$procdff$279' with positive edge clock.
Creating register for signal `\simple_spi_top.\sck_o' using process `\simple_spi_top.$proc$./benchmark/simple_spi_top.v:258$74'.
  created $dff cell `$procdff$280' with positive edge clock.
Creating register for signal `\simple_spi_top.\treg' using process `\simple_spi_top.$proc$./benchmark/simple_spi_top.v:258$74'.
  created $dff cell `$procdff$281' with positive edge clock.
Creating register for signal `\simple_spi_top.\wfre' using process `\simple_spi_top.$proc$./benchmark/simple_spi_top.v:258$74'.
  created $dff cell `$procdff$282' with positive edge clock.
Creating register for signal `\simple_spi_top.\rfwe' using process `\simple_spi_top.$proc$./benchmark/simple_spi_top.v:258$74'.
  created $dff cell `$procdff$283' with positive edge clock.
Creating register for signal `\simple_spi_top.\state' using process `\simple_spi_top.$proc$./benchmark/simple_spi_top.v:258$74'.
  created $dff cell `$procdff$284' with positive edge clock.
Creating register for signal `\simple_spi_top.\bcnt' using process `\simple_spi_top.$proc$./benchmark/simple_spi_top.v:258$74'.
  created $dff cell `$procdff$285' with positive edge clock.
Creating register for signal `\simple_spi_top.\clkcnt' using process `\simple_spi_top.$proc$./benchmark/simple_spi_top.v:235$66'.
  created $dff cell `$procdff$286' with positive edge clock.
Creating register for signal `\simple_spi_top.\inta_o' using process `\simple_spi_top.$proc$./benchmark/simple_spi_top.v:203$62'.
  created $dff cell `$procdff$287' with positive edge clock.
Creating register for signal `\simple_spi_top.\wcol' using process `\simple_spi_top.$proc$./benchmark/simple_spi_top.v:187$56'.
  created $dff cell `$procdff$288' with positive edge clock.
Creating register for signal `\simple_spi_top.\spif' using process `\simple_spi_top.$proc$./benchmark/simple_spi_top.v:180$50'.
  created $dff cell `$procdff$289' with positive edge clock.
Creating register for signal `\simple_spi_top.\ack_o' using process `\simple_spi_top.$proc$./benchmark/simple_spi_top.v:155$44'.
  created $adff cell `$procdff$294' with positive edge clock and positive level reset.
Creating register for signal `\simple_spi_top.\dat_o' using process `\simple_spi_top.$proc$./benchmark/simple_spi_top.v:143$38'.
  created $dff cell `$procdff$295' with positive edge clock.
Creating register for signal `\simple_spi_top.\spcr' using process `\simple_spi_top.$proc$./benchmark/simple_spi_top.v:123$28'.
  created $adff cell `$procdff$300' with positive edge clock and positive level reset.
Creating register for signal `\simple_spi_top.\sper' using process `\simple_spi_top.$proc$./benchmark/simple_spi_top.v:123$28'.
  created $adff cell `$procdff$305' with positive edge clock and positive level reset.
Creating register for signal `$paramod\fifo4\dw=s32'00000000000000000000000000001000.\gb' using process `$paramod\fifo4\dw=s32'00000000000000000000000000001000.$proc$./benchmark/fifo4.v:125$126'.
  created $dff cell `$procdff$306' with positive edge clock.
Creating register for signal `$paramod\fifo4\dw=s32'00000000000000000000000000001000.$memwr$\mem$./benchmark/fifo4.v:118$105_ADDR' using process `$paramod\fifo4\dw=s32'00000000000000000000000000001000.$proc$./benchmark/fifo4.v:117$114'.
  created $dff cell `$procdff$307' with positive edge clock.
Creating register for signal `$paramod\fifo4\dw=s32'00000000000000000000000000001000.$memwr$\mem$./benchmark/fifo4.v:118$105_DATA' using process `$paramod\fifo4\dw=s32'00000000000000000000000000001000.$proc$./benchmark/fifo4.v:117$114'.
  created $dff cell `$procdff$308' with positive edge clock.
Creating register for signal `$paramod\fifo4\dw=s32'00000000000000000000000000001000.$memwr$\mem$./benchmark/fifo4.v:118$105_EN' using process `$paramod\fifo4\dw=s32'00000000000000000000000000001000.$proc$./benchmark/fifo4.v:117$114'.
  created $dff cell `$procdff$309' with positive edge clock.
Creating register for signal `$paramod\fifo4\dw=s32'00000000000000000000000000001000.\rp' using process `$paramod\fifo4\dw=s32'00000000000000000000000000001000.$proc$./benchmark/fifo4.v:104$110'.
  created $adff cell `$procdff$314' with positive edge clock and positive level reset.
Creating register for signal `$paramod\fifo4\dw=s32'00000000000000000000000000001000.\wp' using process `$paramod\fifo4\dw=s32'00000000000000000000000000001000.$proc$./benchmark/fifo4.v:94$106'.
  created $adff cell `$procdff$319' with positive edge clock and positive level reset.

5.10. Executing PROC_MEMWR pass (convert process memory writes to cells).

5.11. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Found and cleaned up 3 empty switches in `\simple_spi_top.$proc$./benchmark/simple_spi_top.v:317$83'.
Removing empty process `simple_spi_top.$proc$./benchmark/simple_spi_top.v:317$83'.
Found and cleaned up 7 empty switches in `\simple_spi_top.$proc$./benchmark/simple_spi_top.v:258$74'.
Removing empty process `simple_spi_top.$proc$./benchmark/simple_spi_top.v:258$74'.
Found and cleaned up 2 empty switches in `\simple_spi_top.$proc$./benchmark/simple_spi_top.v:235$66'.
Removing empty process `simple_spi_top.$proc$./benchmark/simple_spi_top.v:235$66'.
Removing empty process `simple_spi_top.$proc$./benchmark/simple_spi_top.v:203$62'.
Found and cleaned up 1 empty switch in `\simple_spi_top.$proc$./benchmark/simple_spi_top.v:187$56'.
Removing empty process `simple_spi_top.$proc$./benchmark/simple_spi_top.v:187$56'.
Found and cleaned up 1 empty switch in `\simple_spi_top.$proc$./benchmark/simple_spi_top.v:180$50'.
Removing empty process `simple_spi_top.$proc$./benchmark/simple_spi_top.v:180$50'.
Removing empty process `simple_spi_top.$proc$./benchmark/simple_spi_top.v:155$44'.
Found and cleaned up 1 empty switch in `\simple_spi_top.$proc$./benchmark/simple_spi_top.v:143$38'.
Removing empty process `simple_spi_top.$proc$./benchmark/simple_spi_top.v:143$38'.
Found and cleaned up 3 empty switches in `\simple_spi_top.$proc$./benchmark/simple_spi_top.v:123$28'.
Removing empty process `simple_spi_top.$proc$./benchmark/simple_spi_top.v:123$28'.
Found and cleaned up 4 empty switches in `$paramod\fifo4\dw=s32'00000000000000000000000000001000.$proc$./benchmark/fifo4.v:125$126'.
Removing empty process `$paramod\fifo4\dw=s32'00000000000000000000000000001000.$proc$./benchmark/fifo4.v:125$126'.
Found and cleaned up 1 empty switch in `$paramod\fifo4\dw=s32'00000000000000000000000000001000.$proc$./benchmark/fifo4.v:117$114'.
Removing empty process `$paramod\fifo4\dw=s32'00000000000000000000000000001000.$proc$./benchmark/fifo4.v:117$114'.
Found and cleaned up 2 empty switches in `$paramod\fifo4\dw=s32'00000000000000000000000000001000.$proc$./benchmark/fifo4.v:104$110'.
Removing empty process `$paramod\fifo4\dw=s32'00000000000000000000000000001000.$proc$./benchmark/fifo4.v:104$110'.
Found and cleaned up 2 empty switches in `$paramod\fifo4\dw=s32'00000000000000000000000000001000.$proc$./benchmark/fifo4.v:94$106'.
Removing empty process `$paramod\fifo4\dw=s32'00000000000000000000000000001000.$proc$./benchmark/fifo4.v:94$106'.
Cleaned up 27 empty switches.

5.12. Executing OPT_EXPR pass (perform const folding).
Optimizing module simple_spi_top.
<suppressed ~37 debug messages>
Optimizing module $paramod\fifo4\dw=s32'00000000000000000000000000001000.
<suppressed ~5 debug messages>

6. Executing FLATTEN pass (flatten design).
Deleting now unused module $paramod\fifo4\dw=s32'00000000000000000000000000001000.
<suppressed ~2 debug messages>

7. Executing TRIBUF pass.

8. Executing OPT_EXPR pass (perform const folding).
Optimizing module simple_spi_top.
<suppressed ~6 debug messages>

9. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \simple_spi_top..
Removed 32 unused cells and 148 unused wires.
<suppressed ~39 debug messages>

10. Executing DEMINOUT pass (demote inout ports to input or output).

11. Executing OPT pass (performing simple optimizations).

11.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module simple_spi_top.

11.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\simple_spi_top'.
<suppressed ~66 debug messages>
Removed a total of 22 cells.

11.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \simple_spi_top..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~25 debug messages>

11.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \simple_spi_top.
    Consolidated identical input bits for $mux cell $flatten\rfifo.$procmux$261:
      Old ports: A=8'00000000, B=8'11111111, Y=$flatten\rfifo.$0$memwr$\mem$./benchmark/fifo4.v:118$105_EN[7:0]$117
      New ports: A=1'0, B=1'1, Y=$flatten\rfifo.$0$memwr$\mem$./benchmark/fifo4.v:118$105_EN[7:0]$117 [0]
      New connections: $flatten\rfifo.$0$memwr$\mem$./benchmark/fifo4.v:118$105_EN[7:0]$117 [7:1] = { $flatten\rfifo.$0$memwr$\mem$./benchmark/fifo4.v:118$105_EN[7:0]$117 [0] $flatten\rfifo.$0$memwr$\mem$./benchmark/fifo4.v:118$105_EN[7:0]$117 [0] $flatten\rfifo.$0$memwr$\mem$./benchmark/fifo4.v:118$105_EN[7:0]$117 [0] $flatten\rfifo.$0$memwr$\mem$./benchmark/fifo4.v:118$105_EN[7:0]$117 [0] $flatten\rfifo.$0$memwr$\mem$./benchmark/fifo4.v:118$105_EN[7:0]$117 [0] $flatten\rfifo.$0$memwr$\mem$./benchmark/fifo4.v:118$105_EN[7:0]$117 [0] $flatten\rfifo.$0$memwr$\mem$./benchmark/fifo4.v:118$105_EN[7:0]$117 [0] }
    Consolidated identical input bits for $mux cell $flatten\wfifo.$procmux$261:
      Old ports: A=8'00000000, B=8'11111111, Y=$flatten\wfifo.$0$memwr$\mem$./benchmark/fifo4.v:118$105_EN[7:0]$117
      New ports: A=1'0, B=1'1, Y=$flatten\wfifo.$0$memwr$\mem$./benchmark/fifo4.v:118$105_EN[7:0]$117 [0]
      New connections: $flatten\wfifo.$0$memwr$\mem$./benchmark/fifo4.v:118$105_EN[7:0]$117 [7:1] = { $flatten\wfifo.$0$memwr$\mem$./benchmark/fifo4.v:118$105_EN[7:0]$117 [0] $flatten\wfifo.$0$memwr$\mem$./benchmark/fifo4.v:118$105_EN[7:0]$117 [0] $flatten\wfifo.$0$memwr$\mem$./benchmark/fifo4.v:118$105_EN[7:0]$117 [0] $flatten\wfifo.$0$memwr$\mem$./benchmark/fifo4.v:118$105_EN[7:0]$117 [0] $flatten\wfifo.$0$memwr$\mem$./benchmark/fifo4.v:118$105_EN[7:0]$117 [0] $flatten\wfifo.$0$memwr$\mem$./benchmark/fifo4.v:118$105_EN[7:0]$117 [0] $flatten\wfifo.$0$memwr$\mem$./benchmark/fifo4.v:118$105_EN[7:0]$117 [0] }
  Optimizing cells in module \simple_spi_top.
Performed a total of 2 changes.

11.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\simple_spi_top'.
Removed a total of 0 cells.

11.6. Executing OPT_DFF pass (perform DFF optimizations).

11.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \simple_spi_top..
Removed 0 unused cells and 22 unused wires.
<suppressed ~1 debug messages>

11.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module simple_spi_top.

11.9. Rerunning OPT passes. (Maybe there is more to do..)

11.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \simple_spi_top..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~25 debug messages>

11.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \simple_spi_top.
Performed a total of 0 changes.

11.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\simple_spi_top'.
Removed a total of 0 cells.

11.13. Executing OPT_DFF pass (perform DFF optimizations).

11.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \simple_spi_top..

11.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module simple_spi_top.

11.16. Finished OPT passes. (There is nothing left to do.)

12. Executing OPT_EXPR pass (perform const folding).
Optimizing module simple_spi_top.

13. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \simple_spi_top..

14. Executing CHECK pass (checking for obvious problems).
Checking module simple_spi_top...
Found and reported 0 problems.

15. Executing OPT pass (performing simple optimizations).

15.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module simple_spi_top.

15.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\simple_spi_top'.
Removed a total of 0 cells.

15.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \simple_spi_top..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~25 debug messages>

15.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \simple_spi_top.
Performed a total of 0 changes.

15.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\simple_spi_top'.
Removed a total of 0 cells.

15.6. Executing OPT_DFF pass (perform DFF optimizations).

15.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \simple_spi_top..

15.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module simple_spi_top.

15.9. Finished OPT passes. (There is nothing left to do.)

16. Executing WREDUCE pass (reducing word size of cells).
Removed top 1 bits (of 2) from port B of cell simple_spi_top.$eq$./benchmark/simple_spi_top.v:177$48 ($eq).
Removed top 10 bits (of 11) from port B of cell simple_spi_top.$sub$./benchmark/simple_spi_top.v:237$71 ($sub).
Removed top 2 bits (of 3) from port B of cell simple_spi_top.$sub$./benchmark/simple_spi_top.v:296$79 ($sub).
Removed top 1 bits (of 2) from port B of cell simple_spi_top.$sub$./benchmark/simple_spi_top.v:322$86 ($sub).
Removed top 1 bits (of 2) from mux cell simple_spi_top.$procmux$171 ($mux).
Removed top 1 bits (of 2) from port B of cell simple_spi_top.$procmux$178_CMP0 ($eq).
Removed top 1 bits (of 4) from port B of cell simple_spi_top.$procmux$219_CMP0 ($eq).
Removed top 1 bits (of 4) from port B of cell simple_spi_top.$procmux$220_CMP0 ($eq).
Removed top 1 bits (of 4) from port B of cell simple_spi_top.$procmux$221_CMP0 ($eq).
Removed top 1 bits (of 4) from port B of cell simple_spi_top.$procmux$222_CMP0 ($eq).
Removed top 2 bits (of 4) from port B of cell simple_spi_top.$procmux$223_CMP0 ($eq).
Removed top 2 bits (of 4) from port B of cell simple_spi_top.$procmux$224_CMP0 ($eq).
Removed top 3 bits (of 4) from port B of cell simple_spi_top.$procmux$225_CMP0 ($eq).
Removed top 1 bits (of 2) from port B of cell simple_spi_top.$flatten\rfifo.$add$./benchmark/fifo4.v:111$112 ($add).
Removed top 1 bits (of 2) from port B of cell simple_spi_top.$flatten\rfifo.$add$./benchmark/fifo4.v:101$108 ($add).
Removed top 1 bits (of 2) from port B of cell simple_spi_top.$flatten\wfifo.$add$./benchmark/fifo4.v:111$112 ($add).
Removed top 1 bits (of 2) from port B of cell simple_spi_top.$flatten\wfifo.$add$./benchmark/fifo4.v:101$108 ($add).
Removed top 1 bits (of 2) from wire simple_spi_top.$procmux$171_Y.

17. Executing PEEPOPT pass (run peephole optimizers).

18. Executing PMUXTREE pass.

19. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \simple_spi_top..
Removed 10 unused cells and 17 unused wires.
<suppressed ~11 debug messages>

20. Executing MEMORY_DFF pass (merging $dff cells to $memrd).
Checking read port `\rfifo.mem'[0] in module `\simple_spi_top': FF found, but with a mux select that doesn't seem to correspond to transparency logic.
Checking read port `\wfifo.mem'[0] in module `\simple_spi_top': FF found, but with a mux select that doesn't seem to correspond to transparency logic.
Checking read port address `\rfifo.mem'[0] in module `\simple_spi_top': address FF has async set and/or reset, not supported.
Checking read port address `\wfifo.mem'[0] in module `\simple_spi_top': address FF has async set and/or reset, not supported.

21. Executing WREDUCE pass (reducing word size of cells).

22. Executing TECHMAP pass (map to technology primitives).

22.1. Executing Verilog-2005 frontend: /home/cae_sajib/Desktop/OpenFPGA/build/yosys/bin/../share/yosys/mul2dsp.v
Parsing Verilog input from `/home/cae_sajib/Desktop/OpenFPGA/build/yosys/bin/../share/yosys/mul2dsp.v' to AST representation.
Generating RTLIL representation for module `\_80_mul'.
Generating RTLIL representation for module `\_90_soft_mul'.
Successfully finished Verilog frontend.

22.2. Executing Verilog-2005 frontend: /home/cae_sajib/Desktop/OpenFPGA/openfpga_flow/openfpga_yosys_techlib/k6_frac_N10_tileable_adder_chain_dpram8K_dsp36_40nm_dsp_map.v
Parsing Verilog input from `/home/cae_sajib/Desktop/OpenFPGA/openfpga_flow/openfpga_yosys_techlib/k6_frac_N10_tileable_adder_chain_dpram8K_dsp36_40nm_dsp_map.v' to AST representation.
Generating RTLIL representation for module `\mult_36x36'.
Successfully finished Verilog frontend.

22.3. Continuing TECHMAP pass.
No more expansions possible.
<suppressed ~5 debug messages>

23. Executing OPT_EXPR pass (perform const folding).

24. Executing WREDUCE pass (reducing word size of cells).
Warning: Selection "Extract" did not match any module.
Warning: Selection "arithmetic" did not match any module.
Warning: Selection "functions" did not match any module.

25. Executing TECHMAP pass (map to technology primitives).

25.1. Executing Verilog-2005 frontend: /home/cae_sajib/Desktop/OpenFPGA/build/yosys/bin/../share/yosys/techmap.v
Parsing Verilog input from `/home/cae_sajib/Desktop/OpenFPGA/build/yosys/bin/../share/yosys/techmap.v' to AST representation.
Generating RTLIL representation for module `\_90_simplemap_bool_ops'.
Generating RTLIL representation for module `\_90_simplemap_reduce_ops'.
Generating RTLIL representation for module `\_90_simplemap_logic_ops'.
Generating RTLIL representation for module `\_90_simplemap_compare_ops'.
Generating RTLIL representation for module `\_90_simplemap_various'.
Generating RTLIL representation for module `\_90_simplemap_registers'.
Generating RTLIL representation for module `\_90_shift_ops_shr_shl_sshl_sshr'.
Generating RTLIL representation for module `\_90_shift_shiftx'.
Generating RTLIL representation for module `\_90_fa'.
Generating RTLIL representation for module `\_90_lcu_brent_kung'.
Generating RTLIL representation for module `\_90_alu'.
Generating RTLIL representation for module `\_90_macc'.
Generating RTLIL representation for module `\_90_alumacc'.
Generating RTLIL representation for module `\$__div_mod_u'.
Generating RTLIL representation for module `\$__div_mod_trunc'.
Generating RTLIL representation for module `\_90_div'.
Generating RTLIL representation for module `\_90_mod'.
Generating RTLIL representation for module `\$__div_mod_floor'.
Generating RTLIL representation for module `\_90_divfloor'.
Generating RTLIL representation for module `\_90_modfloor'.
Generating RTLIL representation for module `\_90_pow'.
Generating RTLIL representation for module `\_90_pmux'.
Generating RTLIL representation for module `\_90_demux'.
Generating RTLIL representation for module `\_90_lut'.
Successfully finished Verilog frontend.

25.2. Continuing TECHMAP pass.
Using extmapper simplemap for cells of type $mux.
Using extmapper simplemap for cells of type $eq.
Using extmapper simplemap for cells of type $logic_not.
Using extmapper simplemap for cells of type $and.
Using extmapper simplemap for cells of type $not.
Using extmapper simplemap for cells of type $or.
Using extmapper simplemap for cells of type $reduce_or.
Running "alumacc" on wrapper $extern:wrap:$sub:A_SIGNED=0:A_WIDTH=12:B_SIGNED=0:B_WIDTH=1:Y_WIDTH=12:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$sub:A_SIGNED=0:A_WIDTH=12:B_SIGNED=0:B_WIDTH=1:Y_WIDTH=12:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$sub:A_SIGNED=0:A_WIDTH=12:B_SIGNED=0:B_WIDTH=1:Y_WIDTH=12:394426c56d1a028ba8fdd5469b163e04011def47.
Running "alumacc" on wrapper $extern:wrap:$sub:A_SIGNED=0:A_WIDTH=3:B_SIGNED=0:B_WIDTH=1:Y_WIDTH=3:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$sub:A_SIGNED=0:A_WIDTH=3:B_SIGNED=0:B_WIDTH=1:Y_WIDTH=3:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$sub:A_SIGNED=0:A_WIDTH=3:B_SIGNED=0:B_WIDTH=1:Y_WIDTH=3:394426c56d1a028ba8fdd5469b163e04011def47.
Running "alumacc" on wrapper $extern:wrap:$sub:A_SIGNED=0:A_WIDTH=2:B_SIGNED=0:B_WIDTH=1:Y_WIDTH=2:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$sub:A_SIGNED=0:A_WIDTH=2:B_SIGNED=0:B_WIDTH=1:Y_WIDTH=2:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$sub:A_SIGNED=0:A_WIDTH=2:B_SIGNED=0:B_WIDTH=1:Y_WIDTH=2:394426c56d1a028ba8fdd5469b163e04011def47.
Using extmapper simplemap for cells of type $dff.
Using extmapper simplemap for cells of type $adff.
Running "alumacc" on wrapper $extern:wrap:$add:A_SIGNED=0:A_WIDTH=2:B_SIGNED=0:B_WIDTH=1:Y_WIDTH=2:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$add:A_SIGNED=0:A_WIDTH=2:B_SIGNED=0:B_WIDTH=1:Y_WIDTH=2:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$add:A_SIGNED=0:A_WIDTH=2:B_SIGNED=0:B_WIDTH=1:Y_WIDTH=2:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $paramod$6831557730818fb92b11a295f9eb33ff8fa62af1\_90_alu for cells of type $alu.
Using template $paramod$b8c0a997bce700f23568a5ada79cc6781d1f5ca0\_90_alu for cells of type $alu.
Using template $paramod$ba698a254f9a5947e85cbe7beae6b161eefc5386\_90_alu for cells of type $alu.
Using template $paramod$175e67c02b86e96b1288b9dc100122520d7240d8\_90_alu for cells of type $alu.
Using extmapper simplemap for cells of type $xor.
Using template $paramod\_90_lcu_brent_kung\WIDTH=32'00000000000000000000000000001100 for cells of type $lcu.
Using extmapper simplemap for cells of type $pos.
Using template $paramod\_90_lcu_brent_kung\WIDTH=32'00000000000000000000000000000011 for cells of type $lcu.
Using template $paramod\_90_lcu_brent_kung\WIDTH=32'00000000000000000000000000000010 for cells of type $lcu.
No more expansions possible.
<suppressed ~853 debug messages>

26. Executing ALUMACC pass (create $alu and $macc cells).
Extracting $alu and $macc cells in module simple_spi_top:
  created 0 $alu and 0 $macc cells.

27. Executing SHARE pass (SAT-based resource sharing).

28. Executing OPT pass (performing simple optimizations).

28.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module simple_spi_top.
<suppressed ~426 debug messages>

28.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\simple_spi_top'.
<suppressed ~144 debug messages>
Removed a total of 48 cells.

28.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \simple_spi_top..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

28.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \simple_spi_top.
Performed a total of 0 changes.

28.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\simple_spi_top'.
Removed a total of 0 cells.

28.6. Executing OPT_DFF pass (perform DFF optimizations).

28.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \simple_spi_top..
Removed 23 unused cells and 331 unused wires.
<suppressed ~24 debug messages>

28.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module simple_spi_top.

28.9. Rerunning OPT passes. (Maybe there is more to do..)

28.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \simple_spi_top..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

28.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \simple_spi_top.
Performed a total of 0 changes.

28.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\simple_spi_top'.
Removed a total of 0 cells.

28.13. Executing OPT_DFF pass (perform DFF optimizations).

28.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \simple_spi_top..

28.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module simple_spi_top.

28.16. Finished OPT passes. (There is nothing left to do.)

29. Executing FSM pass (extract and optimize FSM).

29.1. Executing FSM_DETECT pass (finding FSMs in design).

29.2. Executing FSM_EXTRACT pass (extracting FSM from design).

29.3. Executing FSM_OPT pass (simple optimizations of FSMs).

29.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \simple_spi_top..

29.5. Executing FSM_OPT pass (simple optimizations of FSMs).

29.6. Executing FSM_RECODE pass (re-assigning FSM state encoding).

29.7. Executing FSM_INFO pass (dumping all available information on FSM cells).

29.8. Executing FSM_MAP pass (mapping FSMs to basic logic).

30. Executing OPT pass (performing simple optimizations).

30.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module simple_spi_top.

30.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\simple_spi_top'.
Removed a total of 0 cells.

30.3. Executing OPT_DFF pass (perform DFF optimizations).

30.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \simple_spi_top..

30.5. Finished fast OPT passes.

31. Executing MEMORY pass.

31.1. Executing OPT_MEM pass (optimize memories).
Performed a total of 0 transformations.

31.2. Executing OPT_MEM_PRIORITY pass (removing unnecessary memory write priority relations).
Performed a total of 0 transformations.

31.3. Executing OPT_MEM_FEEDBACK pass (finding memory read-to-write feedback paths).
  Analyzing simple_spi_top.rfifo.mem write port 0.
  Analyzing simple_spi_top.wfifo.mem write port 0.

31.4. Executing MEMORY_BMUX2ROM pass (converting muxes to ROMs).

31.5. Executing MEMORY_DFF pass (merging $dff cells to $memrd).
Checking read port `\rfifo.mem'[0] in module `\simple_spi_top': no output FF found.
Checking read port `\wfifo.mem'[0] in module `\simple_spi_top': no output FF found.
Checking read port address `\rfifo.mem'[0] in module `\simple_spi_top': address FF has async set and/or reset, not supported.
Checking read port address `\wfifo.mem'[0] in module `\simple_spi_top': address FF has async set and/or reset, not supported.

31.6. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \simple_spi_top..

31.7. Executing MEMORY_SHARE pass (consolidating $memrd/$memwr cells).

31.8. Executing OPT_MEM_WIDEN pass (optimize memories where all ports are wide).
Performed a total of 0 transformations.

31.9. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \simple_spi_top..

31.10. Executing MEMORY_COLLECT pass (generating $mem cells).

32. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \simple_spi_top..

33. Executing MEMORY_BRAM pass (mapping $mem cells to block memories).
Processing simple_spi_top.rfifo.mem:
  Properties: ports=2 bits=32 rports=1 wports=1 dbits=8 abits=2 words=4
  Checking rule #1 for bram type $__MY_DPRAM_1024x8 (variant 1):
    Bram geometry: abits=10 dbits=8 wports=0 rports=0
    Estimated number of duplicates for more read ports: dups=1
    Metrics for $__MY_DPRAM_1024x8: awaste=1020 dwaste=0 bwaste=8160 waste=8160 efficiency=0
    Rule #1 for bram type $__MY_DPRAM_1024x8 (variant 1) accepted.
    Mapping to bram type $__MY_DPRAM_1024x8 (variant 1):
      Write port #0 is in clock domain \clk_i.
        Mapped to bram port A1.
      Read port #0 is in clock domain !~async~.
        Bram port B1.1 has incompatible clock type.
        Failed to map read port #0.
    Mapping to bram type $__MY_DPRAM_1024x8 failed.
  No acceptable bram resources found.
Processing simple_spi_top.wfifo.mem:
  Properties: ports=2 bits=32 rports=1 wports=1 dbits=8 abits=2 words=4
  Checking rule #1 for bram type $__MY_DPRAM_1024x8 (variant 1):
    Bram geometry: abits=10 dbits=8 wports=0 rports=0
    Estimated number of duplicates for more read ports: dups=1
    Metrics for $__MY_DPRAM_1024x8: awaste=1020 dwaste=0 bwaste=8160 waste=8160 efficiency=0
    Rule #1 for bram type $__MY_DPRAM_1024x8 (variant 1) accepted.
    Mapping to bram type $__MY_DPRAM_1024x8 (variant 1):
      Write port #0 is in clock domain \clk_i.
        Mapped to bram port A1.
      Read port #0 is in clock domain !~async~.
        Bram port B1.1 has incompatible clock type.
        Failed to map read port #0.
    Mapping to bram type $__MY_DPRAM_1024x8 failed.
  No acceptable bram resources found.

34. Executing TECHMAP pass (map to technology primitives).

34.1. Executing Verilog-2005 frontend: /home/cae_sajib/Desktop/OpenFPGA/openfpga_flow/openfpga_yosys_techlib/k6_frac_N10_tileable_adder_chain_dpram8K_dsp36_40nm_bram_map.v
Parsing Verilog input from `/home/cae_sajib/Desktop/OpenFPGA/openfpga_flow/openfpga_yosys_techlib/k6_frac_N10_tileable_adder_chain_dpram8K_dsp36_40nm_bram_map.v' to AST representation.
Generating RTLIL representation for module `\$__MY_DPRAM_1024x8'.
Successfully finished Verilog frontend.

34.2. Continuing TECHMAP pass.
No more expansions possible.
<suppressed ~3 debug messages>

35. Executing OPT pass (performing simple optimizations).

35.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module simple_spi_top.
<suppressed ~20 debug messages>

35.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\simple_spi_top'.
Removed a total of 0 cells.

35.3. Executing OPT_DFF pass (perform DFF optimizations).

35.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \simple_spi_top..
Removed 0 unused cells and 4 unused wires.
<suppressed ~1 debug messages>

35.5. Finished fast OPT passes.

36. Executing MEMORY_MAP pass (converting memories to logic and flip-flops).
Mapping memory \rfifo.mem in module \simple_spi_top:
  created 4 $dff cells and 0 static cells of width 8.
  read interface: 0 $dff and 3 $mux cells.
  write interface: 4 write mux blocks.
Mapping memory \wfifo.mem in module \simple_spi_top:
  created 4 $dff cells and 0 static cells of width 8.
  read interface: 0 $dff and 3 $mux cells.
  write interface: 4 write mux blocks.

37. Executing OPT pass (performing simple optimizations).

37.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module simple_spi_top.
<suppressed ~8 debug messages>

37.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\simple_spi_top'.
Removed a total of 0 cells.

37.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \simple_spi_top..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~10 debug messages>

37.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \simple_spi_top.
Performed a total of 0 changes.

37.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\simple_spi_top'.
Removed a total of 0 cells.

37.6. Executing OPT_DFF pass (perform DFF optimizations).

37.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \simple_spi_top..
Removed 0 unused cells and 20 unused wires.
<suppressed ~1 debug messages>

37.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module simple_spi_top.

37.9. Rerunning OPT passes. (Maybe there is more to do..)

37.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \simple_spi_top..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~10 debug messages>

37.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \simple_spi_top.
Performed a total of 0 changes.

37.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\simple_spi_top'.
Removed a total of 0 cells.

37.13. Executing OPT_DFF pass (perform DFF optimizations).

37.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \simple_spi_top..

37.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module simple_spi_top.

37.16. Finished OPT passes. (There is nothing left to do.)

38. Executing TECHMAP pass (map to technology primitives).

38.1. Executing Verilog-2005 frontend: /home/cae_sajib/Desktop/OpenFPGA/openfpga_flow/openfpga_yosys_techlib/k6_frac_N10_tileable_adder_chain_dpram8K_dsp36_fracff_40nm_dff_map.v
Parsing Verilog input from `/home/cae_sajib/Desktop/OpenFPGA/openfpga_flow/openfpga_yosys_techlib/k6_frac_N10_tileable_adder_chain_dpram8K_dsp36_fracff_40nm_dff_map.v' to AST representation.
Generating RTLIL representation for module `\$_DFF_P_'.
Generating RTLIL representation for module `\$_DFF_PP0_'.
Generating RTLIL representation for module `\$_DFF_PP1_'.
Generating RTLIL representation for module `\$_DFF_PN0_'.
Generating RTLIL representation for module `\$_DFF_PN1_'.
Successfully finished Verilog frontend.

38.2. Continuing TECHMAP pass.
Using template $paramod\$_DFF_P_\_TECHMAP_WIREINIT_Q_=1'x for cells of type $_DFF_P_.
Using template $paramod\$_DFF_PN0_\_TECHMAP_WIREINIT_Q_=1'x for cells of type $_DFF_PN0_.
Using template $paramod\$_DFF_PN1_\_TECHMAP_WIREINIT_Q_=1'x for cells of type $_DFF_PN1_.
No more expansions possible.
<suppressed ~108 debug messages>

39. Executing OPT_EXPR pass (perform const folding).
Optimizing module simple_spi_top.

40. Executing SIMPLEMAP pass (map simple cells to gate primitives).
Mapping simple_spi_top.$auto$memory_map.cc:92:addr_decode$1678 ($not).
Mapping simple_spi_top.$auto$memory_map.cc:92:addr_decode$1680 ($not).
Mapping simple_spi_top.$auto$memory_map.cc:92:addr_decode$1727 ($not).
Mapping simple_spi_top.$auto$memory_map.cc:92:addr_decode$1729 ($not).
Mapping simple_spi_top.$auto$memory_map.cc:97:addr_decode$1682 ($and).
Mapping simple_spi_top.$auto$memory_map.cc:97:addr_decode$1690 ($and).
Mapping simple_spi_top.$auto$memory_map.cc:97:addr_decode$1698 ($and).
Mapping simple_spi_top.$auto$memory_map.cc:97:addr_decode$1704 ($and).
Mapping simple_spi_top.$auto$memory_map.cc:97:addr_decode$1731 ($and).
Mapping simple_spi_top.$auto$memory_map.cc:97:addr_decode$1739 ($and).
Mapping simple_spi_top.$auto$memory_map.cc:97:addr_decode$1747 ($and).
Mapping simple_spi_top.$auto$memory_map.cc:97:addr_decode$1753 ($and).
Mapping simple_spi_top.$memory\rfifo.mem$rdmux[0][0][0]$1669 ($mux).
Mapping simple_spi_top.$memory\rfifo.mem$rdmux[0][1][0]$1672 ($mux).
Mapping simple_spi_top.$memory\rfifo.mem$rdmux[0][1][1]$1675 ($mux).
Mapping simple_spi_top.$memory\rfifo.mem$wren[0][0][0]$1684 ($and).
Mapping simple_spi_top.$memory\rfifo.mem$wren[1][0][0]$1692 ($and).
Mapping simple_spi_top.$memory\rfifo.mem$wren[2][0][0]$1700 ($and).
Mapping simple_spi_top.$memory\rfifo.mem$wren[3][0][0]$1706 ($and).
Mapping simple_spi_top.$memory\rfifo.mem$wrmux[0][0][0]$1686 ($mux).
Mapping simple_spi_top.$memory\rfifo.mem$wrmux[1][0][0]$1694 ($mux).
Mapping simple_spi_top.$memory\rfifo.mem$wrmux[2][0][0]$1702 ($mux).
Mapping simple_spi_top.$memory\rfifo.mem$wrmux[3][0][0]$1708 ($mux).
Mapping simple_spi_top.$memory\rfifo.mem[0]$1661 ($dff).
Mapping simple_spi_top.$memory\rfifo.mem[1]$1663 ($dff).
Mapping simple_spi_top.$memory\rfifo.mem[2]$1665 ($dff).
Mapping simple_spi_top.$memory\rfifo.mem[3]$1667 ($dff).
Mapping simple_spi_top.$memory\wfifo.mem$rdmux[0][0][0]$1718 ($mux).
Mapping simple_spi_top.$memory\wfifo.mem$rdmux[0][1][0]$1721 ($mux).
Mapping simple_spi_top.$memory\wfifo.mem$rdmux[0][1][1]$1724 ($mux).
Mapping simple_spi_top.$memory\wfifo.mem$wren[0][0][0]$1733 ($and).
Mapping simple_spi_top.$memory\wfifo.mem$wren[1][0][0]$1741 ($and).
Mapping simple_spi_top.$memory\wfifo.mem$wren[2][0][0]$1749 ($and).
Mapping simple_spi_top.$memory\wfifo.mem$wren[3][0][0]$1755 ($and).
Mapping simple_spi_top.$memory\wfifo.mem$wrmux[0][0][0]$1735 ($mux).
Mapping simple_spi_top.$memory\wfifo.mem$wrmux[1][0][0]$1743 ($mux).
Mapping simple_spi_top.$memory\wfifo.mem$wrmux[2][0][0]$1751 ($mux).
Mapping simple_spi_top.$memory\wfifo.mem$wrmux[3][0][0]$1757 ($mux).
Mapping simple_spi_top.$memory\wfifo.mem[0]$1710 ($dff).
Mapping simple_spi_top.$memory\wfifo.mem[1]$1712 ($dff).
Mapping simple_spi_top.$memory\wfifo.mem[2]$1714 ($dff).
Mapping simple_spi_top.$memory\wfifo.mem[3]$1716 ($dff).

41. Executing OPT_EXPR pass (perform const folding).
Optimizing module simple_spi_top.

42. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\simple_spi_top'.
<suppressed ~6 debug messages>
Removed a total of 2 cells.

43. Executing OPT_DFF pass (perform DFF optimizations).

44. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \simple_spi_top..
Removed 0 unused cells and 231 unused wires.
<suppressed ~1 debug messages>

45. Executing OPT pass (performing simple optimizations).

45.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module simple_spi_top.

45.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\simple_spi_top'.
Removed a total of 0 cells.

45.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \simple_spi_top..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

45.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \simple_spi_top.
Performed a total of 0 changes.

45.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\simple_spi_top'.
Removed a total of 0 cells.

45.6. Executing OPT_DFF pass (perform DFF optimizations).

45.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \simple_spi_top..

45.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module simple_spi_top.

45.9. Finished OPT passes. (There is nothing left to do.)

46. Executing ABC pass (technology mapping using ABC).

46.1. Extracting gate netlist of module `\simple_spi_top' to `<abc-temp-dir>/input.blif'..
Extracted 563 gates and 703 wires to a netlist network with 138 inputs and 132 outputs.

46.1.1. Executing ABC.
Running ABC command: "<yosys-exe-dir>/yosys-abc" -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_lut <abc-temp-dir>/lutdefs.txt 
ABC: + strash 
ABC: + &get -n 
ABC: + &fraig -x 
ABC: + &put 
ABC: + scorr 
ABC: Warning: The network is combinational (run "fraig" or "fraig_sweep").
ABC: + dc2 
ABC: + dretime 
ABC: + strash 
ABC: + dch -f 
ABC: + if 
ABC: + mfs2 
ABC: + lutpack -S 1 
ABC: + write_blif <abc-temp-dir>/output.blif 

46.1.2. Re-integrating ABC results.
ABC RESULTS:              $lut cells:      187
ABC RESULTS:        internal signals:      433
ABC RESULTS:           input signals:      138
ABC RESULTS:          output signals:      132
Removing temp directory.

47. Executing HIERARCHY pass (managing design hierarchy).
Attribute `top' found on module `simple_spi_top'. Setting top module to simple_spi_top.

47.1. Analyzing design hierarchy..
Top module:  \simple_spi_top

47.2. Analyzing design hierarchy..
Top module:  \simple_spi_top
Removed 0 unused modules.

48. Printing statistics.

=== simple_spi_top ===

   Number of wires:                639
   Number of wire bits:           1200
   Number of public wires:          82
   Number of public wire bits:     252
   Number of ports:                 13
   Number of port bits:             28
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                321
     $_DFF_P_                       64
     $lut                          187
     $scopeinfo                      2
     dff                            43
     dffrn                          24
     dffsn                           1

49. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \simple_spi_top..
Removed 2 unused cells and 450 unused wires.
<suppressed ~40 debug messages>

50. Executing BLIF backend.

Warnings: 6 unique messages, 6 total
End of script. Logfile hash: 7ea71085a7, CPU: user 0.37s system 0.01s, MEM: 24.75 MB peak
Yosys 0.54+29 (git sha1 7b0c1fe49, g++ 11.4.0-1ubuntu1~22.04 -fPIC -O3)
Time spent: 41% 1x abc (0 sec), 17% 27x opt_expr (0 sec), ...
0