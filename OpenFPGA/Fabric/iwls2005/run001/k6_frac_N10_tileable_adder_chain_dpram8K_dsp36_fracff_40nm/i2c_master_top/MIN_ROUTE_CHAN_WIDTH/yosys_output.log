/home/cae_sajib/Desktop/OpenFPGA/build/yosys/bin/yosys yosys.ys

 /----------------------------------------------------------------------------\
 |  yosys -- Yosys Open SYnthesis Suite                                       |
 |  Copyright (C) 2012 - 2025  Claire Xenia Wolf <claire@yosyshq.com>         |
 |  Distributed under an ISC-like license, type "license" to see terms        |
 \----------------------------------------------------------------------------/
 Yosys 0.54+29 (git sha1 7b0c1fe49, g++ 11.4.0-1ubuntu1~22.04 -fPIC -O3)

-- Executing script file `yosys.ys' --

1. Executing Verilog-2005 frontend: ./benchmark/i2c_master_defines.v
Parsing Verilog input from `./benchmark/i2c_master_defines.v' to AST representation.
Successfully finished Verilog frontend.

2. Executing Verilog-2005 frontend: ./benchmark/i2c_master_byte_ctrl.v
Parsing Verilog input from `./benchmark/i2c_master_byte_ctrl.v' to AST representation.
Warning: Encountered `translate_off' comment! Such legacy hot comments are supported by Yosys, but are not part of any formal language specification. Using a portable and standards-compliant construct such as `ifdef is recommended!
Warning: Encountered `full_case' comment! Such legacy hot comments are supported by Yosys, but are not part of any formal language specification. Using the Verilog `full_case' attribute or the SystemVerilog `unique' or `unique0' keywords is recommended!
Warning: Encountered `parallel_case' comment! Such legacy hot comments are supported by Yosys, but are not part of any formal language specification. Using the Verilog `parallel_case' attribute or the SystemVerilog `unique' or `priority' keywords is recommended!
Generating RTLIL representation for module `\i2c_master_byte_ctrl'.
Successfully finished Verilog frontend.

3. Executing Verilog-2005 frontend: ./benchmark/timescale.v
Parsing Verilog input from `./benchmark/timescale.v' to AST representation.
Successfully finished Verilog frontend.

4. Executing Verilog-2005 frontend: ./benchmark/i2c_master_bit_ctrl.v
Parsing Verilog input from `./benchmark/i2c_master_bit_ctrl.v' to AST representation.
Generating RTLIL representation for module `\i2c_master_bit_ctrl'.
Successfully finished Verilog frontend.

5. Executing Verilog-2005 frontend: ./benchmark/i2c_master_top.v
Parsing Verilog input from `./benchmark/i2c_master_top.v' to AST representation.
Generating RTLIL representation for module `\i2c_master_top'.
Successfully finished Verilog frontend.

6. Executing Verilog-2005 frontend: /home/cae_sajib/Desktop/OpenFPGA/openfpga_flow/openfpga_yosys_techlib/k6_frac_N10_tileable_adder_chain_dpram8K_dsp36_fracff_40nm_cell_sim.v
Parsing Verilog input from `/home/cae_sajib/Desktop/OpenFPGA/openfpga_flow/openfpga_yosys_techlib/k6_frac_N10_tileable_adder_chain_dpram8K_dsp36_fracff_40nm_cell_sim.v' to AST representation.
Generating RTLIL representation for module `\dpram_1024x8_core'.
Generating RTLIL representation for module `\dpram_1024x8'.
Generating RTLIL representation for module `\mult_36'.
Generating RTLIL representation for module `\dff'.
Generating RTLIL representation for module `\dffr'.
Generating RTLIL representation for module `\dffs'.
Generating RTLIL representation for module `\dffrn'.
Generating RTLIL representation for module `\dffsn'.
Successfully finished Verilog frontend.

7. Executing HIERARCHY pass (managing design hierarchy).

7.1. Analyzing design hierarchy..
Top module:  \i2c_master_top
Used module:     \i2c_master_byte_ctrl
Used module:         \i2c_master_bit_ctrl

7.2. Analyzing design hierarchy..
Top module:  \i2c_master_top
Used module:     \i2c_master_byte_ctrl
Used module:         \i2c_master_bit_ctrl
Removed 0 unused modules.

8. Executing PROC pass (convert processes to netlists).

8.1. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

8.2. Executing PROC_RMDEAD pass (remove dead branches from decision trees).
Marked 2 switch rules as full_case in process $proc$./benchmark/i2c_master_top.v:285$85 in module i2c_master_top.
Marked 2 switch rules as full_case in process $proc$./benchmark/i2c_master_top.v:261$75 in module i2c_master_top.
Marked 3 switch rules as full_case in process $proc$./benchmark/i2c_master_top.v:202$70 in module i2c_master_top.
Marked 2 switch rules as full_case in process $proc$./benchmark/i2c_master_top.v:178$68 in module i2c_master_top.
Marked 1 switch rules as full_case in process $proc$./benchmark/i2c_master_top.v:163$67 in module i2c_master_top.
Marked 2 switch rules as full_case in process $proc$./benchmark/i2c_master_bit_ctrl.v:335$57 in module i2c_master_bit_ctrl.
Marked 2 switch rules as full_case in process $proc$./benchmark/i2c_master_bit_ctrl.v:299$44 in module i2c_master_bit_ctrl.
Marked 2 switch rules as full_case in process $proc$./benchmark/i2c_master_bit_ctrl.v:291$41 in module i2c_master_bit_ctrl.
Marked 2 switch rules as full_case in process $proc$./benchmark/i2c_master_bit_ctrl.v:278$36 in module i2c_master_bit_ctrl.
Marked 2 switch rules as full_case in process $proc$./benchmark/i2c_master_bit_ctrl.v:260$28 in module i2c_master_bit_ctrl.
Marked 2 switch rules as full_case in process $proc$./benchmark/i2c_master_bit_ctrl.v:232$26 in module i2c_master_bit_ctrl.
Marked 4 switch rules as full_case in process $proc$./benchmark/i2c_master_bit_ctrl.v:196$18 in module i2c_master_bit_ctrl.
Marked 10 switch rules as full_case in process $proc$./benchmark/i2c_master_byte_ctrl.v:201$12 in module i2c_master_byte_ctrl.
Marked 3 switch rules as full_case in process $proc$./benchmark/i2c_master_byte_ctrl.v:184$7 in module i2c_master_byte_ctrl.
Marked 3 switch rules as full_case in process $proc$./benchmark/i2c_master_byte_ctrl.v:173$5 in module i2c_master_byte_ctrl.
Removed a total of 0 dead cases.

8.3. Executing PROC_PRUNE pass (remove redundant assignments in processes).
Removed 21 redundant assignments.
Promoted 2 assignments to connections.

8.4. Executing PROC_INIT pass (extract init attributes).

8.5. Executing PROC_ARST pass (detect async resets in processes).
Found async reset \rst_i in `\i2c_master_top.$proc$./benchmark/i2c_master_top.v:285$85'.
Found async reset \rst_i in `\i2c_master_top.$proc$./benchmark/i2c_master_top.v:261$75'.
Found async reset \rst_i in `\i2c_master_top.$proc$./benchmark/i2c_master_top.v:202$70'.
Found async reset \rst_i in `\i2c_master_top.$proc$./benchmark/i2c_master_top.v:178$68'.
Found async reset \nReset in `\i2c_master_bit_ctrl.$proc$./benchmark/i2c_master_bit_ctrl.v:335$57'.
Found async reset \nReset in `\i2c_master_bit_ctrl.$proc$./benchmark/i2c_master_bit_ctrl.v:299$44'.
Found async reset \nReset in `\i2c_master_bit_ctrl.$proc$./benchmark/i2c_master_bit_ctrl.v:291$41'.
Found async reset \nReset in `\i2c_master_bit_ctrl.$proc$./benchmark/i2c_master_bit_ctrl.v:278$36'.
Found async reset \nReset in `\i2c_master_bit_ctrl.$proc$./benchmark/i2c_master_bit_ctrl.v:260$28'.
Found async reset \nReset in `\i2c_master_bit_ctrl.$proc$./benchmark/i2c_master_bit_ctrl.v:232$26'.
Found async reset \nReset in `\i2c_master_bit_ctrl.$proc$./benchmark/i2c_master_bit_ctrl.v:196$18'.
Found async reset \nReset in `\i2c_master_byte_ctrl.$proc$./benchmark/i2c_master_byte_ctrl.v:201$12'.
Found async reset \nReset in `\i2c_master_byte_ctrl.$proc$./benchmark/i2c_master_byte_ctrl.v:184$7'.
Found async reset \nReset in `\i2c_master_byte_ctrl.$proc$./benchmark/i2c_master_byte_ctrl.v:173$5'.

8.6. Executing PROC_ROM pass (convert switches to ROMs).
Converted 0 switches.
<suppressed ~45 debug messages>

8.7. Executing PROC_MUX pass (convert decision trees to multiplexers).
Creating decoders for process `\i2c_master_top.$proc$./benchmark/i2c_master_top.v:285$85'.
     1/1: $0\wb_inta_o[0:0]
Creating decoders for process `\i2c_master_top.$proc$./benchmark/i2c_master_top.v:261$75'.
     1/4: $0\irq_flag[0:0]
     2/4: $0\tip[0:0]
     3/4: $0\rxack[0:0]
     4/4: $0\al[0:0]
Creating decoders for process `\i2c_master_top.$proc$./benchmark/i2c_master_top.v:202$70'.
     1/4: $0\cr[7:0] [7:4]
     2/4: $0\cr[7:0] [3]
     3/4: $0\cr[7:0] [2:1]
     4/4: $0\cr[7:0] [0]
Creating decoders for process `\i2c_master_top.$proc$./benchmark/i2c_master_top.v:178$68'.
     1/4: $0\prer[15:0] [15:8]
     2/4: $0\prer[15:0] [7:0]
     3/4: $0\ctr[7:0]
     4/4: $0\txr[7:0]
Creating decoders for process `\i2c_master_top.$proc$./benchmark/i2c_master_top.v:163$67'.
     1/1: $0\wb_dat_o[7:0]
Creating decoders for process `\i2c_master_top.$proc$./benchmark/i2c_master_top.v:159$63'.
Creating decoders for process `\i2c_master_bit_ctrl.$proc$./benchmark/i2c_master_bit_ctrl.v:335$57'.
     1/5: $0\cmd_ack[0:0]
     2/5: $0\sda_chk[0:0]
     3/5: $0\c_state[16:0]
     4/5: $0\sda_oen[0:0]
     5/5: $0\scl_oen[0:0]
Creating decoders for process `\i2c_master_bit_ctrl.$proc$./benchmark/i2c_master_bit_ctrl.v:309$54'.
     1/1: $0\dout[0:0]
Creating decoders for process `\i2c_master_bit_ctrl.$proc$./benchmark/i2c_master_bit_ctrl.v:299$44'.
     1/1: $0\al[0:0]
Creating decoders for process `\i2c_master_bit_ctrl.$proc$./benchmark/i2c_master_bit_ctrl.v:291$41'.
     1/1: $0\cmd_stop[0:0]
Creating decoders for process `\i2c_master_bit_ctrl.$proc$./benchmark/i2c_master_bit_ctrl.v:278$36'.
     1/1: $0\busy[0:0]
Creating decoders for process `\i2c_master_bit_ctrl.$proc$./benchmark/i2c_master_bit_ctrl.v:260$28'.
     1/2: $0\sto_condition[0:0]
     2/2: $0\sta_condition[0:0]
Creating decoders for process `\i2c_master_bit_ctrl.$proc$./benchmark/i2c_master_bit_ctrl.v:232$26'.
     1/4: $0\dSDA[0:0]
     2/4: $0\dSCL[0:0]
     3/4: $0\sSDA[0:0]
     4/4: $0\sSCL[0:0]
Creating decoders for process `\i2c_master_bit_ctrl.$proc$./benchmark/i2c_master_bit_ctrl.v:196$18'.
     1/2: $0\clk_en[0:0]
     2/2: $0\cnt[15:0]
Creating decoders for process `\i2c_master_bit_ctrl.$proc$./benchmark/i2c_master_bit_ctrl.v:189$15'.
Creating decoders for process `\i2c_master_byte_ctrl.$proc$./benchmark/i2c_master_byte_ctrl.v:201$12'.
     1/7: $0\cmd_ack[0:0]
     2/7: $0\ld[0:0]
     3/7: $0\shift[0:0]
     4/7: $0\core_txd[0:0]
     5/7: $0\c_state[4:0]
     6/7: $0\core_cmd[3:0]
     7/7: $0\ack_out[0:0]
Creating decoders for process `\i2c_master_byte_ctrl.$proc$./benchmark/i2c_master_byte_ctrl.v:184$7'.
     1/1: $0\dcnt[2:0]
Creating decoders for process `\i2c_master_byte_ctrl.$proc$./benchmark/i2c_master_byte_ctrl.v:173$5'.
     1/1: $0\sr[7:0]

8.8. Executing PROC_DLATCH pass (convert process syncs to latches).

8.9. Executing PROC_DFF pass (convert process syncs to FFs).
Creating register for signal `\i2c_master_top.\wb_inta_o' using process `\i2c_master_top.$proc$./benchmark/i2c_master_top.v:285$85'.
  created $adff cell `$procdff$537' with positive edge clock and positive level reset.
Creating register for signal `\i2c_master_top.\al' using process `\i2c_master_top.$proc$./benchmark/i2c_master_top.v:261$75'.
  created $adff cell `$procdff$542' with positive edge clock and positive level reset.
Creating register for signal `\i2c_master_top.\rxack' using process `\i2c_master_top.$proc$./benchmark/i2c_master_top.v:261$75'.
  created $adff cell `$procdff$547' with positive edge clock and positive level reset.
Creating register for signal `\i2c_master_top.\tip' using process `\i2c_master_top.$proc$./benchmark/i2c_master_top.v:261$75'.
  created $adff cell `$procdff$552' with positive edge clock and positive level reset.
Creating register for signal `\i2c_master_top.\irq_flag' using process `\i2c_master_top.$proc$./benchmark/i2c_master_top.v:261$75'.
  created $adff cell `$procdff$557' with positive edge clock and positive level reset.
Creating register for signal `\i2c_master_top.\cr' using process `\i2c_master_top.$proc$./benchmark/i2c_master_top.v:202$70'.
  created $adff cell `$procdff$562' with positive edge clock and positive level reset.
Creating register for signal `\i2c_master_top.\prer' using process `\i2c_master_top.$proc$./benchmark/i2c_master_top.v:178$68'.
  created $adff cell `$procdff$567' with positive edge clock and positive level reset.
Creating register for signal `\i2c_master_top.\ctr' using process `\i2c_master_top.$proc$./benchmark/i2c_master_top.v:178$68'.
  created $adff cell `$procdff$572' with positive edge clock and positive level reset.
Creating register for signal `\i2c_master_top.\txr' using process `\i2c_master_top.$proc$./benchmark/i2c_master_top.v:178$68'.
  created $adff cell `$procdff$577' with positive edge clock and positive level reset.
Creating register for signal `\i2c_master_top.\wb_dat_o' using process `\i2c_master_top.$proc$./benchmark/i2c_master_top.v:163$67'.
  created $dff cell `$procdff$578' with positive edge clock.
Creating register for signal `\i2c_master_top.\wb_ack_o' using process `\i2c_master_top.$proc$./benchmark/i2c_master_top.v:159$63'.
  created $dff cell `$procdff$579' with positive edge clock.
Creating register for signal `\i2c_master_bit_ctrl.\cmd_ack' using process `\i2c_master_bit_ctrl.$proc$./benchmark/i2c_master_bit_ctrl.v:335$57'.
  created $adff cell `$procdff$584' with positive edge clock and positive level reset.
Creating register for signal `\i2c_master_bit_ctrl.\scl_oen' using process `\i2c_master_bit_ctrl.$proc$./benchmark/i2c_master_bit_ctrl.v:335$57'.
  created $adff cell `$procdff$589' with positive edge clock and positive level reset.
Creating register for signal `\i2c_master_bit_ctrl.\sda_oen' using process `\i2c_master_bit_ctrl.$proc$./benchmark/i2c_master_bit_ctrl.v:335$57'.
  created $adff cell `$procdff$594' with positive edge clock and positive level reset.
Creating register for signal `\i2c_master_bit_ctrl.\c_state' using process `\i2c_master_bit_ctrl.$proc$./benchmark/i2c_master_bit_ctrl.v:335$57'.
  created $adff cell `$procdff$599' with positive edge clock and positive level reset.
Creating register for signal `\i2c_master_bit_ctrl.\sda_chk' using process `\i2c_master_bit_ctrl.$proc$./benchmark/i2c_master_bit_ctrl.v:335$57'.
  created $adff cell `$procdff$604' with positive edge clock and positive level reset.
Creating register for signal `\i2c_master_bit_ctrl.\dout' using process `\i2c_master_bit_ctrl.$proc$./benchmark/i2c_master_bit_ctrl.v:309$54'.
  created $dff cell `$procdff$605' with positive edge clock.
Creating register for signal `\i2c_master_bit_ctrl.\al' using process `\i2c_master_bit_ctrl.$proc$./benchmark/i2c_master_bit_ctrl.v:299$44'.
  created $adff cell `$procdff$610' with positive edge clock and positive level reset.
Creating register for signal `\i2c_master_bit_ctrl.\cmd_stop' using process `\i2c_master_bit_ctrl.$proc$./benchmark/i2c_master_bit_ctrl.v:291$41'.
  created $adff cell `$procdff$615' with positive edge clock and positive level reset.
Creating register for signal `\i2c_master_bit_ctrl.\busy' using process `\i2c_master_bit_ctrl.$proc$./benchmark/i2c_master_bit_ctrl.v:278$36'.
  created $adff cell `$procdff$620' with positive edge clock and positive level reset.
Creating register for signal `\i2c_master_bit_ctrl.\sta_condition' using process `\i2c_master_bit_ctrl.$proc$./benchmark/i2c_master_bit_ctrl.v:260$28'.
  created $adff cell `$procdff$625' with positive edge clock and positive level reset.
Creating register for signal `\i2c_master_bit_ctrl.\sto_condition' using process `\i2c_master_bit_ctrl.$proc$./benchmark/i2c_master_bit_ctrl.v:260$28'.
  created $adff cell `$procdff$630' with positive edge clock and positive level reset.
Creating register for signal `\i2c_master_bit_ctrl.\sSCL' using process `\i2c_master_bit_ctrl.$proc$./benchmark/i2c_master_bit_ctrl.v:232$26'.
  created $adff cell `$procdff$635' with positive edge clock and positive level reset.
Creating register for signal `\i2c_master_bit_ctrl.\sSDA' using process `\i2c_master_bit_ctrl.$proc$./benchmark/i2c_master_bit_ctrl.v:232$26'.
  created $adff cell `$procdff$640' with positive edge clock and positive level reset.
Creating register for signal `\i2c_master_bit_ctrl.\dSCL' using process `\i2c_master_bit_ctrl.$proc$./benchmark/i2c_master_bit_ctrl.v:232$26'.
  created $adff cell `$procdff$645' with positive edge clock and positive level reset.
Creating register for signal `\i2c_master_bit_ctrl.\dSDA' using process `\i2c_master_bit_ctrl.$proc$./benchmark/i2c_master_bit_ctrl.v:232$26'.
  created $adff cell `$procdff$650' with positive edge clock and positive level reset.
Creating register for signal `\i2c_master_bit_ctrl.\clk_en' using process `\i2c_master_bit_ctrl.$proc$./benchmark/i2c_master_bit_ctrl.v:196$18'.
  created $adff cell `$procdff$655' with positive edge clock and positive level reset.
Creating register for signal `\i2c_master_bit_ctrl.\cnt' using process `\i2c_master_bit_ctrl.$proc$./benchmark/i2c_master_bit_ctrl.v:196$18'.
  created $adff cell `$procdff$660' with positive edge clock and positive level reset.
Creating register for signal `\i2c_master_bit_ctrl.\dscl_oen' using process `\i2c_master_bit_ctrl.$proc$./benchmark/i2c_master_bit_ctrl.v:189$15'.
  created $dff cell `$procdff$661' with positive edge clock.
Creating register for signal `\i2c_master_byte_ctrl.\cmd_ack' using process `\i2c_master_byte_ctrl.$proc$./benchmark/i2c_master_byte_ctrl.v:201$12'.
  created $adff cell `$procdff$666' with positive edge clock and positive level reset.
Creating register for signal `\i2c_master_byte_ctrl.\ack_out' using process `\i2c_master_byte_ctrl.$proc$./benchmark/i2c_master_byte_ctrl.v:201$12'.
  created $adff cell `$procdff$671' with positive edge clock and positive level reset.
Creating register for signal `\i2c_master_byte_ctrl.\core_cmd' using process `\i2c_master_byte_ctrl.$proc$./benchmark/i2c_master_byte_ctrl.v:201$12'.
  created $adff cell `$procdff$676' with positive edge clock and positive level reset.
Creating register for signal `\i2c_master_byte_ctrl.\core_txd' using process `\i2c_master_byte_ctrl.$proc$./benchmark/i2c_master_byte_ctrl.v:201$12'.
  created $adff cell `$procdff$681' with positive edge clock and positive level reset.
Creating register for signal `\i2c_master_byte_ctrl.\shift' using process `\i2c_master_byte_ctrl.$proc$./benchmark/i2c_master_byte_ctrl.v:201$12'.
  created $adff cell `$procdff$686' with positive edge clock and positive level reset.
Creating register for signal `\i2c_master_byte_ctrl.\ld' using process `\i2c_master_byte_ctrl.$proc$./benchmark/i2c_master_byte_ctrl.v:201$12'.
  created $adff cell `$procdff$691' with positive edge clock and positive level reset.
Creating register for signal `\i2c_master_byte_ctrl.\c_state' using process `\i2c_master_byte_ctrl.$proc$./benchmark/i2c_master_byte_ctrl.v:201$12'.
  created $adff cell `$procdff$696' with positive edge clock and positive level reset.
Creating register for signal `\i2c_master_byte_ctrl.\dcnt' using process `\i2c_master_byte_ctrl.$proc$./benchmark/i2c_master_byte_ctrl.v:184$7'.
  created $adff cell `$procdff$701' with positive edge clock and positive level reset.
Creating register for signal `\i2c_master_byte_ctrl.\sr' using process `\i2c_master_byte_ctrl.$proc$./benchmark/i2c_master_byte_ctrl.v:173$5'.
  created $adff cell `$procdff$706' with positive edge clock and positive level reset.

8.10. Executing PROC_MEMWR pass (convert process memory writes to cells).

8.11. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Found and cleaned up 1 empty switch in `\i2c_master_top.$proc$./benchmark/i2c_master_top.v:285$85'.
Removing empty process `i2c_master_top.$proc$./benchmark/i2c_master_top.v:285$85'.
Found and cleaned up 1 empty switch in `\i2c_master_top.$proc$./benchmark/i2c_master_top.v:261$75'.
Removing empty process `i2c_master_top.$proc$./benchmark/i2c_master_top.v:261$75'.
Found and cleaned up 4 empty switches in `\i2c_master_top.$proc$./benchmark/i2c_master_top.v:202$70'.
Removing empty process `i2c_master_top.$proc$./benchmark/i2c_master_top.v:202$70'.
Found and cleaned up 3 empty switches in `\i2c_master_top.$proc$./benchmark/i2c_master_top.v:178$68'.
Removing empty process `i2c_master_top.$proc$./benchmark/i2c_master_top.v:178$68'.
Found and cleaned up 1 empty switch in `\i2c_master_top.$proc$./benchmark/i2c_master_top.v:163$67'.
Removing empty process `i2c_master_top.$proc$./benchmark/i2c_master_top.v:163$67'.
Removing empty process `i2c_master_top.$proc$./benchmark/i2c_master_top.v:159$63'.
Found and cleaned up 4 empty switches in `\i2c_master_bit_ctrl.$proc$./benchmark/i2c_master_bit_ctrl.v:335$57'.
Removing empty process `i2c_master_bit_ctrl.$proc$./benchmark/i2c_master_bit_ctrl.v:335$57'.
Found and cleaned up 1 empty switch in `\i2c_master_bit_ctrl.$proc$./benchmark/i2c_master_bit_ctrl.v:309$54'.
Removing empty process `i2c_master_bit_ctrl.$proc$./benchmark/i2c_master_bit_ctrl.v:309$54'.
Found and cleaned up 1 empty switch in `\i2c_master_bit_ctrl.$proc$./benchmark/i2c_master_bit_ctrl.v:299$44'.
Removing empty process `i2c_master_bit_ctrl.$proc$./benchmark/i2c_master_bit_ctrl.v:299$44'.
Found and cleaned up 2 empty switches in `\i2c_master_bit_ctrl.$proc$./benchmark/i2c_master_bit_ctrl.v:291$41'.
Removing empty process `i2c_master_bit_ctrl.$proc$./benchmark/i2c_master_bit_ctrl.v:291$41'.
Found and cleaned up 1 empty switch in `\i2c_master_bit_ctrl.$proc$./benchmark/i2c_master_bit_ctrl.v:278$36'.
Removing empty process `i2c_master_bit_ctrl.$proc$./benchmark/i2c_master_bit_ctrl.v:278$36'.
Found and cleaned up 1 empty switch in `\i2c_master_bit_ctrl.$proc$./benchmark/i2c_master_bit_ctrl.v:260$28'.
Removing empty process `i2c_master_bit_ctrl.$proc$./benchmark/i2c_master_bit_ctrl.v:260$28'.
Found and cleaned up 1 empty switch in `\i2c_master_bit_ctrl.$proc$./benchmark/i2c_master_bit_ctrl.v:232$26'.
Removing empty process `i2c_master_bit_ctrl.$proc$./benchmark/i2c_master_bit_ctrl.v:232$26'.
Found and cleaned up 3 empty switches in `\i2c_master_bit_ctrl.$proc$./benchmark/i2c_master_bit_ctrl.v:196$18'.
Removing empty process `i2c_master_bit_ctrl.$proc$./benchmark/i2c_master_bit_ctrl.v:196$18'.
Removing empty process `i2c_master_bit_ctrl.$proc$./benchmark/i2c_master_bit_ctrl.v:189$15'.
Found and cleaned up 15 empty switches in `\i2c_master_byte_ctrl.$proc$./benchmark/i2c_master_byte_ctrl.v:201$12'.
Removing empty process `i2c_master_byte_ctrl.$proc$./benchmark/i2c_master_byte_ctrl.v:201$12'.
Found and cleaned up 3 empty switches in `\i2c_master_byte_ctrl.$proc$./benchmark/i2c_master_byte_ctrl.v:184$7'.
Removing empty process `i2c_master_byte_ctrl.$proc$./benchmark/i2c_master_byte_ctrl.v:184$7'.
Found and cleaned up 3 empty switches in `\i2c_master_byte_ctrl.$proc$./benchmark/i2c_master_byte_ctrl.v:173$5'.
Removing empty process `i2c_master_byte_ctrl.$proc$./benchmark/i2c_master_byte_ctrl.v:173$5'.
Cleaned up 45 empty switches.

8.12. Executing OPT_EXPR pass (perform const folding).
Optimizing module i2c_master_top.
<suppressed ~21 debug messages>
Optimizing module i2c_master_bit_ctrl.
<suppressed ~36 debug messages>
Optimizing module i2c_master_byte_ctrl.
<suppressed ~26 debug messages>

9. Executing FLATTEN pass (flatten design).
Deleting now unused module i2c_master_bit_ctrl.
Deleting now unused module i2c_master_byte_ctrl.
<suppressed ~2 debug messages>

10. Executing TRIBUF pass.

11. Executing OPT_EXPR pass (perform const folding).
Optimizing module i2c_master_top.

12. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \i2c_master_top..
Removed 50 unused cells and 234 unused wires.
<suppressed ~52 debug messages>

13. Executing DEMINOUT pass (demote inout ports to input or output).

14. Executing OPT pass (performing simple optimizations).

14.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module i2c_master_top.

14.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\i2c_master_top'.
<suppressed ~243 debug messages>
Removed a total of 81 cells.

14.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \i2c_master_top..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~40 debug messages>

14.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \i2c_master_top.
    New ctrl vector for $pmux cell $flatten\byte_controller.\bit_controller.$procmux$196: $auto$opt_reduce.cc:137:opt_pmux$710
    New ctrl vector for $pmux cell $flatten\byte_controller.\bit_controller.$procmux$207: { $auto$opt_reduce.cc:137:opt_pmux$714 $auto$opt_reduce.cc:137:opt_pmux$712 }
    New ctrl vector for $pmux cell $flatten\byte_controller.\bit_controller.$procmux$232: { $flatten\byte_controller.\bit_controller.$procmux$225_CMP $flatten\byte_controller.\bit_controller.$procmux$224_CMP $flatten\byte_controller.\bit_controller.$procmux$223_CMP $flatten\byte_controller.\bit_controller.$procmux$222_CMP $flatten\byte_controller.\bit_controller.$procmux$221_CMP $flatten\byte_controller.\bit_controller.$procmux$219_CMP $flatten\byte_controller.\bit_controller.$procmux$218_CMP $flatten\byte_controller.\bit_controller.$procmux$217_CMP $flatten\byte_controller.\bit_controller.$procmux$215_CMP $flatten\byte_controller.\bit_controller.$procmux$214_CMP $flatten\byte_controller.\bit_controller.$procmux$213_CMP $flatten\byte_controller.\bit_controller.$procmux$211_CMP $flatten\byte_controller.\bit_controller.$procmux$210_CMP $flatten\byte_controller.\bit_controller.$procmux$209_CMP $auto$opt_reduce.cc:137:opt_pmux$716 }
    New ctrl vector for $pmux cell $flatten\byte_controller.\bit_controller.$procmux$263: { $auto$opt_reduce.cc:137:opt_pmux$722 $auto$opt_reduce.cc:137:opt_pmux$720 $auto$opt_reduce.cc:137:opt_pmux$718 }
    New ctrl vector for $pmux cell $flatten\byte_controller.\bit_controller.$procmux$287: { $auto$opt_reduce.cc:137:opt_pmux$726 $auto$opt_reduce.cc:137:opt_pmux$724 }
  Optimizing cells in module \i2c_master_top.
Performed a total of 5 changes.

14.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\i2c_master_top'.
<suppressed ~9 debug messages>
Removed a total of 3 cells.

14.6. Executing OPT_DFF pass (perform DFF optimizations).

14.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \i2c_master_top..
Removed 0 unused cells and 84 unused wires.
<suppressed ~1 debug messages>

14.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module i2c_master_top.

14.9. Rerunning OPT passes. (Maybe there is more to do..)

14.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \i2c_master_top..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~41 debug messages>

14.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \i2c_master_top.
Performed a total of 0 changes.

14.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\i2c_master_top'.
Removed a total of 0 cells.

14.13. Executing OPT_DFF pass (perform DFF optimizations).

14.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \i2c_master_top..

14.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module i2c_master_top.

14.16. Finished OPT passes. (There is nothing left to do.)

15. Executing OPT_EXPR pass (perform const folding).
Optimizing module i2c_master_top.

16. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \i2c_master_top..

17. Executing CHECK pass (checking for obvious problems).
Checking module i2c_master_top...
Found and reported 0 problems.

18. Executing OPT pass (performing simple optimizations).

18.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module i2c_master_top.

18.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\i2c_master_top'.
Removed a total of 0 cells.

18.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \i2c_master_top..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~41 debug messages>

18.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \i2c_master_top.
Performed a total of 0 changes.

18.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\i2c_master_top'.
Removed a total of 0 cells.

18.6. Executing OPT_DFF pass (perform DFF optimizations).

18.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \i2c_master_top..

18.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module i2c_master_top.

18.9. Finished OPT passes. (There is nothing left to do.)

19. Executing WREDUCE pass (reducing word size of cells).
Removed top 2 bits (of 3) from port B of cell i2c_master_top.$procmux$155_CMP0 ($eq).
Removed top 1 bits (of 3) from port B of cell i2c_master_top.$procmux$173_CMP0 ($eq).
Removed top 1 bits (of 3) from port B of cell i2c_master_top.$procmux$180_CMP0 ($eq).
Removed top 15 bits (of 16) from port B of cell i2c_master_top.$flatten\byte_controller.\bit_controller.$sub$./benchmark/i2c_master_bit_ctrl.v:220$25 ($sub).
Removed top 2 bits (of 4) from port B of cell i2c_master_top.$flatten\byte_controller.\bit_controller.$eq$./benchmark/i2c_master_bit_ctrl.v:297$43 ($eq).
Removed top 4 bits (of 17) from port B of cell i2c_master_top.$flatten\byte_controller.\bit_controller.$procmux$198_CMP0 ($eq).
Removed top 8 bits (of 17) from port B of cell i2c_master_top.$flatten\byte_controller.\bit_controller.$procmux$199_CMP0 ($eq).
Removed top 12 bits (of 17) from port B of cell i2c_master_top.$flatten\byte_controller.\bit_controller.$procmux$200_CMP0 ($eq).
Removed top 1 bits (of 17) from port B of cell i2c_master_top.$flatten\byte_controller.\bit_controller.$procmux$209_CMP0 ($eq).
Removed top 2 bits (of 17) from port B of cell i2c_master_top.$flatten\byte_controller.\bit_controller.$procmux$210_CMP0 ($eq).
Removed top 3 bits (of 17) from port B of cell i2c_master_top.$flatten\byte_controller.\bit_controller.$procmux$211_CMP0 ($eq).
Removed top 5 bits (of 17) from port B of cell i2c_master_top.$flatten\byte_controller.\bit_controller.$procmux$213_CMP0 ($eq).
Removed top 6 bits (of 17) from port B of cell i2c_master_top.$flatten\byte_controller.\bit_controller.$procmux$214_CMP0 ($eq).
Removed top 7 bits (of 17) from port B of cell i2c_master_top.$flatten\byte_controller.\bit_controller.$procmux$215_CMP0 ($eq).
Removed top 9 bits (of 17) from port B of cell i2c_master_top.$flatten\byte_controller.\bit_controller.$procmux$217_CMP0 ($eq).
Removed top 10 bits (of 17) from port B of cell i2c_master_top.$flatten\byte_controller.\bit_controller.$procmux$218_CMP0 ($eq).
Removed top 11 bits (of 17) from port B of cell i2c_master_top.$flatten\byte_controller.\bit_controller.$procmux$219_CMP0 ($eq).
Removed top 13 bits (of 17) from port B of cell i2c_master_top.$flatten\byte_controller.\bit_controller.$procmux$221_CMP0 ($eq).
Removed top 14 bits (of 17) from port B of cell i2c_master_top.$flatten\byte_controller.\bit_controller.$procmux$222_CMP0 ($eq).
Removed top 15 bits (of 17) from port B of cell i2c_master_top.$flatten\byte_controller.\bit_controller.$procmux$223_CMP0 ($eq).
Removed top 16 bits (of 17) from port B of cell i2c_master_top.$flatten\byte_controller.\bit_controller.$procmux$224_CMP0 ($eq).
Removed top 3 bits (of 17) from mux cell i2c_master_top.$flatten\byte_controller.\bit_controller.$procmux$251 ($pmux).
Removed top 1 bits (of 4) from port B of cell i2c_master_top.$flatten\byte_controller.\bit_controller.$procmux$253_CMP0 ($eq).
Removed top 3 bits (of 4) from port B of cell i2c_master_top.$flatten\byte_controller.\bit_controller.$procmux$255_CMP0 ($eq).
Removed top 1 bits (of 4) from mux cell i2c_master_top.$flatten\byte_controller.$procmux$493 ($mux).
Removed top 2 bits (of 4) from mux cell i2c_master_top.$flatten\byte_controller.$procmux$469 ($mux).
Removed top 2 bits (of 5) from mux cell i2c_master_top.$flatten\byte_controller.$procmux$442 ($mux).
Removed top 1 bits (of 5) from mux cell i2c_master_top.$flatten\byte_controller.$procmux$436 ($mux).
Removed top 1 bits (of 5) from mux cell i2c_master_top.$flatten\byte_controller.$procmux$430 ($mux).
Removed top 2 bits (of 5) from port B of cell i2c_master_top.$flatten\byte_controller.$procmux$400_CMP0 ($eq).
Removed top 3 bits (of 5) from port B of cell i2c_master_top.$flatten\byte_controller.$procmux$394_CMP0 ($eq).
Removed top 4 bits (of 5) from port B of cell i2c_master_top.$flatten\byte_controller.$procmux$381_CMP0 ($eq).
Removed top 1 bits (of 5) from port B of cell i2c_master_top.$flatten\byte_controller.$procmux$369_CMP0 ($eq).
Removed top 2 bits (of 3) from port B of cell i2c_master_top.$flatten\byte_controller.$sub$./benchmark/i2c_master_byte_ctrl.v:192$9 ($sub).
Removed top 1 bits (of 5) from wire i2c_master_top.$flatten\byte_controller.$procmux$430_Y.
Removed top 1 bits (of 5) from wire i2c_master_top.$flatten\byte_controller.$procmux$436_Y.
Removed top 2 bits (of 5) from wire i2c_master_top.$flatten\byte_controller.$procmux$442_Y.
Removed top 2 bits (of 4) from wire i2c_master_top.$flatten\byte_controller.$procmux$469_Y.
Removed top 1 bits (of 4) from wire i2c_master_top.$flatten\byte_controller.$procmux$493_Y.
Removed top 3 bits (of 17) from wire i2c_master_top.$flatten\byte_controller.\bit_controller.$procmux$251_Y.

20. Executing PEEPOPT pass (run peephole optimizers).

21. Executing PMUXTREE pass.

22. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \i2c_master_top..
Removed 22 unused cells and 40 unused wires.
<suppressed ~23 debug messages>

23. Executing MEMORY_DFF pass (merging $dff cells to $memrd).

24. Executing WREDUCE pass (reducing word size of cells).

25. Executing TECHMAP pass (map to technology primitives).

25.1. Executing Verilog-2005 frontend: /home/cae_sajib/Desktop/OpenFPGA/build/yosys/bin/../share/yosys/mul2dsp.v
Parsing Verilog input from `/home/cae_sajib/Desktop/OpenFPGA/build/yosys/bin/../share/yosys/mul2dsp.v' to AST representation.
Generating RTLIL representation for module `\_80_mul'.
Generating RTLIL representation for module `\_90_soft_mul'.
Successfully finished Verilog frontend.

25.2. Executing Verilog-2005 frontend: /home/cae_sajib/Desktop/OpenFPGA/openfpga_flow/openfpga_yosys_techlib/k6_frac_N10_tileable_adder_chain_dpram8K_dsp36_40nm_dsp_map.v
Parsing Verilog input from `/home/cae_sajib/Desktop/OpenFPGA/openfpga_flow/openfpga_yosys_techlib/k6_frac_N10_tileable_adder_chain_dpram8K_dsp36_40nm_dsp_map.v' to AST representation.
Generating RTLIL representation for module `\mult_36x36'.
Successfully finished Verilog frontend.

25.3. Continuing TECHMAP pass.
No more expansions possible.
<suppressed ~5 debug messages>

26. Executing OPT_EXPR pass (perform const folding).

27. Executing WREDUCE pass (reducing word size of cells).
Warning: Selection "Extract" did not match any module.
Warning: Selection "arithmetic" did not match any module.
Warning: Selection "functions" did not match any module.

28. Executing TECHMAP pass (map to technology primitives).

28.1. Executing Verilog-2005 frontend: /home/cae_sajib/Desktop/OpenFPGA/build/yosys/bin/../share/yosys/techmap.v
Parsing Verilog input from `/home/cae_sajib/Desktop/OpenFPGA/build/yosys/bin/../share/yosys/techmap.v' to AST representation.
Generating RTLIL representation for module `\_90_simplemap_bool_ops'.
Generating RTLIL representation for module `\_90_simplemap_reduce_ops'.
Generating RTLIL representation for module `\_90_simplemap_logic_ops'.
Generating RTLIL representation for module `\_90_simplemap_compare_ops'.
Generating RTLIL representation for module `\_90_simplemap_various'.
Generating RTLIL representation for module `\_90_simplemap_registers'.
Generating RTLIL representation for module `\_90_shift_ops_shr_shl_sshl_sshr'.
Generating RTLIL representation for module `\_90_shift_shiftx'.
Generating RTLIL representation for module `\_90_fa'.
Generating RTLIL representation for module `\_90_lcu_brent_kung'.
Generating RTLIL representation for module `\_90_alu'.
Generating RTLIL representation for module `\_90_macc'.
Generating RTLIL representation for module `\_90_alumacc'.
Generating RTLIL representation for module `\$__div_mod_u'.
Generating RTLIL representation for module `\$__div_mod_trunc'.
Generating RTLIL representation for module `\_90_div'.
Generating RTLIL representation for module `\_90_mod'.
Generating RTLIL representation for module `\$__div_mod_floor'.
Generating RTLIL representation for module `\_90_divfloor'.
Generating RTLIL representation for module `\_90_modfloor'.
Generating RTLIL representation for module `\_90_pow'.
Generating RTLIL representation for module `\_90_pmux'.
Generating RTLIL representation for module `\_90_demux'.
Generating RTLIL representation for module `\_90_lut'.
Successfully finished Verilog frontend.

28.2. Continuing TECHMAP pass.
Using extmapper simplemap for cells of type $and.
Using extmapper simplemap for cells of type $mux.
Using extmapper simplemap for cells of type $not.
Using extmapper simplemap for cells of type $eq.
Using extmapper simplemap for cells of type $or.
Using extmapper simplemap for cells of type $reduce_or.
Using extmapper simplemap for cells of type $logic_and.
Using extmapper simplemap for cells of type $logic_not.
Using extmapper simplemap for cells of type $adff.
Using extmapper simplemap for cells of type $dff.
Using extmapper simplemap for cells of type $logic_or.
Running "alumacc" on wrapper $extern:wrap:$sub:A_SIGNED=0:A_WIDTH=16:B_SIGNED=0:B_WIDTH=1:Y_WIDTH=16:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$sub:A_SIGNED=0:A_WIDTH=16:B_SIGNED=0:B_WIDTH=1:Y_WIDTH=16:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$sub:A_SIGNED=0:A_WIDTH=16:B_SIGNED=0:B_WIDTH=1:Y_WIDTH=16:394426c56d1a028ba8fdd5469b163e04011def47.
Running "alumacc" on wrapper $extern:wrap:$sub:A_SIGNED=0:A_WIDTH=3:B_SIGNED=0:B_WIDTH=1:Y_WIDTH=3:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$sub:A_SIGNED=0:A_WIDTH=3:B_SIGNED=0:B_WIDTH=1:Y_WIDTH=3:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$sub:A_SIGNED=0:A_WIDTH=3:B_SIGNED=0:B_WIDTH=1:Y_WIDTH=3:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $paramod$a1665ef28c749ebcdbe9aecd466e644647b56463\_90_alu for cells of type $alu.
Using template $paramod$b8c0a997bce700f23568a5ada79cc6781d1f5ca0\_90_alu for cells of type $alu.
Using extmapper simplemap for cells of type $xor.
Using template $paramod\_90_lcu_brent_kung\WIDTH=32'00000000000000000000000000010000 for cells of type $lcu.
Using extmapper simplemap for cells of type $pos.
Using template $paramod\_90_lcu_brent_kung\WIDTH=32'00000000000000000000000000000011 for cells of type $lcu.
No more expansions possible.
<suppressed ~764 debug messages>

29. Executing ALUMACC pass (create $alu and $macc cells).
Extracting $alu and $macc cells in module i2c_master_top:
  created 0 $alu and 0 $macc cells.

30. Executing SHARE pass (SAT-based resource sharing).

31. Executing OPT pass (performing simple optimizations).

31.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module i2c_master_top.
<suppressed ~957 debug messages>

31.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\i2c_master_top'.
<suppressed ~849 debug messages>
Removed a total of 283 cells.

31.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \i2c_master_top..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

31.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \i2c_master_top.
Performed a total of 0 changes.

31.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\i2c_master_top'.
Removed a total of 0 cells.

31.6. Executing OPT_DFF pass (perform DFF optimizations).

31.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \i2c_master_top..
Removed 16 unused cells and 232 unused wires.
<suppressed ~17 debug messages>

31.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module i2c_master_top.
<suppressed ~10 debug messages>

31.9. Rerunning OPT passes. (Maybe there is more to do..)

31.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \i2c_master_top..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

31.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \i2c_master_top.
Performed a total of 0 changes.

31.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\i2c_master_top'.
Removed a total of 0 cells.

31.13. Executing OPT_DFF pass (perform DFF optimizations).

31.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \i2c_master_top..

31.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module i2c_master_top.

31.16. Finished OPT passes. (There is nothing left to do.)

32. Executing FSM pass (extract and optimize FSM).

32.1. Executing FSM_DETECT pass (finding FSMs in design).

32.2. Executing FSM_EXTRACT pass (extracting FSM from design).

32.3. Executing FSM_OPT pass (simple optimizations of FSMs).

32.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \i2c_master_top..

32.5. Executing FSM_OPT pass (simple optimizations of FSMs).

32.6. Executing FSM_RECODE pass (re-assigning FSM state encoding).

32.7. Executing FSM_INFO pass (dumping all available information on FSM cells).

32.8. Executing FSM_MAP pass (mapping FSMs to basic logic).

33. Executing OPT pass (performing simple optimizations).

33.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module i2c_master_top.

33.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\i2c_master_top'.
Removed a total of 0 cells.

33.3. Executing OPT_DFF pass (perform DFF optimizations).

33.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \i2c_master_top..

33.5. Finished fast OPT passes.

34. Executing MEMORY pass.

34.1. Executing OPT_MEM pass (optimize memories).
Performed a total of 0 transformations.

34.2. Executing OPT_MEM_PRIORITY pass (removing unnecessary memory write priority relations).
Performed a total of 0 transformations.

34.3. Executing OPT_MEM_FEEDBACK pass (finding memory read-to-write feedback paths).

34.4. Executing MEMORY_BMUX2ROM pass (converting muxes to ROMs).

34.5. Executing MEMORY_DFF pass (merging $dff cells to $memrd).

34.6. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \i2c_master_top..

34.7. Executing MEMORY_SHARE pass (consolidating $memrd/$memwr cells).

34.8. Executing OPT_MEM_WIDEN pass (optimize memories where all ports are wide).
Performed a total of 0 transformations.

34.9. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \i2c_master_top..

34.10. Executing MEMORY_COLLECT pass (generating $mem cells).

35. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \i2c_master_top..

36. Executing MEMORY_BRAM pass (mapping $mem cells to block memories).

37. Executing TECHMAP pass (map to technology primitives).

37.1. Executing Verilog-2005 frontend: /home/cae_sajib/Desktop/OpenFPGA/openfpga_flow/openfpga_yosys_techlib/k6_frac_N10_tileable_adder_chain_dpram8K_dsp36_40nm_bram_map.v
Parsing Verilog input from `/home/cae_sajib/Desktop/OpenFPGA/openfpga_flow/openfpga_yosys_techlib/k6_frac_N10_tileable_adder_chain_dpram8K_dsp36_40nm_bram_map.v' to AST representation.
Generating RTLIL representation for module `\$__MY_DPRAM_1024x8'.
Successfully finished Verilog frontend.

37.2. Continuing TECHMAP pass.
No more expansions possible.
<suppressed ~3 debug messages>

38. Executing OPT pass (performing simple optimizations).

38.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module i2c_master_top.

38.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\i2c_master_top'.
Removed a total of 0 cells.

38.3. Executing OPT_DFF pass (perform DFF optimizations).

38.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \i2c_master_top..

38.5. Finished fast OPT passes.

39. Executing MEMORY_MAP pass (converting memories to logic and flip-flops).

40. Executing OPT pass (performing simple optimizations).

40.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module i2c_master_top.

40.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\i2c_master_top'.
Removed a total of 0 cells.

40.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \i2c_master_top..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

40.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \i2c_master_top.
Performed a total of 0 changes.

40.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\i2c_master_top'.
Removed a total of 0 cells.

40.6. Executing OPT_DFF pass (perform DFF optimizations).

40.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \i2c_master_top..

40.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module i2c_master_top.

40.9. Finished OPT passes. (There is nothing left to do.)

41. Executing TECHMAP pass (map to technology primitives).

41.1. Executing Verilog-2005 frontend: /home/cae_sajib/Desktop/OpenFPGA/openfpga_flow/openfpga_yosys_techlib/k6_frac_N10_tileable_adder_chain_dpram8K_dsp36_fracff_40nm_dff_map.v
Parsing Verilog input from `/home/cae_sajib/Desktop/OpenFPGA/openfpga_flow/openfpga_yosys_techlib/k6_frac_N10_tileable_adder_chain_dpram8K_dsp36_fracff_40nm_dff_map.v' to AST representation.
Generating RTLIL representation for module `\$_DFF_P_'.
Generating RTLIL representation for module `\$_DFF_PP0_'.
Generating RTLIL representation for module `\$_DFF_PP1_'.
Generating RTLIL representation for module `\$_DFF_PN0_'.
Generating RTLIL representation for module `\$_DFF_PN1_'.
Successfully finished Verilog frontend.

41.2. Continuing TECHMAP pass.
Using template $paramod\$_DFF_PN0_\_TECHMAP_WIREINIT_Q_=1'x for cells of type $_DFF_PN0_.
Using template $paramod\$_DFF_PN1_\_TECHMAP_WIREINIT_Q_=1'x for cells of type $_DFF_PN1_.
Using template $paramod\$_DFF_P_\_TECHMAP_WIREINIT_Q_=1'x for cells of type $_DFF_P_.
No more expansions possible.
<suppressed ~168 debug messages>

42. Executing OPT_EXPR pass (perform const folding).
Optimizing module i2c_master_top.

43. Executing SIMPLEMAP pass (map simple cells to gate primitives).

44. Executing OPT_EXPR pass (perform const folding).
Optimizing module i2c_master_top.

45. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\i2c_master_top'.
Removed a total of 0 cells.

46. Executing OPT_DFF pass (perform DFF optimizations).

47. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \i2c_master_top..
Removed 0 unused cells and 501 unused wires.
<suppressed ~1 debug messages>

48. Executing OPT pass (performing simple optimizations).

48.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module i2c_master_top.

48.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\i2c_master_top'.
Removed a total of 0 cells.

48.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \i2c_master_top..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

48.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \i2c_master_top.
Performed a total of 0 changes.

48.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\i2c_master_top'.
Removed a total of 0 cells.

48.6. Executing OPT_DFF pass (perform DFF optimizations).

48.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \i2c_master_top..

48.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module i2c_master_top.

48.9. Finished OPT passes. (There is nothing left to do.)

49. Executing ABC pass (technology mapping using ABC).

49.1. Extracting gate netlist of module `\i2c_master_top' to `<abc-temp-dir>/input.blif'..
Extracted 936 gates and 1074 wires to a netlist network with 136 inputs and 127 outputs.

49.1.1. Executing ABC.
Running ABC command: "<yosys-exe-dir>/yosys-abc" -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_lut <abc-temp-dir>/lutdefs.txt 
ABC: + strash 
ABC: + &get -n 
ABC: + &fraig -x 
ABC: + &put 
ABC: + scorr 
ABC: Warning: The network is combinational (run "fraig" or "fraig_sweep").
ABC: + dc2 
ABC: + dretime 
ABC: + strash 
ABC: + dch -f 
ABC: + if 
ABC: + mfs2 
ABC: + lutpack -S 1 
ABC: + write_blif <abc-temp-dir>/output.blif 

49.1.2. Re-integrating ABC results.
ABC RESULTS:              $lut cells:      259
ABC RESULTS:        internal signals:      811
ABC RESULTS:           input signals:      136
ABC RESULTS:          output signals:      127
Removing temp directory.

50. Executing HIERARCHY pass (managing design hierarchy).
Attribute `top' found on module `i2c_master_top'. Setting top module to i2c_master_top.

50.1. Analyzing design hierarchy..
Top module:  \i2c_master_top

50.2. Analyzing design hierarchy..
Top module:  \i2c_master_top
Removed 0 unused modules.

51. Printing statistics.

=== i2c_master_top ===

   Number of wires:                936
   Number of wire bits:           2037
   Number of public wires:         103
   Number of public wire bits:     263
   Number of ports:                 17
   Number of port bits:             33
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                389
     $lut                          259
     $scopeinfo                      2
     dff                            11
     dffrn                          94
     dffsn                          23

52. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \i2c_master_top..
Removed 2 unused cells and 662 unused wires.
<suppressed ~48 debug messages>

53. Executing BLIF backend.

Warnings: 6 unique messages, 6 total
End of script. Logfile hash: 7725743c96, CPU: user 0.94s system 0.05s, MEM: 25.86 MB peak
Yosys 0.54+29 (git sha1 7b0c1fe49, g++ 11.4.0-1ubuntu1~22.04 -fPIC -O3)
Time spent: 28% 1x abc (0 sec), 22% 24x opt_expr (0 sec), ...
0