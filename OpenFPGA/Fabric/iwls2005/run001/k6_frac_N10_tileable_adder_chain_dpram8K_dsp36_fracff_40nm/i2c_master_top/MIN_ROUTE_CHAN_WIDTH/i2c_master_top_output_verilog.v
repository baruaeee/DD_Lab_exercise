/* Generated by Yosys 0.45+148 (git sha1 1bf908dea, g++ 11.4.0-1ubuntu1~22.04 -fPIC -O3) */

module i2c_master_top(wb_clk_i, wb_rst_i, arst_i, \wb_adr_i[0] , \wb_adr_i[1] , \wb_adr_i[2] , \wb_dat_i[0] , \wb_dat_i[1] , \wb_dat_i[2] , \wb_dat_i[3] , \wb_dat_i[4] , \wb_dat_i[5] , \wb_dat_i[6] , \wb_dat_i[7] , wb_we_i, wb_stb_i, wb_cyc_i, scl_pad_i, sda_pad_i, \wb_dat_o[0] , \wb_dat_o[1] 
, \wb_dat_o[2] , \wb_dat_o[3] , \wb_dat_o[4] , \wb_dat_o[5] , \wb_dat_o[6] , \wb_dat_o[7] , wb_ack_o, wb_inta_o, scl_pad_o, scl_padoen_o, sda_pad_o, sda_padoen_o);
  wire _000_;
  wire _001_;
  wire _002_;
  wire _003_;
  wire _004_;
  wire _005_;
  wire _006_;
  wire _007_;
  wire _008_;
  wire _009_;
  wire _010_;
  wire _011_;
  wire _012_;
  wire _013_;
  wire _014_;
  wire _015_;
  wire _016_;
  wire _017_;
  wire _018_;
  wire _019_;
  wire _020_;
  wire _021_;
  wire _022_;
  wire _023_;
  wire _024_;
  wire _025_;
  wire _026_;
  wire _027_;
  wire _028_;
  wire _029_;
  wire _030_;
  wire _031_;
  wire _032_;
  wire _033_;
  wire _034_;
  wire _035_;
  wire _036_;
  wire _037_;
  wire _038_;
  wire _039_;
  wire _040_;
  wire _041_;
  wire _042_;
  wire _043_;
  wire _044_;
  wire _045_;
  wire _046_;
  wire _047_;
  wire _048_;
  wire _049_;
  wire _050_;
  wire _051_;
  wire _052_;
  wire _053_;
  wire _054_;
  wire _055_;
  wire _056_;
  wire _057_;
  wire _058_;
  wire _059_;
  wire _060_;
  wire _061_;
  wire _062_;
  wire _063_;
  wire _064_;
  wire _065_;
  wire _066_;
  wire _067_;
  wire _068_;
  wire _069_;
  wire _070_;
  wire _071_;
  wire _072_;
  wire _073_;
  wire _074_;
  wire _075_;
  wire _076_;
  wire _077_;
  wire _078_;
  wire _079_;
  wire _080_;
  wire _081_;
  wire _082_;
  wire _083_;
  wire _084_;
  wire _085_;
  wire _086_;
  wire _087_;
  wire _088_;
  wire _089_;
  wire _090_;
  wire _091_;
  wire _092_;
  wire _093_;
  wire _094_;
  wire _095_;
  wire _096_;
  wire _097_;
  wire _098_;
  wire _099_;
  wire _100_;
  wire _101_;
  wire _102_;
  wire _103_;
  wire _104_;
  wire _105_;
  wire _106_;
  wire _107_;
  wire _108_;
  wire _109_;
  wire _110_;
  wire _111_;
  wire _112_;
  wire _113_;
  wire _114_;
  wire _115_;
  wire _116_;
  wire _117_;
  wire _118_;
  wire _119_;
  wire _120_;
  wire _121_;
  wire _122_;
  wire _123_;
  wire _124_;
  wire _125_;
  wire _126_;
  wire _127_;
  wire _128_;
  wire _129_;
  wire _130_;
  wire _131_;
  wire _132_;
  wire _133_;
  wire _134_;
  wire _135_;
  wire _136_;
  wire _137_;
  wire _138_;
  wire _139_;
  wire _140_;
  wire _141_;
  wire _142_;
  wire _143_;
  wire _144_;
  wire _145_;
  wire _146_;
  wire _147_;
  wire _148_;
  wire _149_;
  wire _150_;
  wire _151_;
  wire _152_;
  wire _153_;
  wire _154_;
  wire _155_;
  wire _156_;
  wire _157_;
  wire _158_;
  wire _159_;
  wire _160_;
  wire _161_;
  wire _162_;
  wire _163_;
  wire _164_;
  wire _165_;
  wire _166_;
  wire _167_;
  wire _168_;
  wire _169_;
  wire _170_;
  wire _171_;
  wire _172_;
  wire _173_;
  wire _174_;
  wire _175_;
  wire _176_;
  wire _177_;
  wire _178_;
  wire _179_;
  wire _180_;
  wire _181_;
  wire _182_;
  wire _183_;
  wire _184_;
  wire _185_;
  wire _186_;
  wire _187_;
  wire _188_;
  wire _189_;
  wire _190_;
  wire _191_;
  wire _192_;
  wire _193_;
  wire _194_;
  wire _195_;
  wire _196_;
  wire _197_;
  wire _198_;
  wire _199_;
  wire _200_;
  wire _201_;
  wire _202_;
  wire _203_;
  wire _204_;
  wire _205_;
  wire _206_;
  wire _207_;
  wire _208_;
  wire _209_;
  wire _210_;
  wire _211_;
  wire _212_;
  wire _213_;
  wire _214_;
  wire _215_;
  wire _216_;
  wire _217_;
  wire _218_;
  wire _219_;
  wire _220_;
  wire _221_;
  wire _222_;
  wire _223_;
  wire _224_;
  wire _225_;
  wire _226_;
  wire _227_;
  wire _228_;
  wire _229_;
  wire _230_;
  wire _231_;
  wire _232_;
  wire _233_;
  wire _234_;
  wire _235_;
  wire _236_;
  wire _237_;
  wire _238_;
  wire _239_;
  wire _240_;
  wire _241_;
  wire _242_;
  wire _243_;
  wire _244_;
  wire _245_;
  wire _246_;
  wire _247_;
  wire _248_;
  wire _249_;
  wire _250_;
  wire _251_;
  wire _252_;
  wire _253_;
  wire _254_;
  wire _255_;
  wire _256_;
  wire _257_;
  wire _258_;
  wire _259_;
  wire _260_;
  wire _261_;
  wire _262_;
  wire _263_;
  wire _264_;
  wire _265_;
  wire _266_;
  wire _267_;
  wire _268_;
  wire ack;
  wire al;
  input arst_i;
  wire arst_i;
  wire \byte_controller.ack_out ;
  wire \byte_controller.bit_controller.al ;
  wire \byte_controller.bit_controller.busy ;
  wire \byte_controller.bit_controller.c_state[0] ;
  wire \byte_controller.bit_controller.c_state[10] ;
  wire \byte_controller.bit_controller.c_state[11] ;
  wire \byte_controller.bit_controller.c_state[12] ;
  wire \byte_controller.bit_controller.c_state[13] ;
  wire \byte_controller.bit_controller.c_state[14] ;
  wire \byte_controller.bit_controller.c_state[15] ;
  wire \byte_controller.bit_controller.c_state[16] ;
  wire \byte_controller.bit_controller.c_state[1] ;
  wire \byte_controller.bit_controller.c_state[2] ;
  wire \byte_controller.bit_controller.c_state[3] ;
  wire \byte_controller.bit_controller.c_state[4] ;
  wire \byte_controller.bit_controller.c_state[5] ;
  wire \byte_controller.bit_controller.c_state[6] ;
  wire \byte_controller.bit_controller.c_state[7] ;
  wire \byte_controller.bit_controller.c_state[8] ;
  wire \byte_controller.bit_controller.c_state[9] ;
  wire \byte_controller.bit_controller.clk_cnt[0] ;
  wire \byte_controller.bit_controller.clk_cnt[10] ;
  wire \byte_controller.bit_controller.clk_cnt[11] ;
  wire \byte_controller.bit_controller.clk_cnt[12] ;
  wire \byte_controller.bit_controller.clk_cnt[13] ;
  wire \byte_controller.bit_controller.clk_cnt[14] ;
  wire \byte_controller.bit_controller.clk_cnt[15] ;
  wire \byte_controller.bit_controller.clk_cnt[1] ;
  wire \byte_controller.bit_controller.clk_cnt[2] ;
  wire \byte_controller.bit_controller.clk_cnt[3] ;
  wire \byte_controller.bit_controller.clk_cnt[4] ;
  wire \byte_controller.bit_controller.clk_cnt[5] ;
  wire \byte_controller.bit_controller.clk_cnt[6] ;
  wire \byte_controller.bit_controller.clk_cnt[7] ;
  wire \byte_controller.bit_controller.clk_cnt[8] ;
  wire \byte_controller.bit_controller.clk_cnt[9] ;
  wire \byte_controller.bit_controller.clk_en ;
  wire \byte_controller.bit_controller.cmd[0] ;
  wire \byte_controller.bit_controller.cmd[1] ;
  wire \byte_controller.bit_controller.cmd[2] ;
  wire \byte_controller.bit_controller.cmd[3] ;
  wire \byte_controller.bit_controller.cmd_ack ;
  wire \byte_controller.bit_controller.cmd_stop ;
  wire \byte_controller.bit_controller.cnt[0] ;
  wire \byte_controller.bit_controller.cnt[10] ;
  wire \byte_controller.bit_controller.cnt[11] ;
  wire \byte_controller.bit_controller.cnt[12] ;
  wire \byte_controller.bit_controller.cnt[13] ;
  wire \byte_controller.bit_controller.cnt[14] ;
  wire \byte_controller.bit_controller.cnt[15] ;
  wire \byte_controller.bit_controller.cnt[1] ;
  wire \byte_controller.bit_controller.cnt[2] ;
  wire \byte_controller.bit_controller.cnt[3] ;
  wire \byte_controller.bit_controller.cnt[4] ;
  wire \byte_controller.bit_controller.cnt[5] ;
  wire \byte_controller.bit_controller.cnt[6] ;
  wire \byte_controller.bit_controller.cnt[7] ;
  wire \byte_controller.bit_controller.cnt[8] ;
  wire \byte_controller.bit_controller.cnt[9] ;
  wire \byte_controller.bit_controller.dSCL ;
  wire \byte_controller.bit_controller.dSDA ;
  wire \byte_controller.bit_controller.din ;
  wire \byte_controller.bit_controller.dout ;
  wire \byte_controller.bit_controller.dscl_oen ;
  wire \byte_controller.bit_controller.ena ;
  wire \byte_controller.bit_controller.sSCL ;
  wire \byte_controller.bit_controller.sSDA ;
  wire \byte_controller.bit_controller.sda_chk ;
  wire \byte_controller.bit_controller.sta_condition ;
  wire \byte_controller.bit_controller.sto_condition ;
  wire \byte_controller.c_state[0] ;
  wire \byte_controller.c_state[1] ;
  wire \byte_controller.c_state[2] ;
  wire \byte_controller.c_state[3] ;
  wire \byte_controller.c_state[4] ;
  wire \byte_controller.cmd_ack ;
  wire \byte_controller.dcnt[0] ;
  wire \byte_controller.dcnt[1] ;
  wire \byte_controller.dcnt[2] ;
  wire \byte_controller.din[0] ;
  wire \byte_controller.din[1] ;
  wire \byte_controller.din[2] ;
  wire \byte_controller.din[3] ;
  wire \byte_controller.din[4] ;
  wire \byte_controller.din[5] ;
  wire \byte_controller.din[6] ;
  wire \byte_controller.din[7] ;
  wire \byte_controller.dout[0] ;
  wire \byte_controller.dout[1] ;
  wire \byte_controller.dout[2] ;
  wire \byte_controller.dout[3] ;
  wire \byte_controller.dout[4] ;
  wire \byte_controller.dout[5] ;
  wire \byte_controller.dout[6] ;
  wire \byte_controller.dout[7] ;
  wire \byte_controller.ld ;
  wire \byte_controller.read ;
  wire \byte_controller.shift ;
  wire \byte_controller.start ;
  wire \byte_controller.stop ;
  wire \byte_controller.write ;
  wire \cr[0] ;
  wire \cr[1] ;
  wire \cr[2] ;
  wire \cr[3] ;
  wire \cr[4] ;
  wire \cr[5] ;
  wire \cr[6] ;
  wire \cr[7] ;
  wire \ctr[0] ;
  wire \ctr[1] ;
  wire \ctr[2] ;
  wire \ctr[3] ;
  wire \ctr[4] ;
  wire \ctr[5] ;
  wire \ctr[6] ;
  wire \ctr[7] ;
  wire iack;
  wire ien;
  wire irq_flag;
  wire rxack;
  input scl_pad_i;
  wire scl_pad_i;
  output scl_pad_o;
  wire scl_pad_o;
  output scl_padoen_o;
  wire scl_padoen_o;
  input sda_pad_i;
  wire sda_pad_i;
  output sda_pad_o;
  wire sda_pad_o;
  output sda_padoen_o;
  wire sda_padoen_o;
  wire tip;
  output wb_ack_o;
  wire wb_ack_o;
  input \wb_adr_i[0] ;
  wire \wb_adr_i[0] ;
  input \wb_adr_i[1] ;
  wire \wb_adr_i[1] ;
  input \wb_adr_i[2] ;
  wire \wb_adr_i[2] ;
  input wb_clk_i;
  wire wb_clk_i;
  input wb_cyc_i;
  wire wb_cyc_i;
  input \wb_dat_i[0] ;
  wire \wb_dat_i[0] ;
  input \wb_dat_i[1] ;
  wire \wb_dat_i[1] ;
  input \wb_dat_i[2] ;
  wire \wb_dat_i[2] ;
  input \wb_dat_i[3] ;
  wire \wb_dat_i[3] ;
  input \wb_dat_i[4] ;
  wire \wb_dat_i[4] ;
  input \wb_dat_i[5] ;
  wire \wb_dat_i[5] ;
  input \wb_dat_i[6] ;
  wire \wb_dat_i[6] ;
  input \wb_dat_i[7] ;
  wire \wb_dat_i[7] ;
  output \wb_dat_o[0] ;
  wire \wb_dat_o[0] ;
  output \wb_dat_o[1] ;
  wire \wb_dat_o[1] ;
  output \wb_dat_o[2] ;
  wire \wb_dat_o[2] ;
  output \wb_dat_o[3] ;
  wire \wb_dat_o[3] ;
  output \wb_dat_o[4] ;
  wire \wb_dat_o[4] ;
  output \wb_dat_o[5] ;
  wire \wb_dat_o[5] ;
  output \wb_dat_o[6] ;
  wire \wb_dat_o[6] ;
  output \wb_dat_o[7] ;
  wire \wb_dat_o[7] ;
  output wb_inta_o;
  wire wb_inta_o;
  input wb_rst_i;
  wire wb_rst_i;
  input wb_stb_i;
  wire wb_stb_i;
  input wb_we_i;
  wire wb_we_i;
  dffrn _269_ (
    .C(wb_clk_i),
    .D(_053_),
    .Q(wb_inta_o),
    .RN(arst_i)
  );
  dffrn _270_ (
    .C(wb_clk_i),
    .D(_034_),
    .Q(rxack),
    .RN(arst_i)
  );
  dffrn _271_ (
    .C(wb_clk_i),
    .D(_035_),
    .Q(tip),
    .RN(arst_i)
  );
  dffrn _272_ (
    .C(wb_clk_i),
    .D(_017_),
    .Q(irq_flag),
    .RN(arst_i)
  );
  dffrn _273_ (
    .C(wb_clk_i),
    .D(_000_),
    .Q(al),
    .RN(arst_i)
  );
  dffrn _274_ (
    .C(wb_clk_i),
    .D(_001_),
    .Q(iack),
    .RN(arst_i)
  );
  dffrn _275_ (
    .C(wb_clk_i),
    .D(_002_),
    .Q(\cr[1] ),
    .RN(arst_i)
  );
  dffrn _276_ (
    .C(wb_clk_i),
    .D(_003_),
    .Q(\cr[2] ),
    .RN(arst_i)
  );
  dffrn _277_ (
    .C(wb_clk_i),
    .D(_004_),
    .Q(ack),
    .RN(arst_i)
  );
  dffrn _278_ (
    .C(wb_clk_i),
    .D(_005_),
    .Q(\byte_controller.write ),
    .RN(arst_i)
  );
  dffrn _279_ (
    .C(wb_clk_i),
    .D(_006_),
    .Q(\byte_controller.read ),
    .RN(arst_i)
  );
  dffrn _280_ (
    .C(wb_clk_i),
    .D(_007_),
    .Q(\byte_controller.stop ),
    .RN(arst_i)
  );
  dffrn _281_ (
    .C(wb_clk_i),
    .D(_008_),
    .Q(\byte_controller.start ),
    .RN(arst_i)
  );
  dffsn _282_ (
    .C(wb_clk_i),
    .D(_018_),
    .Q(\byte_controller.bit_controller.clk_cnt[0] ),
    .SN(arst_i)
  );
  dffsn _283_ (
    .C(wb_clk_i),
    .D(_025_),
    .Q(\byte_controller.bit_controller.clk_cnt[1] ),
    .SN(arst_i)
  );
  dffsn _284_ (
    .C(wb_clk_i),
    .D(_026_),
    .Q(\byte_controller.bit_controller.clk_cnt[2] ),
    .SN(arst_i)
  );
  dffsn _285_ (
    .C(wb_clk_i),
    .D(_027_),
    .Q(\byte_controller.bit_controller.clk_cnt[3] ),
    .SN(arst_i)
  );
  dffsn _286_ (
    .C(wb_clk_i),
    .D(_028_),
    .Q(\byte_controller.bit_controller.clk_cnt[4] ),
    .SN(arst_i)
  );
  dffsn _287_ (
    .C(wb_clk_i),
    .D(_029_),
    .Q(\byte_controller.bit_controller.clk_cnt[5] ),
    .SN(arst_i)
  );
  dffsn _288_ (
    .C(wb_clk_i),
    .D(_030_),
    .Q(\byte_controller.bit_controller.clk_cnt[6] ),
    .SN(arst_i)
  );
  dffsn _289_ (
    .C(wb_clk_i),
    .D(_031_),
    .Q(\byte_controller.bit_controller.clk_cnt[7] ),
    .SN(arst_i)
  );
  dffsn _290_ (
    .C(wb_clk_i),
    .D(_032_),
    .Q(\byte_controller.bit_controller.clk_cnt[8] ),
    .SN(arst_i)
  );
  dffsn _291_ (
    .C(wb_clk_i),
    .D(_033_),
    .Q(\byte_controller.bit_controller.clk_cnt[9] ),
    .SN(arst_i)
  );
  dffsn _292_ (
    .C(wb_clk_i),
    .D(_019_),
    .Q(\byte_controller.bit_controller.clk_cnt[10] ),
    .SN(arst_i)
  );
  dffsn _293_ (
    .C(wb_clk_i),
    .D(_020_),
    .Q(\byte_controller.bit_controller.clk_cnt[11] ),
    .SN(arst_i)
  );
  dffsn _294_ (
    .C(wb_clk_i),
    .D(_021_),
    .Q(\byte_controller.bit_controller.clk_cnt[12] ),
    .SN(arst_i)
  );
  dffsn _295_ (
    .C(wb_clk_i),
    .D(_022_),
    .Q(\byte_controller.bit_controller.clk_cnt[13] ),
    .SN(arst_i)
  );
  dffsn _296_ (
    .C(wb_clk_i),
    .D(_023_),
    .Q(\byte_controller.bit_controller.clk_cnt[14] ),
    .SN(arst_i)
  );
  dffsn _297_ (
    .C(wb_clk_i),
    .D(_024_),
    .Q(\byte_controller.bit_controller.clk_cnt[15] ),
    .SN(arst_i)
  );
  dffrn _298_ (
    .C(wb_clk_i),
    .D(_009_),
    .Q(\ctr[0] ),
    .RN(arst_i)
  );
  dffrn _299_ (
    .C(wb_clk_i),
    .D(_010_),
    .Q(\ctr[1] ),
    .RN(arst_i)
  );
  dffrn _300_ (
    .C(wb_clk_i),
    .D(_011_),
    .Q(\ctr[2] ),
    .RN(arst_i)
  );
  dffrn _301_ (
    .C(wb_clk_i),
    .D(_012_),
    .Q(\ctr[3] ),
    .RN(arst_i)
  );
  dffrn _302_ (
    .C(wb_clk_i),
    .D(_013_),
    .Q(\ctr[4] ),
    .RN(arst_i)
  );
  dffrn _303_ (
    .C(wb_clk_i),
    .D(_014_),
    .Q(\ctr[5] ),
    .RN(arst_i)
  );
  dffrn _304_ (
    .C(wb_clk_i),
    .D(_015_),
    .Q(ien),
    .RN(arst_i)
  );
  dffrn _305_ (
    .C(wb_clk_i),
    .D(_016_),
    .Q(\byte_controller.bit_controller.ena ),
    .RN(arst_i)
  );
  dffrn _306_ (
    .C(wb_clk_i),
    .D(_036_),
    .Q(\byte_controller.din[0] ),
    .RN(arst_i)
  );
  dffrn _307_ (
    .C(wb_clk_i),
    .D(_037_),
    .Q(\byte_controller.din[1] ),
    .RN(arst_i)
  );
  dffrn _308_ (
    .C(wb_clk_i),
    .D(_038_),
    .Q(\byte_controller.din[2] ),
    .RN(arst_i)
  );
  dffrn _309_ (
    .C(wb_clk_i),
    .D(_039_),
    .Q(\byte_controller.din[3] ),
    .RN(arst_i)
  );
  dffrn _310_ (
    .C(wb_clk_i),
    .D(_040_),
    .Q(\byte_controller.din[4] ),
    .RN(arst_i)
  );
  dffrn _311_ (
    .C(wb_clk_i),
    .D(_041_),
    .Q(\byte_controller.din[5] ),
    .RN(arst_i)
  );
  dffrn _312_ (
    .C(wb_clk_i),
    .D(_042_),
    .Q(\byte_controller.din[6] ),
    .RN(arst_i)
  );
  dffrn _313_ (
    .C(wb_clk_i),
    .D(_043_),
    .Q(\byte_controller.din[7] ),
    .RN(arst_i)
  );
  dff _314_ (
    .C(wb_clk_i),
    .D(_045_),
    .Q(\wb_dat_o[0] )
  );
  dff _315_ (
    .C(wb_clk_i),
    .D(_046_),
    .Q(\wb_dat_o[1] )
  );
  dff _316_ (
    .C(wb_clk_i),
    .D(_047_),
    .Q(\wb_dat_o[2] )
  );
  dff _317_ (
    .C(wb_clk_i),
    .D(_048_),
    .Q(\wb_dat_o[3] )
  );
  dff _318_ (
    .C(wb_clk_i),
    .D(_049_),
    .Q(\wb_dat_o[4] )
  );
  dff _319_ (
    .C(wb_clk_i),
    .D(_050_),
    .Q(\wb_dat_o[5] )
  );
  dff _320_ (
    .C(wb_clk_i),
    .D(_051_),
    .Q(\wb_dat_o[6] )
  );
  dff _321_ (
    .C(wb_clk_i),
    .D(_052_),
    .Q(\wb_dat_o[7] )
  );
  dff _322_ (
    .C(wb_clk_i),
    .D(_044_),
    .Q(wb_ack_o)
  );
  dff _323_ (
    .C(wb_clk_i),
    .D(scl_padoen_o),
    .Q(\byte_controller.bit_controller.dscl_oen )
  );
  dffrn _324_ (
    .C(wb_clk_i),
    .D(_099_),
    .Q(\byte_controller.bit_controller.cmd_ack ),
    .RN(arst_i)
  );
  dffrn _325_ (
    .C(wb_clk_i),
    .D(_101_),
    .Q(\byte_controller.bit_controller.cnt[0] ),
    .RN(arst_i)
  );
  dffrn _326_ (
    .C(wb_clk_i),
    .D(_108_),
    .Q(\byte_controller.bit_controller.cnt[1] ),
    .RN(arst_i)
  );
  dffrn _327_ (
    .C(wb_clk_i),
    .D(_109_),
    .Q(\byte_controller.bit_controller.cnt[2] ),
    .RN(arst_i)
  );
  dffrn _328_ (
    .C(wb_clk_i),
    .D(_110_),
    .Q(\byte_controller.bit_controller.cnt[3] ),
    .RN(arst_i)
  );
  dffrn _329_ (
    .C(wb_clk_i),
    .D(_111_),
    .Q(\byte_controller.bit_controller.cnt[4] ),
    .RN(arst_i)
  );
  dffrn _330_ (
    .C(wb_clk_i),
    .D(_112_),
    .Q(\byte_controller.bit_controller.cnt[5] ),
    .RN(arst_i)
  );
  dffrn _331_ (
    .C(wb_clk_i),
    .D(_113_),
    .Q(\byte_controller.bit_controller.cnt[6] ),
    .RN(arst_i)
  );
  dffrn _332_ (
    .C(wb_clk_i),
    .D(_114_),
    .Q(\byte_controller.bit_controller.cnt[7] ),
    .RN(arst_i)
  );
  dffrn _333_ (
    .C(wb_clk_i),
    .D(_115_),
    .Q(\byte_controller.bit_controller.cnt[8] ),
    .RN(arst_i)
  );
  dffrn _334_ (
    .C(wb_clk_i),
    .D(_116_),
    .Q(\byte_controller.bit_controller.cnt[9] ),
    .RN(arst_i)
  );
  dffrn _335_ (
    .C(wb_clk_i),
    .D(_102_),
    .Q(\byte_controller.bit_controller.cnt[10] ),
    .RN(arst_i)
  );
  dffrn _336_ (
    .C(wb_clk_i),
    .D(_103_),
    .Q(\byte_controller.bit_controller.cnt[11] ),
    .RN(arst_i)
  );
  dffrn _337_ (
    .C(wb_clk_i),
    .D(_104_),
    .Q(\byte_controller.bit_controller.cnt[12] ),
    .RN(arst_i)
  );
  dffrn _338_ (
    .C(wb_clk_i),
    .D(_105_),
    .Q(\byte_controller.bit_controller.cnt[13] ),
    .RN(arst_i)
  );
  dffrn _339_ (
    .C(wb_clk_i),
    .D(_106_),
    .Q(\byte_controller.bit_controller.cnt[14] ),
    .RN(arst_i)
  );
  dffrn _340_ (
    .C(wb_clk_i),
    .D(_107_),
    .Q(\byte_controller.bit_controller.cnt[15] ),
    .RN(arst_i)
  );
  dffsn _341_ (
    .C(wb_clk_i),
    .D(_122_),
    .Q(scl_padoen_o),
    .SN(arst_i)
  );
  dffsn _342_ (
    .C(wb_clk_i),
    .D(_124_),
    .Q(sda_padoen_o),
    .SN(arst_i)
  );
  dffrn _343_ (
    .C(wb_clk_i),
    .D(_081_),
    .Q(\byte_controller.bit_controller.c_state[0] ),
    .RN(arst_i)
  );
  dffrn _344_ (
    .C(wb_clk_i),
    .D(_089_),
    .Q(\byte_controller.bit_controller.c_state[1] ),
    .RN(arst_i)
  );
  dffrn _345_ (
    .C(wb_clk_i),
    .D(_090_),
    .Q(\byte_controller.bit_controller.c_state[2] ),
    .RN(arst_i)
  );
  dffrn _346_ (
    .C(wb_clk_i),
    .D(_091_),
    .Q(\byte_controller.bit_controller.c_state[3] ),
    .RN(arst_i)
  );
  dffrn _347_ (
    .C(wb_clk_i),
    .D(_092_),
    .Q(\byte_controller.bit_controller.c_state[4] ),
    .RN(arst_i)
  );
  dffrn _348_ (
    .C(wb_clk_i),
    .D(_093_),
    .Q(\byte_controller.bit_controller.c_state[5] ),
    .RN(arst_i)
  );
  dffrn _349_ (
    .C(wb_clk_i),
    .D(_094_),
    .Q(\byte_controller.bit_controller.c_state[6] ),
    .RN(arst_i)
  );
  dffrn _350_ (
    .C(wb_clk_i),
    .D(_095_),
    .Q(\byte_controller.bit_controller.c_state[7] ),
    .RN(arst_i)
  );
  dffrn _351_ (
    .C(wb_clk_i),
    .D(_096_),
    .Q(\byte_controller.bit_controller.c_state[8] ),
    .RN(arst_i)
  );
  dffrn _352_ (
    .C(wb_clk_i),
    .D(_097_),
    .Q(\byte_controller.bit_controller.c_state[9] ),
    .RN(arst_i)
  );
  dffrn _353_ (
    .C(wb_clk_i),
    .D(_082_),
    .Q(\byte_controller.bit_controller.c_state[10] ),
    .RN(arst_i)
  );
  dffrn _354_ (
    .C(wb_clk_i),
    .D(_083_),
    .Q(\byte_controller.bit_controller.c_state[11] ),
    .RN(arst_i)
  );
  dffrn _355_ (
    .C(wb_clk_i),
    .D(_084_),
    .Q(\byte_controller.bit_controller.c_state[12] ),
    .RN(arst_i)
  );
  dffrn _356_ (
    .C(wb_clk_i),
    .D(_085_),
    .Q(\byte_controller.bit_controller.c_state[13] ),
    .RN(arst_i)
  );
  dffrn _357_ (
    .C(wb_clk_i),
    .D(_086_),
    .Q(\byte_controller.bit_controller.c_state[14] ),
    .RN(arst_i)
  );
  dffrn _358_ (
    .C(wb_clk_i),
    .D(_087_),
    .Q(\byte_controller.bit_controller.c_state[15] ),
    .RN(arst_i)
  );
  dffrn _359_ (
    .C(wb_clk_i),
    .D(_088_),
    .Q(\byte_controller.bit_controller.c_state[16] ),
    .RN(arst_i)
  );
  dffsn _360_ (
    .C(wb_clk_i),
    .D(_098_),
    .Q(\byte_controller.bit_controller.clk_en ),
    .SN(arst_i)
  );
  dffrn _361_ (
    .C(wb_clk_i),
    .D(_123_),
    .Q(\byte_controller.bit_controller.sda_chk ),
    .RN(arst_i)
  );
  dff _362_ (
    .C(wb_clk_i),
    .D(_119_),
    .Q(\byte_controller.bit_controller.dout )
  );
  dffrn _363_ (
    .C(wb_clk_i),
    .D(_079_),
    .Q(\byte_controller.bit_controller.al ),
    .RN(arst_i)
  );
  dffrn _364_ (
    .C(wb_clk_i),
    .D(_100_),
    .Q(\byte_controller.bit_controller.cmd_stop ),
    .RN(arst_i)
  );
  dffsn _365_ (
    .C(wb_clk_i),
    .D(_118_),
    .Q(\byte_controller.bit_controller.dSDA ),
    .SN(arst_i)
  );
  dffrn _366_ (
    .C(wb_clk_i),
    .D(_080_),
    .Q(\byte_controller.bit_controller.busy ),
    .RN(arst_i)
  );
  dffsn _367_ (
    .C(wb_clk_i),
    .D(_121_),
    .Q(\byte_controller.bit_controller.sSDA ),
    .SN(arst_i)
  );
  dffrn _368_ (
    .C(wb_clk_i),
    .D(_125_),
    .Q(\byte_controller.bit_controller.sta_condition ),
    .RN(arst_i)
  );
  dffrn _369_ (
    .C(wb_clk_i),
    .D(_126_),
    .Q(\byte_controller.bit_controller.sto_condition ),
    .RN(arst_i)
  );
  dffsn _370_ (
    .C(wb_clk_i),
    .D(_117_),
    .Q(\byte_controller.bit_controller.dSCL ),
    .SN(arst_i)
  );
  dffsn _371_ (
    .C(wb_clk_i),
    .D(_120_),
    .Q(\byte_controller.bit_controller.sSCL ),
    .SN(arst_i)
  );
  dffrn _372_ (
    .C(wb_clk_i),
    .D(_069_),
    .Q(\byte_controller.ld ),
    .RN(arst_i)
  );
  dffrn _373_ (
    .C(wb_clk_i),
    .D(_070_),
    .Q(\byte_controller.shift ),
    .RN(arst_i)
  );
  dffrn _374_ (
    .C(wb_clk_i),
    .D(_055_),
    .Q(\byte_controller.c_state[0] ),
    .RN(arst_i)
  );
  dffrn _375_ (
    .C(wb_clk_i),
    .D(_056_),
    .Q(\byte_controller.c_state[1] ),
    .RN(arst_i)
  );
  dffrn _376_ (
    .C(wb_clk_i),
    .D(_057_),
    .Q(\byte_controller.c_state[2] ),
    .RN(arst_i)
  );
  dffrn _377_ (
    .C(wb_clk_i),
    .D(_058_),
    .Q(\byte_controller.c_state[3] ),
    .RN(arst_i)
  );
  dffrn _378_ (
    .C(wb_clk_i),
    .D(_059_),
    .Q(\byte_controller.c_state[4] ),
    .RN(arst_i)
  );
  dffrn _379_ (
    .C(wb_clk_i),
    .D(_065_),
    .Q(\byte_controller.bit_controller.din ),
    .RN(arst_i)
  );
  dffrn _380_ (
    .C(wb_clk_i),
    .D(_066_),
    .Q(\byte_controller.dcnt[0] ),
    .RN(arst_i)
  );
  dffrn _381_ (
    .C(wb_clk_i),
    .D(_067_),
    .Q(\byte_controller.dcnt[1] ),
    .RN(arst_i)
  );
  dffrn _382_ (
    .C(wb_clk_i),
    .D(_068_),
    .Q(\byte_controller.dcnt[2] ),
    .RN(arst_i)
  );
  dffrn _383_ (
    .C(wb_clk_i),
    .D(_061_),
    .Q(\byte_controller.bit_controller.cmd[0] ),
    .RN(arst_i)
  );
  dffrn _384_ (
    .C(wb_clk_i),
    .D(_062_),
    .Q(\byte_controller.bit_controller.cmd[1] ),
    .RN(arst_i)
  );
  dffrn _385_ (
    .C(wb_clk_i),
    .D(_063_),
    .Q(\byte_controller.bit_controller.cmd[2] ),
    .RN(arst_i)
  );
  dffrn _386_ (
    .C(wb_clk_i),
    .D(_064_),
    .Q(\byte_controller.bit_controller.cmd[3] ),
    .RN(arst_i)
  );
  dffrn _387_ (
    .C(wb_clk_i),
    .D(_054_),
    .Q(\byte_controller.ack_out ),
    .RN(arst_i)
  );
  dffrn _388_ (
    .C(wb_clk_i),
    .D(_060_),
    .Q(\byte_controller.cmd_ack ),
    .RN(arst_i)
  );
  dffrn _389_ (
    .C(wb_clk_i),
    .D(_071_),
    .Q(\byte_controller.dout[0] ),
    .RN(arst_i)
  );
  dffrn _390_ (
    .C(wb_clk_i),
    .D(_072_),
    .Q(\byte_controller.dout[1] ),
    .RN(arst_i)
  );
  dffrn _391_ (
    .C(wb_clk_i),
    .D(_073_),
    .Q(\byte_controller.dout[2] ),
    .RN(arst_i)
  );
  dffrn _392_ (
    .C(wb_clk_i),
    .D(_074_),
    .Q(\byte_controller.dout[3] ),
    .RN(arst_i)
  );
  dffrn _393_ (
    .C(wb_clk_i),
    .D(_075_),
    .Q(\byte_controller.dout[4] ),
    .RN(arst_i)
  );
  dffrn _394_ (
    .C(wb_clk_i),
    .D(_076_),
    .Q(\byte_controller.dout[5] ),
    .RN(arst_i)
  );
  dffrn _395_ (
    .C(wb_clk_i),
    .D(_077_),
    .Q(\byte_controller.dout[6] ),
    .RN(arst_i)
  );
  dffrn _396_ (
    .C(wb_clk_i),
    .D(_078_),
    .Q(\byte_controller.dout[7] ),
    .RN(arst_i)
  );
  assign _053_ = 8'h08 >> { wb_rst_i, ien, irq_flag };
  assign _130_ = 16'h0008 >> { \wb_adr_i[0] , \wb_adr_i[1] , \wb_adr_i[2] , \byte_controller.bit_controller.ena  };
  assign _174_ = 64'h0000000080000000 >> { \byte_controller.bit_controller.c_state[5] , _151_, _152_, _155_, \byte_controller.bit_controller.c_state[4] , _154_ };
  assign _175_ = 4'h1 >> { \byte_controller.bit_controller.c_state[0] , \byte_controller.bit_controller.c_state[1]  };
  assign _176_ = 64'h0000000080000000 >> { \byte_controller.bit_controller.c_state[0] , _151_, _152_, _166_, _165_, \byte_controller.bit_controller.c_state[1]  };
  assign _177_ = 64'h00000000ff7f7fff >> { _179_, \byte_controller.bit_controller.c_state[15] , \byte_controller.bit_controller.c_state[14] , _180_, _157_, _178_ };
  assign _178_ = 8'h08 >> { \byte_controller.bit_controller.c_state[12] , _147_, _146_ };
  assign _179_ = 4'h8 >> { _158_, \byte_controller.bit_controller.sda_chk  };
  assign _180_ = 64'h0000000000000001 >> { \byte_controller.bit_controller.c_state[16] , \byte_controller.bit_controller.c_state[13] , \byte_controller.bit_controller.c_state[8] , \byte_controller.bit_controller.c_state[10] , \byte_controller.bit_controller.c_state[11] , \byte_controller.bit_controller.c_state[9]  };
  assign _081_ = 16'h028a >> { \byte_controller.bit_controller.clk_en , _181_, _164_, _158_ };
  assign _181_ = 64'h5555555515555555 >> { \byte_controller.bit_controller.cmd[1] , _182_, \byte_controller.bit_controller.clk_en , _161_, \byte_controller.bit_controller.cmd[0] , \byte_controller.bit_controller.c_state[0]  };
  assign _182_ = 4'h1 >> { \byte_controller.bit_controller.cmd[3] , \byte_controller.bit_controller.cmd[2]  };
  assign _006_ = 16'h3120 >> { \byte_controller.read , \wb_dat_i[5] , _127_, _129_ };
  assign _089_ = 32'd2860526080 >> { \byte_controller.bit_controller.c_state[0] , \byte_controller.bit_controller.c_state[1] , _183_, \byte_controller.bit_controller.clk_en , _158_ };
  assign _183_ = 16'h8000 >> { _165_, _151_, _152_, _166_ };
  assign _090_ = 16'ha888 >> { _176_, \byte_controller.bit_controller.clk_en , \byte_controller.bit_controller.c_state[2] , _184_ };
  assign _184_ = 32'd572662434 >> { _168_, _185_, _186_, \byte_controller.bit_controller.clk_en , _158_ };
  assign _185_ = 64'h0000000080000000 >> { \byte_controller.bit_controller.c_state[4] , _151_, _152_, _155_, _154_, \byte_controller.bit_controller.c_state[5]  };
  assign _186_ = 64'hffff7fff7fffffff >> { \byte_controller.bit_controller.c_state[2] , \byte_controller.bit_controller.c_state[3] , _152_, _166_, _175_, _151_ };
  assign _091_ = 16'hd888 >> { _157_, \byte_controller.bit_controller.c_state[2] , \byte_controller.bit_controller.c_state[3] , _184_ };
  assign _187_ = 16'h0002 >> { _188_, _160_, _162_, _189_ };
  assign _188_ = 64'h0000000080000000 >> { \byte_controller.bit_controller.c_state[6] , _151_, _152_, _155_, \byte_controller.bit_controller.c_state[7] , _169_ };
  assign _189_ = 64'hffffffffff7f7fff >> { \byte_controller.bit_controller.c_state[12] , \byte_controller.bit_controller.c_state[15] , \byte_controller.bit_controller.c_state[14] , _147_, _180_, _146_ };
  assign _007_ = 16'h3120 >> { \byte_controller.stop , \wb_dat_i[6] , _127_, _129_ };
  assign _093_ = 8'ha8 >> { \byte_controller.bit_controller.c_state[5] , _190_, _184_ };
  assign _190_ = 32'd32768 >> { \byte_controller.bit_controller.cmd[0] , _182_, _161_, \byte_controller.bit_controller.cmd[1] , \byte_controller.bit_controller.clk_en  };
  assign _094_ = 16'hf888 >> { _185_, _157_, _184_, \byte_controller.bit_controller.c_state[6]  };
  assign _096_ = 32'd2827528200 >> { _170_, _188_, \byte_controller.bit_controller.clk_en , \byte_controller.bit_controller.c_state[8] , _158_ };
  assign _097_ = 16'h2202 >> { _187_, \byte_controller.bit_controller.clk_en , _191_, _158_ };
  assign _191_ = 32'd1431639381 >> { \byte_controller.bit_controller.cmd[2] , _192_, _161_, \byte_controller.bit_controller.cmd[3] , \byte_controller.bit_controller.c_state[9]  };
  assign _192_ = 8'h02 >> { \byte_controller.bit_controller.cmd[0] , \byte_controller.bit_controller.cmd[1] , \byte_controller.bit_controller.clk_en  };
  assign _082_ = 32'd2827528200 >> { _170_, _162_, \byte_controller.bit_controller.clk_en , \byte_controller.bit_controller.c_state[10] , _158_ };
  assign _083_ = 32'd2284357640 >> { \byte_controller.bit_controller.c_state[10] , _170_, \byte_controller.bit_controller.clk_en , \byte_controller.bit_controller.c_state[11] , _158_ };
  assign _084_ = 32'd2284357640 >> { \byte_controller.bit_controller.c_state[11] , _170_, \byte_controller.bit_controller.clk_en , \byte_controller.bit_controller.c_state[12] , _158_ };
  assign _008_ = 16'h3120 >> { \byte_controller.start , \wb_dat_i[7] , _127_, _129_ };
  assign _085_ = 16'h2202 >> { _187_, \byte_controller.bit_controller.clk_en , _193_, _158_ };
  assign _193_ = 32'd1431639381 >> { \byte_controller.bit_controller.cmd[3] , \byte_controller.bit_controller.cmd[2] , _161_, _192_, \byte_controller.bit_controller.c_state[13]  };
  assign _086_ = 32'd2827528200 >> { _187_, _160_, \byte_controller.bit_controller.clk_en , \byte_controller.bit_controller.c_state[14] , _158_ };
  assign _087_ = 32'd2284357640 >> { \byte_controller.bit_controller.c_state[14] , _187_, \byte_controller.bit_controller.clk_en , \byte_controller.bit_controller.c_state[15] , _158_ };
  assign _088_ = 64'ha2a080a022a000a0 >> { _170_, \byte_controller.bit_controller.c_state[15] , \byte_controller.bit_controller.clk_en , \byte_controller.bit_controller.c_state[16] , _187_, _158_ };
  assign _124_ = 64'hf5d5f5d57555f5d5 >> { _194_, _195_, \byte_controller.bit_controller.din , \byte_controller.bit_controller.clk_en , _196_, _197_ };
  assign _194_ = 64'h0000000000000008 >> { _185_, _168_, _174_, _188_, sda_padoen_o, _186_ };
  assign _195_ = 64'h0000000000000002 >> { _162_, _164_, _171_, _172_, _176_, _264_ };
  assign _196_ = 8'h02 >> { _150_, _160_, _189_ };
  assign _197_ = 8'h8a >> { sda_padoen_o, \byte_controller.bit_controller.clk_en , _158_ };
  assign _004_ = 16'h3120 >> { ack, \wb_dat_i[3] , wb_rst_i, _129_ };
  assign _122_ = 64'h7f557f55ff557f55 >> { _199_, _187_, _201_, _200_, _198_, _202_ };
  assign _198_ = 32'd570565154 >> { \byte_controller.bit_controller.c_state[1] , \byte_controller.bit_controller.c_state[0] , _183_, _188_, _186_ };
  assign _199_ = 64'h00000000fffffdd7 >> { scl_padoen_o, \byte_controller.bit_controller.c_state[9] , \byte_controller.bit_controller.c_state[8] , \byte_controller.bit_controller.c_state[10] , \byte_controller.bit_controller.c_state[11] , _145_ };
  assign _200_ = 4'h2 >> { _168_, _189_ };
  assign _201_ = 64'h0200000202020202 >> { _153_, \byte_controller.bit_controller.c_state[4] , \byte_controller.bit_controller.c_state[5] , _150_, _171_, \byte_controller.bit_controller.clk_en  };
  assign _202_ = 8'ha2 >> { \byte_controller.bit_controller.clk_en , scl_padoen_o, _158_ };
  assign _119_ = 16'hf2d0 >> { \byte_controller.bit_controller.sSDA , \byte_controller.bit_controller.dout , \byte_controller.bit_controller.dSCL , \byte_controller.bit_controller.sSCL  };
  assign _079_ = 4'h1 >> { _203_, wb_rst_i };
  assign _203_ = 64'hfdfdfdfd00fdfdfd >> { \byte_controller.bit_controller.sSDA , \byte_controller.bit_controller.sda_chk , sda_padoen_o, _161_, \byte_controller.bit_controller.cmd_stop , \byte_controller.bit_controller.sto_condition  };
  assign _100_ = 64'h1010101032101010 >> { \byte_controller.bit_controller.cmd[0] , \byte_controller.bit_controller.cmd[1] , _182_, \byte_controller.bit_controller.cmd_stop , wb_rst_i, \byte_controller.bit_controller.clk_en  };
  assign _002_ = 32'd167905280 >> { \cr[1] , \wb_dat_i[1] , wb_rst_i, _130_, _128_ };
  assign _080_ = 16'h1110 >> { \byte_controller.bit_controller.sta_condition , \byte_controller.bit_controller.busy , \byte_controller.bit_controller.sto_condition , wb_rst_i };
  assign _126_ = 16'h0008 >> { wb_rst_i, \byte_controller.bit_controller.dSDA , \byte_controller.bit_controller.sSDA , \byte_controller.bit_controller.sSCL  };
  assign _125_ = 8'h08 >> { _118_, \byte_controller.bit_controller.sSCL , \byte_controller.bit_controller.dSDA  };
  assign _118_ = 4'he >> { wb_rst_i, \byte_controller.bit_controller.sSDA  };
  assign _117_ = 4'he >> { \byte_controller.bit_controller.sSCL , wb_rst_i };
  assign _121_ = 4'he >> { wb_rst_i, sda_pad_i };
  assign _120_ = 4'he >> { wb_rst_i, scl_pad_i };
  assign _098_ = 32'd3452820941 >> { \byte_controller.bit_controller.cnt[15] , _204_, \byte_controller.bit_controller.ena , wb_rst_i, _207_ };
  assign _204_ = 32'd2 >> { \byte_controller.bit_controller.cnt[11] , \byte_controller.bit_controller.cnt[12] , \byte_controller.bit_controller.cnt[13] , \byte_controller.bit_controller.cnt[14] , _205_ };
  assign _205_ = 64'h0000000000000002 >> { \byte_controller.bit_controller.cnt[6] , \byte_controller.bit_controller.cnt[7] , \byte_controller.bit_controller.cnt[8] , \byte_controller.bit_controller.cnt[9] , \byte_controller.bit_controller.cnt[10] , _206_ };
  assign _003_ = 32'd167905280 >> { \cr[2] , \wb_dat_i[2] , wb_rst_i, _130_, _128_ };
  assign _206_ = 64'h0000000000000001 >> { \byte_controller.bit_controller.cnt[0] , \byte_controller.bit_controller.cnt[1] , \byte_controller.bit_controller.cnt[2] , \byte_controller.bit_controller.cnt[3] , \byte_controller.bit_controller.cnt[4] , \byte_controller.bit_controller.cnt[5]  };
  assign _207_ = 4'h2 >> { \byte_controller.bit_controller.sSCL , \byte_controller.bit_controller.dscl_oen  };
  assign _101_ = 64'h1555115500400044 >> { _208_, _204_, \byte_controller.bit_controller.cnt[0] , \byte_controller.bit_controller.cnt[15] , \byte_controller.bit_controller.ena , wb_rst_i };
  assign _208_ = 8'hd8 >> { \byte_controller.bit_controller.clk_cnt[0] , \byte_controller.bit_controller.cnt[0] , _207_ };
  assign _108_ = 64'h0040004415551155 >> { _209_, _204_, _210_, \byte_controller.bit_controller.cnt[15] , \byte_controller.bit_controller.ena , wb_rst_i };
  assign _209_ = 8'h27 >> { \byte_controller.bit_controller.clk_cnt[1] , \byte_controller.bit_controller.cnt[1] , _207_ };
  assign _210_ = 4'h6 >> { \byte_controller.bit_controller.cnt[0] , \byte_controller.bit_controller.cnt[1]  };
  assign _109_ = 64'h0040004415551155 >> { _211_, _204_, _212_, \byte_controller.bit_controller.cnt[15] , \byte_controller.bit_controller.ena , wb_rst_i };
  assign _211_ = 8'h27 >> { \byte_controller.bit_controller.clk_cnt[2] , \byte_controller.bit_controller.cnt[2] , _207_ };
  assign _212_ = 8'h56 >> { \byte_controller.bit_controller.cnt[0] , \byte_controller.bit_controller.cnt[1] , \byte_controller.bit_controller.cnt[2]  };
  assign _001_ = 32'd167905280 >> { iack, \wb_dat_i[0] , wb_rst_i, _130_, _128_ };
  assign _110_ = 64'h0040004415551155 >> { _213_, _204_, _214_, \byte_controller.bit_controller.cnt[15] , \byte_controller.bit_controller.ena , wb_rst_i };
  assign _213_ = 8'h27 >> { \byte_controller.bit_controller.clk_cnt[3] , \byte_controller.bit_controller.cnt[3] , _207_ };
  assign _214_ = 16'h5556 >> { \byte_controller.bit_controller.cnt[0] , \byte_controller.bit_controller.cnt[1] , \byte_controller.bit_controller.cnt[2] , \byte_controller.bit_controller.cnt[3]  };
  assign _111_ = 64'h0040004415551155 >> { _215_, _204_, _216_, \byte_controller.bit_controller.cnt[15] , \byte_controller.bit_controller.ena , wb_rst_i };
  assign _215_ = 8'h27 >> { \byte_controller.bit_controller.clk_cnt[4] , \byte_controller.bit_controller.cnt[4] , _207_ };
  assign _216_ = 32'd1431655766 >> { \byte_controller.bit_controller.cnt[0] , \byte_controller.bit_controller.cnt[1] , \byte_controller.bit_controller.cnt[2] , \byte_controller.bit_controller.cnt[3] , \byte_controller.bit_controller.cnt[4]  };
  assign _112_ = 64'h0040004415551155 >> { _217_, _204_, _218_, \byte_controller.bit_controller.cnt[15] , \byte_controller.bit_controller.ena , wb_rst_i };
  assign _217_ = 8'h27 >> { \byte_controller.bit_controller.clk_cnt[5] , \byte_controller.bit_controller.cnt[5] , _207_ };
  assign _218_ = 64'h5555555555555556 >> { \byte_controller.bit_controller.cnt[0] , \byte_controller.bit_controller.cnt[1] , \byte_controller.bit_controller.cnt[2] , \byte_controller.bit_controller.cnt[3] , \byte_controller.bit_controller.cnt[4] , \byte_controller.bit_controller.cnt[5]  };
  assign _113_ = 64'h0040004415551155 >> { _219_, _204_, _220_, \byte_controller.bit_controller.cnt[15] , \byte_controller.bit_controller.ena , wb_rst_i };
  assign _032_ = 16'hfdec >> { \byte_controller.bit_controller.clk_cnt[8] , \wb_dat_i[0] , wb_rst_i, _131_ };
  assign _219_ = 8'h27 >> { \byte_controller.bit_controller.clk_cnt[6] , \byte_controller.bit_controller.cnt[6] , _207_ };
  assign _220_ = 4'h9 >> { _206_, \byte_controller.bit_controller.cnt[6]  };
  assign _114_ = 64'h0040004415551155 >> { _222_, _204_, _221_, \byte_controller.bit_controller.cnt[15] , \byte_controller.bit_controller.ena , wb_rst_i };
  assign _221_ = 8'h59 >> { \byte_controller.bit_controller.cnt[6] , _206_, \byte_controller.bit_controller.cnt[7]  };
  assign _222_ = 8'h27 >> { \byte_controller.bit_controller.clk_cnt[7] , \byte_controller.bit_controller.cnt[7] , _207_ };
  assign _115_ = 64'h0040004415551155 >> { _224_, _204_, _223_, \byte_controller.bit_controller.cnt[15] , \byte_controller.bit_controller.ena , wb_rst_i };
  assign _223_ = 16'h5559 >> { \byte_controller.bit_controller.cnt[6] , \byte_controller.bit_controller.cnt[7] , _206_, \byte_controller.bit_controller.cnt[8]  };
  assign _224_ = 8'h27 >> { \byte_controller.bit_controller.clk_cnt[8] , \byte_controller.bit_controller.cnt[8] , _207_ };
  assign _116_ = 64'h0040004415551155 >> { _226_, _204_, _225_, \byte_controller.bit_controller.cnt[15] , \byte_controller.bit_controller.ena , wb_rst_i };
  assign _225_ = 32'd1431655769 >> { \byte_controller.bit_controller.cnt[6] , \byte_controller.bit_controller.cnt[7] , \byte_controller.bit_controller.cnt[8] , _206_, \byte_controller.bit_controller.cnt[9]  };
  assign _131_ = 16'h0008 >> { \wb_adr_i[2] , \wb_adr_i[1] , _128_, \wb_adr_i[0]  };
  assign _226_ = 8'h27 >> { \byte_controller.bit_controller.clk_cnt[9] , \byte_controller.bit_controller.cnt[9] , _207_ };
  assign _102_ = 64'h0040004415551155 >> { _228_, _204_, _227_, \byte_controller.bit_controller.cnt[15] , \byte_controller.bit_controller.ena , wb_rst_i };
  assign _227_ = 64'h5555555555555559 >> { \byte_controller.bit_controller.cnt[6] , \byte_controller.bit_controller.cnt[7] , \byte_controller.bit_controller.cnt[8] , \byte_controller.bit_controller.cnt[9] , _206_, \byte_controller.bit_controller.cnt[10]  };
  assign _228_ = 8'h27 >> { \byte_controller.bit_controller.clk_cnt[10] , \byte_controller.bit_controller.cnt[10] , _207_ };
  assign _103_ = 64'h0040004415551155 >> { _230_, _204_, _229_, \byte_controller.bit_controller.cnt[15] , \byte_controller.bit_controller.ena , wb_rst_i };
  assign _229_ = 4'h9 >> { _205_, \byte_controller.bit_controller.cnt[11]  };
  assign _230_ = 8'h27 >> { \byte_controller.bit_controller.clk_cnt[11] , \byte_controller.bit_controller.cnt[11] , _207_ };
  assign _104_ = 64'h0040004415551155 >> { _232_, _204_, _231_, \byte_controller.bit_controller.cnt[15] , \byte_controller.bit_controller.ena , wb_rst_i };
  assign _231_ = 8'h59 >> { \byte_controller.bit_controller.cnt[11] , _205_, \byte_controller.bit_controller.cnt[12]  };
  assign _232_ = 8'h27 >> { \byte_controller.bit_controller.clk_cnt[12] , \byte_controller.bit_controller.cnt[12] , _207_ };
  assign _017_ = 32'd286331152 >> { \byte_controller.bit_controller.al , \byte_controller.cmd_ack , irq_flag, wb_rst_i, iack };
  assign _033_ = 16'hfdec >> { \byte_controller.bit_controller.clk_cnt[9] , \wb_dat_i[1] , wb_rst_i, _131_ };
  assign _105_ = 64'h0040004415551155 >> { _234_, _204_, _233_, \byte_controller.bit_controller.cnt[15] , \byte_controller.bit_controller.ena , wb_rst_i };
  assign _233_ = 16'h5559 >> { \byte_controller.bit_controller.cnt[11] , \byte_controller.bit_controller.cnt[12] , _205_, \byte_controller.bit_controller.cnt[13]  };
  assign _234_ = 8'h27 >> { \byte_controller.bit_controller.clk_cnt[13] , \byte_controller.bit_controller.cnt[13] , _207_ };
  assign _106_ = 64'h0440155104001551 >> { \byte_controller.bit_controller.cnt[15] , _236_, \byte_controller.bit_controller.cnt[14] , _235_, \byte_controller.bit_controller.ena , wb_rst_i };
  assign _235_ = 16'h0002 >> { \byte_controller.bit_controller.cnt[11] , \byte_controller.bit_controller.cnt[12] , \byte_controller.bit_controller.cnt[13] , _205_ };
  assign _236_ = 8'h27 >> { \byte_controller.bit_controller.clk_cnt[14] , \byte_controller.bit_controller.cnt[14] , _207_ };
  assign _107_ = 64'h0151004050515040 >> { _204_, \byte_controller.bit_controller.clk_cnt[15] , \byte_controller.bit_controller.ena , \byte_controller.bit_controller.cnt[15] , _207_, wb_rst_i };
  assign _071_ = 64'h3311321023012200 >> { \byte_controller.bit_controller.dout , \byte_controller.dout[0] , \byte_controller.din[0] , \byte_controller.shift , wb_rst_i, \byte_controller.ld  };
  assign _072_ = 64'h3311230132102200 >> { \byte_controller.dout[1] , \byte_controller.dout[0] , \byte_controller.din[1] , \byte_controller.shift , wb_rst_i, \byte_controller.ld  };
  assign _073_ = 64'h3311230132102200 >> { \byte_controller.dout[2] , \byte_controller.dout[1] , \byte_controller.din[2] , \byte_controller.shift , wb_rst_i, \byte_controller.ld  };
  assign _019_ = 16'hfdec >> { \byte_controller.bit_controller.clk_cnt[10] , \wb_dat_i[2] , wb_rst_i, _131_ };
  assign _074_ = 64'h3311230132102200 >> { \byte_controller.dout[3] , \byte_controller.dout[2] , \byte_controller.din[3] , \byte_controller.shift , wb_rst_i, \byte_controller.ld  };
  assign _075_ = 64'h3311230132102200 >> { \byte_controller.dout[4] , \byte_controller.dout[3] , \byte_controller.din[4] , \byte_controller.shift , wb_rst_i, \byte_controller.ld  };
  assign _076_ = 64'h3311230132102200 >> { \byte_controller.dout[5] , \byte_controller.dout[4] , \byte_controller.din[5] , \byte_controller.shift , wb_rst_i, \byte_controller.ld  };
  assign _077_ = 64'h3311230132102200 >> { \byte_controller.dout[6] , \byte_controller.dout[5] , \byte_controller.din[6] , \byte_controller.shift , wb_rst_i, \byte_controller.ld  };
  assign _078_ = 64'h3311321023012200 >> { \byte_controller.dout[6] , \byte_controller.dout[7] , \byte_controller.din[7] , \byte_controller.shift , wb_rst_i, \byte_controller.ld  };
  assign _066_ = 16'h5514 >> { \byte_controller.ld , \byte_controller.dcnt[0] , \byte_controller.shift , wb_rst_i };
  assign _067_ = 32'd1431651348 >> { \byte_controller.ld , \byte_controller.dcnt[0] , \byte_controller.shift , \byte_controller.dcnt[1] , wb_rst_i };
  assign _068_ = 64'h5555555544444414 >> { \byte_controller.ld , \byte_controller.dcnt[0] , \byte_controller.dcnt[1] , \byte_controller.shift , \byte_controller.dcnt[2] , wb_rst_i };
  assign _054_ = 16'ha280 >> { \byte_controller.ack_out , \byte_controller.bit_controller.dout , _237_, _158_ };
  assign _237_ = 32'd128 >> { \byte_controller.c_state[1] , \byte_controller.c_state[2] , \byte_controller.c_state[3] , _238_, \byte_controller.bit_controller.cmd_ack  };
  assign _020_ = 16'hfdec >> { \byte_controller.bit_controller.clk_cnt[11] , \wb_dat_i[3] , wb_rst_i, _131_ };
  assign _238_ = 4'h1 >> { \byte_controller.c_state[0] , \byte_controller.c_state[4]  };
  assign _061_ = 64'ha8a8080800880008 >> { _241_, \byte_controller.start , \byte_controller.bit_controller.cmd_ack , _239_, \byte_controller.bit_controller.cmd[0] , _158_ };
  assign _239_ = 64'h0808080808080800 >> { \byte_controller.stop , \byte_controller.read , \byte_controller.write , \byte_controller.cmd_ack , _238_, _240_ };
  assign _240_ = 8'h01 >> { \byte_controller.c_state[1] , \byte_controller.c_state[3] , \byte_controller.c_state[2]  };
  assign _241_ = 4'h8 >> { _242_, _243_ };
  assign _242_ = 32'd4294967289 >> { \byte_controller.c_state[1] , \byte_controller.c_state[3] , \byte_controller.c_state[4] , \byte_controller.c_state[0] , \byte_controller.c_state[2]  };
  assign _243_ = 32'd4294967273 >> { \byte_controller.c_state[0] , \byte_controller.c_state[2] , \byte_controller.c_state[1] , \byte_controller.c_state[3] , \byte_controller.c_state[4]  };
  assign _062_ = 64'h0020002022220020 >> { \byte_controller.bit_controller.cmd_ack , \byte_controller.bit_controller.cmd[1] , _244_, _242_, _245_, _158_ };
  assign _244_ = 8'h15 >> { \byte_controller.stop , _237_, _243_ };
  assign _245_ = 64'h8c8c8c8c8c8c8c04 >> { \byte_controller.write , \byte_controller.read , \byte_controller.start , \byte_controller.bit_controller.cmd[1] , _243_, _239_ };
  assign _021_ = 16'hfdec >> { \byte_controller.bit_controller.clk_cnt[12] , \wb_dat_i[4] , wb_rst_i, _131_ };
  assign _063_ = 64'he0f0e0f0e0e0e0f0 >> { _241_, \byte_controller.bit_controller.cmd_ack , _251_, _158_, _246_, _249_ };
  assign _246_ = 4'h8 >> { _247_, _248_ };
  assign _247_ = 32'd128 >> { \byte_controller.c_state[3] , \byte_controller.c_state[2] , _238_, \byte_controller.c_state[1] , \byte_controller.bit_controller.cmd_ack  };
  assign _248_ = 8'h01 >> { \byte_controller.dcnt[0] , \byte_controller.dcnt[1] , \byte_controller.dcnt[2]  };
  assign _249_ = 32'd524810 >> { \byte_controller.read , _248_, _242_, _250_, \byte_controller.bit_controller.cmd_ack  };
  assign _250_ = 16'h0008 >> { \byte_controller.c_state[1] , \byte_controller.c_state[3] , _238_, \byte_controller.c_state[2]  };
  assign _251_ = 32'd3149642523 >> { \byte_controller.read , \byte_controller.start , \byte_controller.write , \byte_controller.bit_controller.cmd[2] , _239_ };
  assign _252_ = 32'd539011104 >> { \byte_controller.start , \byte_controller.read , \byte_controller.bit_controller.cmd[3] , _239_, _241_ };
  assign _253_ = 32'd32768 >> { \byte_controller.c_state[4] , \byte_controller.c_state[0] , _240_, \byte_controller.read , \byte_controller.bit_controller.cmd_ack  };
  assign _254_ = 32'd4294967289 >> { \byte_controller.c_state[0] , \byte_controller.c_state[1] , \byte_controller.c_state[2] , \byte_controller.c_state[3] , \byte_controller.c_state[4]  };
  assign _022_ = 16'hfdec >> { \byte_controller.bit_controller.clk_cnt[13] , \wb_dat_i[5] , wb_rst_i, _131_ };
  assign _055_ = 64'haaaa00aa80800080 >> { \byte_controller.c_state[0] , _242_, \byte_controller.bit_controller.cmd_ack , _239_, \byte_controller.start , _158_ };
  assign _056_ = 8'h02 >> { _246_, _255_, _158_ };
  assign _255_ = 32'd286327057 >> { \byte_controller.start , \byte_controller.read , _239_, _253_, \byte_controller.c_state[1]  };
  assign _057_ = 64'hf0e0f0e0e0e0f0e0 >> { _242_, \byte_controller.bit_controller.cmd_ack , \byte_controller.c_state[2] , _158_, _256_, _249_ };
  assign _256_ = 16'h0008 >> { \byte_controller.read , \byte_controller.start , _239_, \byte_controller.write  };
  assign _058_ = 4'h2 >> { _257_, _158_ };
  assign _257_ = 64'h551515d5555555d5 >> { _248_, \byte_controller.c_state[1] , \byte_controller.c_state[2] , _238_, \byte_controller.bit_controller.cmd_ack , \byte_controller.c_state[3]  };
  assign _059_ = 32'd134908042 >> { \byte_controller.bit_controller.cmd_ack , _258_, _244_, \byte_controller.c_state[4] , _158_ };
  assign _258_ = 32'd2863311522 >> { \byte_controller.start , \byte_controller.write , \byte_controller.read , _239_, _243_ };
  assign _065_ = 64'haa8aaa02a888a800 >> { \byte_controller.dout[7] , \byte_controller.bit_controller.cmd_ack , ack, _247_, _259_, _158_ };
  assign _023_ = 16'hfdec >> { \byte_controller.bit_controller.clk_cnt[14] , \wb_dat_i[6] , wb_rst_i, _131_ };
  assign _259_ = 16'h0008 >> { \byte_controller.c_state[1] , \byte_controller.c_state[2] , \byte_controller.c_state[3] , _238_ };
  assign _070_ = 32'd2290657416 >> { _248_, _250_, \byte_controller.bit_controller.cmd_ack , _247_, _158_ };
  assign _069_ = 64'h88888888a8888888 >> { \byte_controller.c_state[4] , \byte_controller.bit_controller.cmd_ack , _240_, \byte_controller.c_state[0] , _239_, _158_ };
  assign _060_ = 32'd134219784 >> { \byte_controller.stop , \byte_controller.c_state[4] , _254_, \byte_controller.bit_controller.cmd_ack , _158_ };
  assign _044_ = 8'h08 >> { wb_ack_o, wb_cyc_i, wb_stb_i };
  assign _260_ = 64'hf7b3d591e6a2c480 >> { \byte_controller.bit_controller.clk_cnt[2] , \ctr[2] , \byte_controller.bit_controller.clk_cnt[10] , \byte_controller.dout[2] , \wb_adr_i[0] , \wb_adr_i[1]  };
  assign _047_ = 64'h7d285d0875205500 >> { \cr[2] , \byte_controller.din[2] , _260_, \wb_adr_i[0] , \wb_adr_i[1] , \wb_adr_i[2]  };
  assign _261_ = 64'hf7b3d591e6a2c480 >> { \byte_controller.bit_controller.clk_cnt[3] , \ctr[3] , \byte_controller.bit_controller.clk_cnt[11] , \byte_controller.dout[3] , \wb_adr_i[0] , \wb_adr_i[1]  };
  assign _048_ = 64'h7d285d0875205500 >> { ack, \byte_controller.din[3] , _261_, \wb_adr_i[0] , \wb_adr_i[1] , \wb_adr_i[2]  };
  assign _262_ = 64'hf7b3d591e6a2c480 >> { \byte_controller.bit_controller.clk_cnt[4] , \ctr[4] , \byte_controller.bit_controller.clk_cnt[12] , \byte_controller.dout[4] , \wb_adr_i[0] , \wb_adr_i[1]  };
  assign _024_ = 16'hfdec >> { \byte_controller.bit_controller.clk_cnt[15] , \wb_dat_i[7] , wb_rst_i, _131_ };
  assign _049_ = 64'h7d285d0875205500 >> { \byte_controller.write , \byte_controller.din[4] , _262_, \wb_adr_i[0] , \wb_adr_i[1] , \wb_adr_i[2]  };
  assign _263_ = 16'h0006 >> { \byte_controller.bit_controller.c_state[8] , \byte_controller.bit_controller.c_state[9] , \byte_controller.bit_controller.c_state[10] , \byte_controller.bit_controller.c_state[11]  };
  assign _264_ = 16'h7fff >> { _263_, _146_, _147_, _148_ };
  assign _092_ = 64'h8a008a008a808a00 >> { _186_, \byte_controller.bit_controller.c_state[3] , \byte_controller.bit_controller.c_state[4] , \byte_controller.bit_controller.clk_en , _170_, _158_ };
  assign _095_ = 32'd2323679744 >> { _168_, \byte_controller.bit_controller.c_state[7] , \byte_controller.bit_controller.clk_en , _187_, _158_ };
  assign _265_ = 64'had75adfdaf77afff >> { _254_, _250_, _242_, _243_, _248_, \byte_controller.bit_controller.cmd_ack  };
  assign _064_ = 64'haaaaaa28aaaaaa20 >> { \byte_controller.bit_controller.cmd[3] , _253_, _252_, \byte_controller.bit_controller.cmd_ack , _265_, _158_ };
  assign _018_ = 16'hfdec >> { \byte_controller.bit_controller.clk_cnt[0] , \wb_dat_i[0] , wb_rst_i, _132_ };
  assign _132_ = 16'h0002 >> { \wb_adr_i[0] , \wb_adr_i[2] , \wb_adr_i[1] , _128_ };
  assign _025_ = 16'hfdec >> { \byte_controller.bit_controller.clk_cnt[1] , \wb_dat_i[1] , wb_rst_i, _132_ };
  assign _035_ = 8'h54 >> { \byte_controller.read , \byte_controller.write , wb_rst_i };
  assign _026_ = 16'hfdec >> { \byte_controller.bit_controller.clk_cnt[2] , \wb_dat_i[2] , wb_rst_i, _132_ };
  assign _027_ = 16'hfdec >> { \byte_controller.bit_controller.clk_cnt[3] , \wb_dat_i[3] , wb_rst_i, _132_ };
  assign _028_ = 16'hfdec >> { \byte_controller.bit_controller.clk_cnt[4] , \wb_dat_i[4] , wb_rst_i, _132_ };
  assign _029_ = 16'hfdec >> { \byte_controller.bit_controller.clk_cnt[5] , \wb_dat_i[5] , wb_rst_i, _132_ };
  assign _030_ = 16'hfdec >> { \byte_controller.bit_controller.clk_cnt[6] , \wb_dat_i[6] , wb_rst_i, _132_ };
  assign _031_ = 16'hfdec >> { \byte_controller.bit_controller.clk_cnt[7] , \wb_dat_i[7] , wb_rst_i, _132_ };
  assign _009_ = 16'h3120 >> { \ctr[0] , \wb_dat_i[0] , wb_rst_i, _133_ };
  assign _133_ = 16'h0008 >> { \wb_adr_i[0] , \wb_adr_i[2] , _128_, \wb_adr_i[1]  };
  assign _010_ = 16'h3120 >> { \ctr[1] , \wb_dat_i[1] , wb_rst_i, _133_ };
  assign _011_ = 16'h3120 >> { \ctr[2] , \wb_dat_i[2] , wb_rst_i, _133_ };
  assign _034_ = 4'h2 >> { wb_rst_i, \byte_controller.ack_out  };
  assign _012_ = 16'h3120 >> { \ctr[3] , \wb_dat_i[3] , wb_rst_i, _133_ };
  assign _013_ = 16'h3120 >> { \ctr[4] , \wb_dat_i[4] , wb_rst_i, _133_ };
  assign _014_ = 16'h3120 >> { \ctr[5] , \wb_dat_i[5] , wb_rst_i, _133_ };
  assign _015_ = 16'h3120 >> { ien, \wb_dat_i[6] , wb_rst_i, _133_ };
  assign _016_ = 16'h3120 >> { \byte_controller.bit_controller.ena , \wb_dat_i[7] , wb_rst_i, _133_ };
  assign _036_ = 16'h3120 >> { \byte_controller.din[0] , \wb_dat_i[0] , wb_rst_i, _134_ };
  assign _134_ = 16'h0080 >> { \wb_adr_i[2] , \wb_adr_i[0] , _128_, \wb_adr_i[1]  };
  assign _037_ = 16'h3120 >> { \byte_controller.din[1] , \wb_dat_i[1] , wb_rst_i, _134_ };
  assign _038_ = 16'h3120 >> { \byte_controller.din[2] , \wb_dat_i[2] , wb_rst_i, _134_ };
  assign _039_ = 16'h3120 >> { \byte_controller.din[3] , \wb_dat_i[3] , wb_rst_i, _134_ };
  assign _000_ = 16'h4454 >> { \byte_controller.start , al, \byte_controller.bit_controller.al , wb_rst_i };
  assign _040_ = 16'h3120 >> { \byte_controller.din[4] , \wb_dat_i[4] , wb_rst_i, _134_ };
  assign _041_ = 16'h3120 >> { \byte_controller.din[5] , \wb_dat_i[5] , wb_rst_i, _134_ };
  assign _042_ = 16'h3120 >> { \byte_controller.din[6] , \wb_dat_i[6] , wb_rst_i, _134_ };
  assign _043_ = 16'h3120 >> { \byte_controller.din[7] , \wb_dat_i[7] , wb_rst_i, _134_ };
  assign _045_ = 64'h2aaa22aa0aaa02aa >> { \byte_controller.din[0] , iack, \wb_adr_i[2] , \wb_adr_i[0] , \wb_adr_i[1] , _135_ };
  assign _135_ = 64'hffaa3f2afda83d28 >> { irq_flag, \byte_controller.dout[0] , _136_, \wb_adr_i[1] , \wb_adr_i[0] , \wb_adr_i[2]  };
  assign _136_ = 32'd4225362632 >> { \byte_controller.bit_controller.clk_cnt[0] , \ctr[0] , \byte_controller.bit_controller.clk_cnt[8] , \wb_adr_i[0] , \wb_adr_i[1]  };
  assign _046_ = 32'd572654114 >> { \byte_controller.dout[1] , \wb_adr_i[1] , \wb_adr_i[0] , _137_, _138_ };
  assign _137_ = 64'h0004020601050307 >> { \byte_controller.bit_controller.clk_cnt[1] , \ctr[1] , \byte_controller.bit_controller.clk_cnt[9] , \wb_adr_i[2] , \wb_adr_i[0] , \wb_adr_i[1]  };
  assign _138_ = 64'h7f3f5f1f6f2f4f0f >> { tip, \cr[1] , \byte_controller.din[1] , \wb_adr_i[2] , \wb_adr_i[0] , \wb_adr_i[1]  };
  assign _005_ = 16'h3120 >> { \byte_controller.write , \wb_dat_i[4] , _127_, _129_ };
  assign _050_ = 32'd572654114 >> { \byte_controller.dout[5] , \wb_adr_i[1] , \wb_adr_i[0] , _139_, _140_ };
  assign _139_ = 64'h0004020601050307 >> { \byte_controller.bit_controller.clk_cnt[5] , \ctr[5] , \byte_controller.bit_controller.clk_cnt[13] , \wb_adr_i[2] , \wb_adr_i[0] , \wb_adr_i[1]  };
  assign _140_ = 64'h7f3f5f1f6f2f4f0f >> { al, \byte_controller.read , \byte_controller.din[5] , \wb_adr_i[2] , \wb_adr_i[0] , \wb_adr_i[1]  };
  assign _051_ = 64'h2aaa22aa0aaa02aa >> { \byte_controller.din[6] , \byte_controller.stop , \wb_adr_i[2] , \wb_adr_i[0] , \wb_adr_i[1] , _141_ };
  assign _141_ = 64'hffaa3f2afda83d28 >> { \byte_controller.bit_controller.busy , \byte_controller.dout[6] , _142_, \wb_adr_i[1] , \wb_adr_i[0] , \wb_adr_i[2]  };
  assign _142_ = 32'd4225362632 >> { \byte_controller.bit_controller.clk_cnt[6] , ien, \byte_controller.bit_controller.clk_cnt[14] , \wb_adr_i[0] , \wb_adr_i[1]  };
  assign _052_ = 64'he4e4e4e400e4e4e4 >> { \byte_controller.dout[7] , \wb_adr_i[1] , \wb_adr_i[0] , _144_, _143_, \wb_adr_i[2]  };
  assign _143_ = 32'd4225362632 >> { \byte_controller.bit_controller.clk_cnt[7] , \byte_controller.bit_controller.ena , \byte_controller.bit_controller.clk_cnt[15] , \wb_adr_i[0] , \wb_adr_i[1]  };
  assign _144_ = 32'd1934713408 >> { rxack, \byte_controller.start , \byte_controller.din[7] , \wb_adr_i[0] , \wb_adr_i[1]  };
  assign _099_ = 16'haaa2 >> { _172_, _171_, _149_, _157_ };
  assign _127_ = 16'hbbba >> { \byte_controller.cmd_ack , \byte_controller.bit_controller.al , _128_, wb_rst_i };
  assign _145_ = 8'h80 >> { _146_, _147_, _148_ };
  assign _146_ = 16'h0001 >> { \byte_controller.bit_controller.c_state[2] , \byte_controller.bit_controller.c_state[3] , \byte_controller.bit_controller.c_state[0] , \byte_controller.bit_controller.c_state[1]  };
  assign _147_ = 16'h0001 >> { \byte_controller.bit_controller.c_state[7] , \byte_controller.bit_controller.c_state[4] , \byte_controller.bit_controller.c_state[5] , \byte_controller.bit_controller.c_state[6]  };
  assign _148_ = 32'd1 >> { \byte_controller.bit_controller.c_state[16] , \byte_controller.bit_controller.c_state[15] , \byte_controller.bit_controller.c_state[13] , \byte_controller.bit_controller.c_state[14] , \byte_controller.bit_controller.c_state[12]  };
  assign _149_ = 16'h5515 >> { \byte_controller.bit_controller.c_state[5] , \byte_controller.bit_controller.c_state[4] , _153_, _150_ };
  assign _150_ = 32'd2147483648 >> { _146_, _147_, _151_, _152_, \byte_controller.bit_controller.c_state[16]  };
  assign _151_ = 4'h1 >> { \byte_controller.bit_controller.c_state[13] , \byte_controller.bit_controller.c_state[12]  };
  assign _152_ = 64'h0000000000000001 >> { \byte_controller.bit_controller.c_state[15] , \byte_controller.bit_controller.c_state[14] , \byte_controller.bit_controller.c_state[8] , \byte_controller.bit_controller.c_state[10] , \byte_controller.bit_controller.c_state[11] , \byte_controller.bit_controller.c_state[9]  };
  assign _153_ = 16'h8000 >> { _154_, _151_, _152_, _155_ };
  assign _154_ = 4'h1 >> { \byte_controller.bit_controller.c_state[7] , \byte_controller.bit_controller.c_state[6]  };
  assign _128_ = 8'h80 >> { wb_cyc_i, wb_stb_i, wb_we_i };
  assign _155_ = 32'd1 >> { \byte_controller.bit_controller.c_state[16] , \byte_controller.bit_controller.c_state[2] , \byte_controller.bit_controller.c_state[3] , \byte_controller.bit_controller.c_state[0] , \byte_controller.bit_controller.c_state[1]  };
  assign _156_ = 8'h01 >> { \byte_controller.bit_controller.c_state[16] , \byte_controller.bit_controller.c_state[15] , \byte_controller.bit_controller.c_state[14]  };
  assign _157_ = 4'h8 >> { _158_, \byte_controller.bit_controller.clk_en  };
  assign _158_ = 4'h1 >> { wb_rst_i, \byte_controller.bit_controller.al  };
  assign _123_ = 64'h5111111111111111 >> { _159_, _167_, _198_, _170_, \byte_controller.bit_controller.clk_en , _177_ };
  assign _159_ = 8'h01 >> { _160_, _162_, _164_ };
  assign _160_ = 64'h0000000080000000 >> { \byte_controller.bit_controller.c_state[12] , _146_, _147_, _156_, \byte_controller.bit_controller.c_state[13] , _152_ };
  assign _161_ = 32'd32768 >> { \byte_controller.bit_controller.c_state[16] , _147_, _151_, _152_, _146_ };
  assign _162_ = 16'h8000 >> { _146_, _147_, _148_, _163_ };
  assign _163_ = 16'h0002 >> { \byte_controller.bit_controller.c_state[8] , \byte_controller.bit_controller.c_state[10] , \byte_controller.bit_controller.c_state[11] , \byte_controller.bit_controller.c_state[9]  };
  assign _129_ = 4'h8 >> { _128_, _130_ };
  assign _164_ = 64'h0000000080000000 >> { \byte_controller.bit_controller.c_state[1] , _151_, _152_, _166_, \byte_controller.bit_controller.c_state[0] , _165_ };
  assign _165_ = 4'h1 >> { \byte_controller.bit_controller.c_state[2] , \byte_controller.bit_controller.c_state[3]  };
  assign _166_ = 32'd1 >> { \byte_controller.bit_controller.c_state[16] , \byte_controller.bit_controller.c_state[7] , \byte_controller.bit_controller.c_state[4] , \byte_controller.bit_controller.c_state[5] , \byte_controller.bit_controller.c_state[6]  };
  assign _167_ = 8'hab >> { _168_, _153_, \byte_controller.bit_controller.c_state[4]  };
  assign _168_ = 64'h0000000080000000 >> { \byte_controller.bit_controller.c_state[7] , _151_, _152_, _155_, _169_, \byte_controller.bit_controller.c_state[6]  };
  assign _169_ = 4'h1 >> { \byte_controller.bit_controller.c_state[4] , \byte_controller.bit_controller.c_state[5]  };
  assign _170_ = 32'd2 >> { _150_, _171_, _172_, _174_, _264_ };
  assign _171_ = 32'd2147483648 >> { _146_, _147_, _156_, \byte_controller.bit_controller.c_state[12] , _180_ };
  assign _172_ = 32'd2147483648 >> { _146_, _147_, _148_, _173_, \byte_controller.bit_controller.c_state[8]  };
  assign _173_ = 8'h01 >> { \byte_controller.bit_controller.c_state[10] , \byte_controller.bit_controller.c_state[11] , \byte_controller.bit_controller.c_state[9]  };
  assign _266_ = 1'h0;
  assign _267_ = 1'h1;
  assign _268_ = 1'hx;
  assign sda_pad_o = _266_;
  assign scl_pad_o = _266_;
  assign \ctr[7]  = \byte_controller.bit_controller.ena ;
  assign \ctr[6]  = ien;
  assign \cr[7]  = \byte_controller.start ;
  assign \cr[6]  = \byte_controller.stop ;
  assign \cr[5]  = \byte_controller.read ;
  assign \cr[4]  = \byte_controller.write ;
  assign \cr[3]  = ack;
  assign \cr[0]  = iack;
endmodule
