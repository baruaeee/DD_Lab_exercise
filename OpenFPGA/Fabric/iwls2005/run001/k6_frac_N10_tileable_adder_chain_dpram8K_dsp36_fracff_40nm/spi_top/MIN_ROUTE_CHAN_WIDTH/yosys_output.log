/home/cae_sajib/Desktop/OpenFPGA/build/yosys/bin/yosys yosys.ys

 /----------------------------------------------------------------------------\
 |  yosys -- Yosys Open SYnthesis Suite                                       |
 |  Copyright (C) 2012 - 2025  Claire Xenia Wolf <claire@yosyshq.com>         |
 |  Distributed under an ISC-like license, type "license" to see terms        |
 \----------------------------------------------------------------------------/
 Yosys 0.54+29 (git sha1 7b0c1fe49, g++ 11.4.0-1ubuntu1~22.04 -fPIC -O3)

-- Executing script file `yosys.ys' --

1. Executing Verilog-2005 frontend: ./benchmark/spi_top.v
Parsing Verilog input from `./benchmark/spi_top.v' to AST representation.
Generating RTLIL representation for module `\spi_top'.
Note: Assuming pure combinatorial block at ./benchmark/spi_top.v:113.3-139.6 in
compliance with IEC 62142(E):2005 / IEEE Std. 1364.1(E):2002. Recommending
use of @* instead of @(...) for better match of synthesis and simulation.
Successfully finished Verilog frontend.

2. Executing Verilog-2005 frontend: ./benchmark/timescale.v
Parsing Verilog input from `./benchmark/timescale.v' to AST representation.
Successfully finished Verilog frontend.

3. Executing Verilog-2005 frontend: ./benchmark/spi_clgen.v
Parsing Verilog input from `./benchmark/spi_clgen.v' to AST representation.
Generating RTLIL representation for module `\spi_clgen'.
Successfully finished Verilog frontend.

4. Executing Verilog-2005 frontend: ./benchmark/spi_shift.v
Parsing Verilog input from `./benchmark/spi_shift.v' to AST representation.
Generating RTLIL representation for module `\spi_shift'.
Successfully finished Verilog frontend.

5. Executing Verilog-2005 frontend: ./benchmark/spi_defines.v
Parsing Verilog input from `./benchmark/spi_defines.v' to AST representation.
Successfully finished Verilog frontend.

6. Executing Verilog-2005 frontend: /home/cae_sajib/Desktop/OpenFPGA/openfpga_flow/openfpga_yosys_techlib/k6_frac_N10_tileable_adder_chain_dpram8K_dsp36_fracff_40nm_cell_sim.v
Parsing Verilog input from `/home/cae_sajib/Desktop/OpenFPGA/openfpga_flow/openfpga_yosys_techlib/k6_frac_N10_tileable_adder_chain_dpram8K_dsp36_fracff_40nm_cell_sim.v' to AST representation.
Generating RTLIL representation for module `\dpram_1024x8_core'.
Generating RTLIL representation for module `\dpram_1024x8'.
Generating RTLIL representation for module `\mult_36'.
Generating RTLIL representation for module `\dff'.
Generating RTLIL representation for module `\dffr'.
Generating RTLIL representation for module `\dffs'.
Generating RTLIL representation for module `\dffrn'.
Generating RTLIL representation for module `\dffsn'.
Successfully finished Verilog frontend.

7. Executing HIERARCHY pass (managing design hierarchy).

7.1. Analyzing design hierarchy..
Top module:  \spi_top
Used module:     \spi_shift
Used module:     \spi_clgen

7.2. Analyzing design hierarchy..
Top module:  \spi_top
Used module:     \spi_shift
Used module:     \spi_clgen
Removed 0 unused modules.

8. Executing PROC pass (convert processes to netlists).

8.1. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

8.2. Executing PROC_RMDEAD pass (remove dead branches from decision trees).
Marked 21 switch rules as full_case in process $proc$./benchmark/spi_shift.v:126$129 in module spi_shift.
Marked 1 switch rules as full_case in process $proc$./benchmark/spi_shift.v:117$123 in module spi_shift.
Marked 2 switch rules as full_case in process $proc$./benchmark/spi_shift.v:106$118 in module spi_shift.
Marked 2 switch rules as full_case in process $proc$./benchmark/spi_shift.v:92$112 in module spi_shift.
Marked 1 switch rules as full_case in process $proc$./benchmark/spi_clgen.v:94$67 in module spi_clgen.
Marked 1 switch rules as full_case in process $proc$./benchmark/spi_clgen.v:85$60 in module spi_clgen.
Marked 2 switch rules as full_case in process $proc$./benchmark/spi_clgen.v:71$56 in module spi_clgen.
Marked 1 switch rules as full_case in process $proc$./benchmark/spi_top.v:236$43 in module spi_top.
Marked 2 switch rules as full_case in process $proc$./benchmark/spi_top.v:212$36 in module spi_top.
Marked 1 switch rules as full_case in process $proc$./benchmark/spi_top.v:174$32 in module spi_top.
Marked 2 switch rules as full_case in process $proc$./benchmark/spi_top.v:163$28 in module spi_top.
Marked 1 switch rules as full_case in process $proc$./benchmark/spi_top.v:151$24 in module spi_top.
Marked 1 switch rules as full_case in process $proc$./benchmark/spi_top.v:142$23 in module spi_top.
Marked 1 switch rules as full_case in process $proc$./benchmark/spi_top.v:113$22 in module spi_top.
Removed a total of 0 dead cases.

8.3. Executing PROC_PRUNE pass (remove redundant assignments in processes).
Removed 8 redundant assignments.
Promoted 4 assignments to connections.

8.4. Executing PROC_INIT pass (extract init attributes).

8.5. Executing PROC_ARST pass (detect async resets in processes).
Found async reset \rst in `\spi_shift.$proc$./benchmark/spi_shift.v:126$129'.
Found async reset \rst in `\spi_shift.$proc$./benchmark/spi_shift.v:117$123'.
Found async reset \rst in `\spi_shift.$proc$./benchmark/spi_shift.v:106$118'.
Found async reset \rst in `\spi_shift.$proc$./benchmark/spi_shift.v:92$112'.
Found async reset \rst in `\spi_clgen.$proc$./benchmark/spi_clgen.v:94$67'.
Found async reset \rst in `\spi_clgen.$proc$./benchmark/spi_clgen.v:85$60'.
Found async reset \rst in `\spi_clgen.$proc$./benchmark/spi_clgen.v:71$56'.
Found async reset \wb_rst_i in `\spi_top.$proc$./benchmark/spi_top.v:236$43'.
Found async reset \wb_rst_i in `\spi_top.$proc$./benchmark/spi_top.v:212$36'.
Found async reset \wb_rst_i in `\spi_top.$proc$./benchmark/spi_top.v:174$32'.
Found async reset \wb_rst_i in `\spi_top.$proc$./benchmark/spi_top.v:163$28'.
Found async reset \wb_rst_i in `\spi_top.$proc$./benchmark/spi_top.v:151$24'.
Found async reset \wb_rst_i in `\spi_top.$proc$./benchmark/spi_top.v:142$23'.

8.6. Executing PROC_ROM pass (convert switches to ROMs).
Converted 0 switches.
<suppressed ~36 debug messages>

8.7. Executing PROC_MUX pass (convert decision trees to multiplexers).
Creating decoders for process `\spi_shift.$proc$./benchmark/spi_shift.v:126$129'.
     1/44: $17$lookahead\data$128[127:0]$161 [127:120]
     2/44: $20$lookahead\data$128[111:104]$164
     3/44: $19$lookahead\data$128[119:112]$163
     4/44: $18$lookahead\data$128[127:120]$162
     5/44: $17$lookahead\data$128[127:0]$161 [95:0]
     6/44: $17$lookahead\data$128[127:0]$161 [103:96]
     7/44: $17$lookahead\data$128[127:0]$161 [111:104]
     8/44: $17$lookahead\data$128[127:0]$161 [119:112]
     9/44: $21$lookahead\data$128[103:96]$165
    10/44: $5$bitselwrite$pos$./benchmark/spi_shift.v:234$89[6:0]$160
    11/44: $12$lookahead\data$128[127:0]$153 [127:96]
    12/44: $12$lookahead\data$128[127:0]$153 [63:0]
    13/44: $15$lookahead\data$128[79:72]$156
    14/44: $14$lookahead\data$128[87:80]$155
    15/44: $13$lookahead\data$128[95:88]$154
    16/44: $12$lookahead\data$128[127:0]$153 [95:88]
    17/44: $12$lookahead\data$128[127:0]$153 [71:64]
    18/44: $12$lookahead\data$128[127:0]$153 [79:72]
    19/44: $12$lookahead\data$128[127:0]$153 [87:80]
    20/44: $16$lookahead\data$128[71:64]$157
    21/44: $4$bitselwrite$pos$./benchmark/spi_shift.v:234$89[6:0]$152
    22/44: $7$lookahead\data$128[127:0]$145 [127:64]
    23/44: $7$lookahead\data$128[127:0]$145 [31:0]
    24/44: $10$lookahead\data$128[47:40]$148
    25/44: $9$lookahead\data$128[55:48]$147
    26/44: $8$lookahead\data$128[63:56]$146
    27/44: $7$lookahead\data$128[127:0]$145 [63:56]
    28/44: $7$lookahead\data$128[127:0]$145 [39:32]
    29/44: $7$lookahead\data$128[127:0]$145 [47:40]
    30/44: $7$lookahead\data$128[127:0]$145 [55:48]
    31/44: $11$lookahead\data$128[39:32]$149
    32/44: $3$bitselwrite$pos$./benchmark/spi_shift.v:234$89[6:0]$144
    33/44: $2$lookahead\data$128[127:0]$137 [127:32]
    34/44: $5$lookahead\data$128[15:8]$140
    35/44: $4$lookahead\data$128[23:16]$139
    36/44: $3$lookahead\data$128[31:24]$138
    37/44: $6$lookahead\data$128[7:0]$141
    38/44: $2$lookahead\data$128[127:0]$137 [7:0]
    39/44: $2$lookahead\data$128[127:0]$137 [15:8]
    40/44: $2$lookahead\data$128[127:0]$137 [23:16]
    41/44: $2$lookahead\data$128[127:0]$137 [31:24]
    42/44: $2$bitselwrite$pos$./benchmark/spi_shift.v:234$89[6:0]$136
    43/44: $1$lookahead\data$128[127:0]$133
    44/44: $1$bitselwrite$pos$./benchmark/spi_shift.v:234$89[6:0]$132
Creating decoders for process `\spi_shift.$proc$./benchmark/spi_shift.v:117$123'.
     1/1: $0\s_out[0:0]
Creating decoders for process `\spi_shift.$proc$./benchmark/spi_shift.v:106$118'.
     1/1: $0\tip[0:0]
Creating decoders for process `\spi_shift.$proc$./benchmark/spi_shift.v:92$112'.
     1/1: $0\cnt[7:0]
Creating decoders for process `\spi_clgen.$proc$./benchmark/spi_clgen.v:94$67'.
     1/2: $0\neg_edge[0:0]
     2/2: $0\pos_edge[0:0]
Creating decoders for process `\spi_clgen.$proc$./benchmark/spi_clgen.v:85$60'.
     1/1: $0\clk_out[0:0]
Creating decoders for process `\spi_clgen.$proc$./benchmark/spi_clgen.v:71$56'.
     1/1: $0\cnt[15:0]
Creating decoders for process `\spi_top.$proc$./benchmark/spi_top.v:236$43'.
     1/1: $0\ss[7:0]
Creating decoders for process `\spi_top.$proc$./benchmark/spi_top.v:212$36'.
     1/3: $0\ctrl[13:0] [13:9]
     2/3: $0\ctrl[13:0] [8]
     3/3: $0\ctrl[13:0] [7:0]
Creating decoders for process `\spi_top.$proc$./benchmark/spi_top.v:174$32'.
     1/2: $0\divider[15:0] [15:8]
     2/2: $0\divider[15:0] [7:0]
Creating decoders for process `\spi_top.$proc$./benchmark/spi_top.v:163$28'.
     1/1: $0\wb_int_o[0:0]
Creating decoders for process `\spi_top.$proc$./benchmark/spi_top.v:151$24'.
     1/1: $0\wb_ack_o[0:0]
Creating decoders for process `\spi_top.$proc$./benchmark/spi_top.v:142$23'.
     1/1: $0\wb_dat_o[31:0]
Creating decoders for process `\spi_top.$proc$./benchmark/spi_top.v:113$22'.
     1/1: $1\wb_dat[31:0]

8.8. Executing PROC_DLATCH pass (convert process syncs to latches).
No latch inferred for signal `\spi_top.\wb_dat' from process `\spi_top.$proc$./benchmark/spi_top.v:113$22'.

8.9. Executing PROC_DFF pass (convert process syncs to FFs).
Creating register for signal `\spi_shift.\data' using process `\spi_shift.$proc$./benchmark/spi_shift.v:126$129'.
  created $adff cell `$procdff$609' with positive edge clock and positive level reset.
Creating register for signal `\spi_shift.$bitselwrite$pos$./benchmark/spi_shift.v:234$89' using process `\spi_shift.$proc$./benchmark/spi_shift.v:126$129'.
  created $adff cell `$procdff$612' with positive edge clock and positive level reset.
Creating register for signal `\spi_shift.$lookahead\data$128' using process `\spi_shift.$proc$./benchmark/spi_shift.v:126$129'.
  created $adff cell `$procdff$615' with positive edge clock and positive level reset.
Creating register for signal `\spi_shift.\s_out' using process `\spi_shift.$proc$./benchmark/spi_shift.v:117$123'.
  created $adff cell `$procdff$618' with positive edge clock and positive level reset.
Creating register for signal `\spi_shift.\tip' using process `\spi_shift.$proc$./benchmark/spi_shift.v:106$118'.
  created $adff cell `$procdff$621' with positive edge clock and positive level reset.
Creating register for signal `\spi_shift.\cnt' using process `\spi_shift.$proc$./benchmark/spi_shift.v:92$112'.
  created $adff cell `$procdff$624' with positive edge clock and positive level reset.
Creating register for signal `\spi_clgen.\pos_edge' using process `\spi_clgen.$proc$./benchmark/spi_clgen.v:94$67'.
  created $adff cell `$procdff$627' with positive edge clock and positive level reset.
Creating register for signal `\spi_clgen.\neg_edge' using process `\spi_clgen.$proc$./benchmark/spi_clgen.v:94$67'.
  created $adff cell `$procdff$630' with positive edge clock and positive level reset.
Creating register for signal `\spi_clgen.\clk_out' using process `\spi_clgen.$proc$./benchmark/spi_clgen.v:85$60'.
  created $adff cell `$procdff$633' with positive edge clock and positive level reset.
Creating register for signal `\spi_clgen.\cnt' using process `\spi_clgen.$proc$./benchmark/spi_clgen.v:71$56'.
  created $adff cell `$procdff$636' with positive edge clock and positive level reset.
Creating register for signal `\spi_top.\ss' using process `\spi_top.$proc$./benchmark/spi_top.v:236$43'.
  created $adff cell `$procdff$639' with positive edge clock and positive level reset.
Creating register for signal `\spi_top.\ctrl' using process `\spi_top.$proc$./benchmark/spi_top.v:212$36'.
  created $adff cell `$procdff$642' with positive edge clock and positive level reset.
Creating register for signal `\spi_top.\divider' using process `\spi_top.$proc$./benchmark/spi_top.v:174$32'.
  created $adff cell `$procdff$645' with positive edge clock and positive level reset.
Creating register for signal `\spi_top.\wb_int_o' using process `\spi_top.$proc$./benchmark/spi_top.v:163$28'.
  created $adff cell `$procdff$648' with positive edge clock and positive level reset.
Creating register for signal `\spi_top.\wb_ack_o' using process `\spi_top.$proc$./benchmark/spi_top.v:151$24'.
  created $adff cell `$procdff$651' with positive edge clock and positive level reset.
Creating register for signal `\spi_top.\wb_dat_o' using process `\spi_top.$proc$./benchmark/spi_top.v:142$23'.
  created $adff cell `$procdff$654' with positive edge clock and positive level reset.

8.10. Executing PROC_MEMWR pass (convert process memory writes to cells).

8.11. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Found and cleaned up 20 empty switches in `\spi_shift.$proc$./benchmark/spi_shift.v:126$129'.
Removing empty process `spi_shift.$proc$./benchmark/spi_shift.v:126$129'.
Removing empty process `spi_shift.$proc$./benchmark/spi_shift.v:117$123'.
Found and cleaned up 2 empty switches in `\spi_shift.$proc$./benchmark/spi_shift.v:106$118'.
Removing empty process `spi_shift.$proc$./benchmark/spi_shift.v:106$118'.
Found and cleaned up 1 empty switch in `\spi_shift.$proc$./benchmark/spi_shift.v:92$112'.
Removing empty process `spi_shift.$proc$./benchmark/spi_shift.v:92$112'.
Removing empty process `spi_clgen.$proc$./benchmark/spi_clgen.v:94$67'.
Removing empty process `spi_clgen.$proc$./benchmark/spi_clgen.v:85$60'.
Found and cleaned up 1 empty switch in `\spi_clgen.$proc$./benchmark/spi_clgen.v:71$56'.
Removing empty process `spi_clgen.$proc$./benchmark/spi_clgen.v:71$56'.
Found and cleaned up 2 empty switches in `\spi_top.$proc$./benchmark/spi_top.v:236$43'.
Removing empty process `spi_top.$proc$./benchmark/spi_top.v:236$43'.
Found and cleaned up 4 empty switches in `\spi_top.$proc$./benchmark/spi_top.v:212$36'.
Removing empty process `spi_top.$proc$./benchmark/spi_top.v:212$36'.
Found and cleaned up 3 empty switches in `\spi_top.$proc$./benchmark/spi_top.v:174$32'.
Removing empty process `spi_top.$proc$./benchmark/spi_top.v:174$32'.
Found and cleaned up 2 empty switches in `\spi_top.$proc$./benchmark/spi_top.v:163$28'.
Removing empty process `spi_top.$proc$./benchmark/spi_top.v:163$28'.
Removing empty process `spi_top.$proc$./benchmark/spi_top.v:151$24'.
Removing empty process `spi_top.$proc$./benchmark/spi_top.v:142$23'.
Found and cleaned up 1 empty switch in `\spi_top.$proc$./benchmark/spi_top.v:113$22'.
Removing empty process `spi_top.$proc$./benchmark/spi_top.v:113$22'.
Cleaned up 36 empty switches.

8.12. Executing OPT_EXPR pass (perform const folding).
Optimizing module spi_shift.
<suppressed ~9 debug messages>
Optimizing module spi_clgen.
<suppressed ~5 debug messages>
Optimizing module spi_top.
<suppressed ~8 debug messages>

9. Executing FLATTEN pass (flatten design).
Deleting now unused module spi_shift.
Deleting now unused module spi_clgen.
<suppressed ~2 debug messages>

10. Executing TRIBUF pass.

11. Executing OPT_EXPR pass (perform const folding).
Optimizing module spi_top.
<suppressed ~1 debug messages>

12. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \spi_top..
Removed 13 unused cells and 254 unused wires.
<suppressed ~14 debug messages>

13. Executing DEMINOUT pass (demote inout ports to input or output).

14. Executing OPT pass (performing simple optimizations).

14.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module spi_top.

14.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\spi_top'.
<suppressed ~111 debug messages>
Removed a total of 37 cells.

14.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \spi_top..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
    dead port 1/2 on $mux $flatten\shift.$procmux$194.
    dead port 1/2 on $mux $flatten\shift.$procmux$197.
    dead port 1/2 on $mux $flatten\shift.$procmux$200.
    dead port 2/2 on $mux $flatten\shift.$procmux$206.
    dead port 1/2 on $mux $flatten\shift.$procmux$209.
    dead port 1/2 on $mux $flatten\shift.$procmux$212.
    dead port 1/2 on $mux $flatten\shift.$procmux$215.
    dead port 2/2 on $mux $flatten\shift.$procmux$221.
    dead port 1/2 on $mux $flatten\shift.$procmux$224.
    dead port 1/2 on $mux $flatten\shift.$procmux$227.
    dead port 1/2 on $mux $flatten\shift.$procmux$230.
    dead port 2/2 on $mux $flatten\shift.$procmux$236.
    dead port 1/2 on $mux $flatten\shift.$procmux$239.
    dead port 1/2 on $mux $flatten\shift.$procmux$242.
    dead port 1/2 on $mux $flatten\shift.$procmux$245.
    dead port 1/2 on $mux $flatten\shift.$procmux$251.
    dead port 1/2 on $mux $flatten\shift.$procmux$254.
    dead port 1/2 on $mux $flatten\shift.$procmux$257.
    dead port 1/2 on $mux $flatten\shift.$procmux$263.
    dead port 1/2 on $mux $flatten\shift.$procmux$266.
    dead port 1/2 on $mux $flatten\shift.$procmux$269.
    dead port 1/2 on $mux $flatten\shift.$procmux$275.
    dead port 1/2 on $mux $flatten\shift.$procmux$278.
    dead port 1/2 on $mux $flatten\shift.$procmux$281.
    dead port 1/2 on $mux $flatten\shift.$procmux$287.
    dead port 1/2 on $mux $flatten\shift.$procmux$290.
    dead port 1/2 on $mux $flatten\shift.$procmux$293.
    dead port 2/2 on $mux $flatten\shift.$procmux$299.
    dead port 1/2 on $mux $flatten\shift.$procmux$302.
    dead port 1/2 on $mux $flatten\shift.$procmux$305.
    dead port 1/2 on $mux $flatten\shift.$procmux$308.
    dead port 1/2 on $mux $flatten\shift.$procmux$326.
    dead port 1/2 on $mux $flatten\shift.$procmux$329.
    dead port 1/2 on $mux $flatten\shift.$procmux$335.
    dead port 1/2 on $mux $flatten\shift.$procmux$338.
    dead port 2/2 on $mux $flatten\shift.$procmux$344.
    dead port 1/2 on $mux $flatten\shift.$procmux$347.
    dead port 1/2 on $mux $flatten\shift.$procmux$350.
    dead port 2/2 on $mux $flatten\shift.$procmux$356.
    dead port 1/2 on $mux $flatten\shift.$procmux$359.
    dead port 1/2 on $mux $flatten\shift.$procmux$362.
    dead port 2/2 on $mux $flatten\shift.$procmux$368.
    dead port 1/2 on $mux $flatten\shift.$procmux$371.
    dead port 1/2 on $mux $flatten\shift.$procmux$374.
    dead port 1/2 on $mux $flatten\shift.$procmux$380.
    dead port 1/2 on $mux $flatten\shift.$procmux$383.
    dead port 1/2 on $mux $flatten\shift.$procmux$389.
    dead port 1/2 on $mux $flatten\shift.$procmux$392.
    dead port 1/2 on $mux $flatten\shift.$procmux$398.
    dead port 1/2 on $mux $flatten\shift.$procmux$401.
    dead port 1/2 on $mux $flatten\shift.$procmux$407.
    dead port 1/2 on $mux $flatten\shift.$procmux$410.
    dead port 2/2 on $mux $flatten\shift.$procmux$416.
    dead port 1/2 on $mux $flatten\shift.$procmux$419.
    dead port 1/2 on $mux $flatten\shift.$procmux$422.
    dead port 1/2 on $mux $flatten\shift.$procmux$437.
    dead port 1/2 on $mux $flatten\shift.$procmux$443.
    dead port 2/2 on $mux $flatten\shift.$procmux$449.
    dead port 1/2 on $mux $flatten\shift.$procmux$452.
    dead port 2/2 on $mux $flatten\shift.$procmux$458.
    dead port 1/2 on $mux $flatten\shift.$procmux$461.
    dead port 2/2 on $mux $flatten\shift.$procmux$467.
    dead port 1/2 on $mux $flatten\shift.$procmux$470.
    dead port 1/2 on $mux $flatten\shift.$procmux$476.
    dead port 1/2 on $mux $flatten\shift.$procmux$482.
    dead port 1/2 on $mux $flatten\shift.$procmux$488.
    dead port 1/2 on $mux $flatten\shift.$procmux$494.
    dead port 2/2 on $mux $flatten\shift.$procmux$500.
    dead port 1/2 on $mux $flatten\shift.$procmux$503.
    dead port 2/2 on $mux $flatten\shift.$procmux$518.
    dead port 2/2 on $mux $flatten\shift.$procmux$524.
    dead port 2/2 on $mux $flatten\shift.$procmux$530.
    dead port 2/2 on $mux $flatten\shift.$procmux$536.
Removed 73 multiplexer ports.
<suppressed ~27 debug messages>

14.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \spi_top.
Performed a total of 0 changes.

14.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\spi_top'.
Removed a total of 0 cells.

14.6. Executing OPT_DFF pass (perform DFF optimizations).

14.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \spi_top..
Removed 0 unused cells and 110 unused wires.
<suppressed ~1 debug messages>

14.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module spi_top.

14.9. Rerunning OPT passes. (Maybe there is more to do..)

14.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \spi_top..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~27 debug messages>

14.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \spi_top.
Performed a total of 0 changes.

14.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\spi_top'.
Removed a total of 0 cells.

14.13. Executing OPT_DFF pass (perform DFF optimizations).

14.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \spi_top..

14.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module spi_top.

14.16. Finished OPT passes. (There is nothing left to do.)

15. Executing OPT_EXPR pass (perform const folding).
Optimizing module spi_top.

16. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \spi_top..

17. Executing CHECK pass (checking for obvious problems).
Checking module spi_top...
Found and reported 0 problems.

18. Executing OPT pass (performing simple optimizations).

18.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module spi_top.

18.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\spi_top'.
Removed a total of 0 cells.

18.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \spi_top..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~27 debug messages>

18.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \spi_top.
Performed a total of 0 changes.

18.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\spi_top'.
Removed a total of 0 cells.

18.6. Executing OPT_DFF pass (perform DFF optimizations).

18.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \spi_top..

18.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module spi_top.

18.9. Finished OPT passes. (There is nothing left to do.)

19. Executing WREDUCE pass (reducing word size of cells).
Removed top 2 bits (of 3) from port B of cell spi_top.$eq$./benchmark/spi_top.v:107$11 ($eq).
Removed top 1 bits (of 3) from port B of cell spi_top.$eq$./benchmark/spi_top.v:108$14 ($eq).
Removed top 1 bits (of 3) from port B of cell spi_top.$eq$./benchmark/spi_top.v:109$17 ($eq).
Removed top 7 bits (of 8) from port B of cell spi_top.$or$./benchmark/spi_top.v:219$40 ($or).
Removed top 15 bits (of 16) from port B of cell spi_top.$flatten\clgen.$sub$./benchmark/spi_clgen.v:80$59 ($sub).
Removed top 15 bits (of 16) from port B of cell spi_top.$flatten\clgen.$eq$./benchmark/spi_clgen.v:68$55 ($eq).
Converting cell spi_top.$flatten\shift.$neg$./benchmark/spi_shift.v:0$166 ($neg) from signed to unsigned.
Removed top 1 bits (of 8) from port A of cell spi_top.$flatten\shift.$neg$./benchmark/spi_shift.v:0$166 ($neg).
Removed top 1 bits (of 8) from mux cell spi_top.$flatten\shift.$ternary$./benchmark/spi_shift.v:83$102 ($mux).
Removed top 1 bits (of 8) from mux cell spi_top.$flatten\shift.$ternary$./benchmark/spi_shift.v:84$101 ($mux).
Removed top 1 bits (of 8) from port Y of cell spi_top.$flatten\shift.$sub$./benchmark/spi_shift.v:83$99 ($sub).
Removed top 1 bits (of 8) from port A of cell spi_top.$flatten\shift.$sub$./benchmark/spi_shift.v:83$99 ($sub).
Removed top 1 bits (of 8) from port B of cell spi_top.$flatten\shift.$sub$./benchmark/spi_shift.v:83$99 ($sub).
Removed top 1 bits (of 8) from mux cell spi_top.$flatten\shift.$ternary$./benchmark/spi_shift.v:83$98 ($mux).
Removed top 7 bits (of 8) from port B of cell spi_top.$flatten\shift.$add$./benchmark/spi_shift.v:83$97 ($add).
Removed top 1 bits (of 8) from port Y of cell spi_top.$flatten\shift.$add$./benchmark/spi_shift.v:83$97 ($add).
Removed top 1 bits (of 8) from port A of cell spi_top.$flatten\shift.$add$./benchmark/spi_shift.v:83$97 ($add).
Removed top 1 bits (of 8) from mux cell spi_top.$flatten\shift.$ternary$./benchmark/spi_shift.v:82$94 ($mux).
Removed top 7 bits (of 8) from port B of cell spi_top.$flatten\shift.$sub$./benchmark/spi_shift.v:82$93 ($sub).
Removed top 1 bits (of 8) from port Y of cell spi_top.$flatten\shift.$sub$./benchmark/spi_shift.v:82$92 ($sub).
Removed top 1 bits (of 8) from port A of cell spi_top.$flatten\shift.$sub$./benchmark/spi_shift.v:82$92 ($sub).
Removed top 1 bits (of 8) from port B of cell spi_top.$flatten\shift.$sub$./benchmark/spi_shift.v:82$92 ($sub).
Removed top 1 bits (of 8) from wire spi_top.$flatten\shift.$add$./benchmark/spi_shift.v:83$97_Y.
Removed top 1 bits (of 8) from wire spi_top.$flatten\shift.$sub$./benchmark/spi_shift.v:82$92_Y.

20. Executing PEEPOPT pass (run peephole optimizers).

21. Executing PMUXTREE pass.

22. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \spi_top..
Removed 1 unused cells and 4 unused wires.
<suppressed ~2 debug messages>

23. Executing MEMORY_DFF pass (merging $dff cells to $memrd).

24. Executing WREDUCE pass (reducing word size of cells).

25. Executing TECHMAP pass (map to technology primitives).

25.1. Executing Verilog-2005 frontend: /home/cae_sajib/Desktop/OpenFPGA/build/yosys/bin/../share/yosys/mul2dsp.v
Parsing Verilog input from `/home/cae_sajib/Desktop/OpenFPGA/build/yosys/bin/../share/yosys/mul2dsp.v' to AST representation.
Generating RTLIL representation for module `\_80_mul'.
Generating RTLIL representation for module `\_90_soft_mul'.
Successfully finished Verilog frontend.

25.2. Executing Verilog-2005 frontend: /home/cae_sajib/Desktop/OpenFPGA/openfpga_flow/openfpga_yosys_techlib/k6_frac_N10_tileable_adder_chain_dpram8K_dsp36_40nm_dsp_map.v
Parsing Verilog input from `/home/cae_sajib/Desktop/OpenFPGA/openfpga_flow/openfpga_yosys_techlib/k6_frac_N10_tileable_adder_chain_dpram8K_dsp36_40nm_dsp_map.v' to AST representation.
Generating RTLIL representation for module `\mult_36x36'.
Successfully finished Verilog frontend.

25.3. Continuing TECHMAP pass.
No more expansions possible.
<suppressed ~5 debug messages>

26. Executing OPT_EXPR pass (perform const folding).

27. Executing WREDUCE pass (reducing word size of cells).
Warning: Selection "Extract" did not match any module.
Warning: Selection "arithmetic" did not match any module.
Warning: Selection "functions" did not match any module.

28. Executing TECHMAP pass (map to technology primitives).

28.1. Executing Verilog-2005 frontend: /home/cae_sajib/Desktop/OpenFPGA/build/yosys/bin/../share/yosys/techmap.v
Parsing Verilog input from `/home/cae_sajib/Desktop/OpenFPGA/build/yosys/bin/../share/yosys/techmap.v' to AST representation.
Generating RTLIL representation for module `\_90_simplemap_bool_ops'.
Generating RTLIL representation for module `\_90_simplemap_reduce_ops'.
Generating RTLIL representation for module `\_90_simplemap_logic_ops'.
Generating RTLIL representation for module `\_90_simplemap_compare_ops'.
Generating RTLIL representation for module `\_90_simplemap_various'.
Generating RTLIL representation for module `\_90_simplemap_registers'.
Generating RTLIL representation for module `\_90_shift_ops_shr_shl_sshl_sshr'.
Generating RTLIL representation for module `\_90_shift_shiftx'.
Generating RTLIL representation for module `\_90_fa'.
Generating RTLIL representation for module `\_90_lcu_brent_kung'.
Generating RTLIL representation for module `\_90_alu'.
Generating RTLIL representation for module `\_90_macc'.
Generating RTLIL representation for module `\_90_alumacc'.
Generating RTLIL representation for module `\$__div_mod_u'.
Generating RTLIL representation for module `\$__div_mod_trunc'.
Generating RTLIL representation for module `\_90_div'.
Generating RTLIL representation for module `\_90_mod'.
Generating RTLIL representation for module `\$__div_mod_floor'.
Generating RTLIL representation for module `\_90_divfloor'.
Generating RTLIL representation for module `\_90_modfloor'.
Generating RTLIL representation for module `\_90_pow'.
Generating RTLIL representation for module `\_90_pmux'.
Generating RTLIL representation for module `\_90_demux'.
Generating RTLIL representation for module `\_90_lut'.
Successfully finished Verilog frontend.

28.2. Continuing TECHMAP pass.
Using extmapper simplemap for cells of type $and.
Using extmapper simplemap for cells of type $eq.
Using extmapper simplemap for cells of type $logic_not.
Using extmapper simplemap for cells of type $mux.
Using extmapper simplemap for cells of type $not.
Using extmapper simplemap for cells of type $logic_and.
Using extmapper simplemap for cells of type $or.
Using extmapper simplemap for cells of type $adff.
Using extmapper simplemap for cells of type $logic_or.
Using extmapper simplemap for cells of type $reduce_or.
Running "alumacc" on wrapper $extern:wrap:$sub:A_SIGNED=0:A_WIDTH=16:B_SIGNED=0:B_WIDTH=1:Y_WIDTH=16:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$sub:A_SIGNED=0:A_WIDTH=16:B_SIGNED=0:B_WIDTH=1:Y_WIDTH=16:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$sub:A_SIGNED=0:A_WIDTH=16:B_SIGNED=0:B_WIDTH=1:Y_WIDTH=16:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $paramod$constmap:64761640e2b17d1e8cb070ce5f0360e7104dc981$paramod$259a30fd75d8b0b9efeac8fafbf600242707da8d\_90_shift_shiftx for cells of type $shift.
Using template $paramod$constmap:b6cee2adf0bc7bde657afc569a13a8c98a9e3ead$paramod$8224d043d49532f03ab660a9e2238b135d1af61e\_90_shift_shiftx for cells of type $shiftx.
Analyzing pattern of constant bits for this cell:
  Constant input on bit 0 of port A: 1'1
Creating constmapped module `$paramod$constmap:4fa7bfc18144607b02faa34986634cd2a4945945$paramod$259a30fd75d8b0b9efeac8fafbf600242707da8d\_90_shift_shiftx'.

28.15. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module $paramod$constmap:4fa7bfc18144607b02faa34986634cd2a4945945$paramod$259a30fd75d8b0b9efeac8fafbf600242707da8d\_90_shift_shiftx..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
    dead port 2/2 on $mux $procmux$2333.
    dead port 2/2 on $mux $procmux$2327.
    dead port 2/2 on $mux $procmux$2321.
    dead port 2/2 on $mux $procmux$2315.
    dead port 2/2 on $mux $procmux$2309.
    dead port 2/2 on $mux $procmux$2303.
    dead port 2/2 on $mux $procmux$2297.
Removed 7 multiplexer ports.
<suppressed ~565 debug messages>

28.16. Executing OPT_EXPR pass (perform const folding).
Optimizing module $paramod$constmap:4fa7bfc18144607b02faa34986634cd2a4945945$paramod$259a30fd75d8b0b9efeac8fafbf600242707da8d\_90_shift_shiftx.
<suppressed ~2 debug messages>
Removed 0 unused cells and 12 unused wires.
Using template $paramod$constmap:4fa7bfc18144607b02faa34986634cd2a4945945$paramod$259a30fd75d8b0b9efeac8fafbf600242707da8d\_90_shift_shiftx for cells of type $shift.
Running "alumacc" on wrapper $extern:wrap:$neg:A_SIGNED=0:A_WIDTH=7:Y_WIDTH=8:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$neg:A_SIGNED=0:A_WIDTH=7:Y_WIDTH=8:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$neg:A_SIGNED=0:A_WIDTH=7:Y_WIDTH=8:394426c56d1a028ba8fdd5469b163e04011def47.
Running "alumacc" on wrapper $extern:wrap:$sub:A_SIGNED=0:A_WIDTH=7:B_SIGNED=0:B_WIDTH=7:Y_WIDTH=7:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$sub:A_SIGNED=0:A_WIDTH=7:B_SIGNED=0:B_WIDTH=7:Y_WIDTH=7:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$sub:A_SIGNED=0:A_WIDTH=7:B_SIGNED=0:B_WIDTH=7:Y_WIDTH=7:394426c56d1a028ba8fdd5469b163e04011def47.
Running "alumacc" on wrapper $extern:wrap:$add:A_SIGNED=0:A_WIDTH=7:B_SIGNED=0:B_WIDTH=1:Y_WIDTH=7:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$add:A_SIGNED=0:A_WIDTH=7:B_SIGNED=0:B_WIDTH=1:Y_WIDTH=7:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$add:A_SIGNED=0:A_WIDTH=7:B_SIGNED=0:B_WIDTH=1:Y_WIDTH=7:394426c56d1a028ba8fdd5469b163e04011def47.
Running "alumacc" on wrapper $extern:wrap:$sub:A_SIGNED=0:A_WIDTH=8:B_SIGNED=0:B_WIDTH=1:Y_WIDTH=8:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$sub:A_SIGNED=0:A_WIDTH=8:B_SIGNED=0:B_WIDTH=1:Y_WIDTH=8:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$sub:A_SIGNED=0:A_WIDTH=8:B_SIGNED=0:B_WIDTH=1:Y_WIDTH=8:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $paramod$a1665ef28c749ebcdbe9aecd466e644647b56463\_90_alu for cells of type $alu.
Using template $paramod$c9d98d2d0793a6d8797b9c088dbedb26a7be7121\_90_alu for cells of type $alu.
Using template $paramod$dbcdc7e8aa1a4080cea2deda6fdc8772064f4d90\_90_alu for cells of type $alu.
Using template $paramod$103b4016182df467cceab67bcf3e18e6361ec0fd\_90_alu for cells of type $alu.
Using template $paramod$403a3c2fa431a154c52a6a5429d7a6260b5d144f\_90_alu for cells of type $alu.
Using extmapper simplemap for cells of type $xor.
Using template $paramod\_90_lcu_brent_kung\WIDTH=32'00000000000000000000000000010000 for cells of type $lcu.
Using extmapper simplemap for cells of type $pos.
Using template $paramod\_90_lcu_brent_kung\WIDTH=32'00000000000000000000000000001000 for cells of type $lcu.
Using template $paramod\_90_lcu_brent_kung\WIDTH=32'00000000000000000000000000000111 for cells of type $lcu.
No more expansions possible.
<suppressed ~798 debug messages>

29. Executing ALUMACC pass (create $alu and $macc cells).
Extracting $alu and $macc cells in module spi_top:
  created 0 $alu and 0 $macc cells.

30. Executing SHARE pass (SAT-based resource sharing).

31. Executing OPT pass (performing simple optimizations).

31.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module spi_top.
<suppressed ~3981 debug messages>

31.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\spi_top'.
<suppressed ~114 debug messages>
Removed a total of 38 cells.

31.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \spi_top..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

31.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \spi_top.
Performed a total of 0 changes.

31.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\spi_top'.
Removed a total of 0 cells.

31.6. Executing OPT_DFF pass (perform DFF optimizations).

31.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \spi_top..
Removed 1568 unused cells and 299 unused wires.
<suppressed ~1569 debug messages>

31.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module spi_top.

31.9. Rerunning OPT passes. (Maybe there is more to do..)

31.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \spi_top..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

31.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \spi_top.
Performed a total of 0 changes.

31.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\spi_top'.
Removed a total of 0 cells.

31.13. Executing OPT_DFF pass (perform DFF optimizations).

31.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \spi_top..

31.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module spi_top.

31.16. Finished OPT passes. (There is nothing left to do.)

32. Executing FSM pass (extract and optimize FSM).

32.1. Executing FSM_DETECT pass (finding FSMs in design).

32.2. Executing FSM_EXTRACT pass (extracting FSM from design).

32.3. Executing FSM_OPT pass (simple optimizations of FSMs).

32.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \spi_top..

32.5. Executing FSM_OPT pass (simple optimizations of FSMs).

32.6. Executing FSM_RECODE pass (re-assigning FSM state encoding).

32.7. Executing FSM_INFO pass (dumping all available information on FSM cells).

32.8. Executing FSM_MAP pass (mapping FSMs to basic logic).

33. Executing OPT pass (performing simple optimizations).

33.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module spi_top.

33.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\spi_top'.
Removed a total of 0 cells.

33.3. Executing OPT_DFF pass (perform DFF optimizations).

33.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \spi_top..

33.5. Finished fast OPT passes.

34. Executing MEMORY pass.

34.1. Executing OPT_MEM pass (optimize memories).
Performed a total of 0 transformations.

34.2. Executing OPT_MEM_PRIORITY pass (removing unnecessary memory write priority relations).
Performed a total of 0 transformations.

34.3. Executing OPT_MEM_FEEDBACK pass (finding memory read-to-write feedback paths).

34.4. Executing MEMORY_BMUX2ROM pass (converting muxes to ROMs).

34.5. Executing MEMORY_DFF pass (merging $dff cells to $memrd).

34.6. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \spi_top..

34.7. Executing MEMORY_SHARE pass (consolidating $memrd/$memwr cells).

34.8. Executing OPT_MEM_WIDEN pass (optimize memories where all ports are wide).
Performed a total of 0 transformations.

34.9. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \spi_top..

34.10. Executing MEMORY_COLLECT pass (generating $mem cells).

35. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \spi_top..

36. Executing MEMORY_BRAM pass (mapping $mem cells to block memories).

37. Executing TECHMAP pass (map to technology primitives).

37.1. Executing Verilog-2005 frontend: /home/cae_sajib/Desktop/OpenFPGA/openfpga_flow/openfpga_yosys_techlib/k6_frac_N10_tileable_adder_chain_dpram8K_dsp36_40nm_bram_map.v
Parsing Verilog input from `/home/cae_sajib/Desktop/OpenFPGA/openfpga_flow/openfpga_yosys_techlib/k6_frac_N10_tileable_adder_chain_dpram8K_dsp36_40nm_bram_map.v' to AST representation.
Generating RTLIL representation for module `\$__MY_DPRAM_1024x8'.
Successfully finished Verilog frontend.

37.2. Continuing TECHMAP pass.
No more expansions possible.
<suppressed ~3 debug messages>

38. Executing OPT pass (performing simple optimizations).

38.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module spi_top.

38.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\spi_top'.
Removed a total of 0 cells.

38.3. Executing OPT_DFF pass (perform DFF optimizations).

38.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \spi_top..

38.5. Finished fast OPT passes.

39. Executing MEMORY_MAP pass (converting memories to logic and flip-flops).

40. Executing OPT pass (performing simple optimizations).

40.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module spi_top.

40.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\spi_top'.
Removed a total of 0 cells.

40.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \spi_top..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

40.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \spi_top.
Performed a total of 0 changes.

40.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\spi_top'.
Removed a total of 0 cells.

40.6. Executing OPT_DFF pass (perform DFF optimizations).

40.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \spi_top..

40.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module spi_top.

40.9. Finished OPT passes. (There is nothing left to do.)

41. Executing TECHMAP pass (map to technology primitives).

41.1. Executing Verilog-2005 frontend: /home/cae_sajib/Desktop/OpenFPGA/openfpga_flow/openfpga_yosys_techlib/k6_frac_N10_tileable_adder_chain_dpram8K_dsp36_fracff_40nm_dff_map.v
Parsing Verilog input from `/home/cae_sajib/Desktop/OpenFPGA/openfpga_flow/openfpga_yosys_techlib/k6_frac_N10_tileable_adder_chain_dpram8K_dsp36_fracff_40nm_dff_map.v' to AST representation.
Generating RTLIL representation for module `\$_DFF_P_'.
Generating RTLIL representation for module `\$_DFF_PP0_'.
Generating RTLIL representation for module `\$_DFF_PP1_'.
Generating RTLIL representation for module `\$_DFF_PN0_'.
Generating RTLIL representation for module `\$_DFF_PN1_'.
Successfully finished Verilog frontend.

41.2. Continuing TECHMAP pass.
Using template $paramod\$_DFF_PP0_\_TECHMAP_WIREINIT_Q_=1'x for cells of type $_DFF_PP0_.
Using template $paramod\$_DFF_PP1_\_TECHMAP_WIREINIT_Q_=1'x for cells of type $_DFF_PP1_.
No more expansions possible.
<suppressed ~258 debug messages>

42. Executing OPT_EXPR pass (perform const folding).
Optimizing module spi_top.

43. Executing SIMPLEMAP pass (map simple cells to gate primitives).

44. Executing OPT_EXPR pass (perform const folding).
Optimizing module spi_top.

45. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\spi_top'.
Removed a total of 0 cells.

46. Executing OPT_DFF pass (perform DFF optimizations).

47. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \spi_top..
Removed 0 unused cells and 916 unused wires.
<suppressed ~1 debug messages>

48. Executing OPT pass (performing simple optimizations).

48.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module spi_top.

48.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\spi_top'.
Removed a total of 0 cells.

48.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \spi_top..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

48.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \spi_top.
Performed a total of 0 changes.

48.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\spi_top'.
Removed a total of 0 cells.

48.6. Executing OPT_DFF pass (perform DFF optimizations).

48.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \spi_top..

48.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module spi_top.

48.9. Finished OPT passes. (There is nothing left to do.)

49. Executing ABC pass (technology mapping using ABC).

49.1. Extracting gate netlist of module `\spi_top' to `<abc-temp-dir>/input.blif'..
Extracted 2507 gates and 2749 wires to a netlist network with 240 inputs and 237 outputs.

49.1.1. Executing ABC.
Running ABC command: "<yosys-exe-dir>/yosys-abc" -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_lut <abc-temp-dir>/lutdefs.txt 
ABC: + strash 
ABC: + &get -n 
ABC: + &fraig -x 
ABC: + &put 
ABC: + scorr 
ABC: Warning: The network is combinational (run "fraig" or "fraig_sweep").
ABC: + dc2 
ABC: + dretime 
ABC: + strash 
ABC: + dch -f 
ABC: + if 
ABC: + mfs2 
ABC: + lutpack -S 1 
ABC: + write_blif <abc-temp-dir>/output.blif 

49.1.2. Re-integrating ABC results.
ABC RESULTS:              $lut cells:      791
ABC RESULTS:        internal signals:     2272
ABC RESULTS:           input signals:      240
ABC RESULTS:          output signals:      237
Removing temp directory.

50. Executing HIERARCHY pass (managing design hierarchy).
Attribute `top' found on module `spi_top'. Setting top module to spi_top.

50.1. Analyzing design hierarchy..
Top module:  \spi_top

50.2. Analyzing design hierarchy..
Top module:  \spi_top
Removed 0 unused modules.

51. Printing statistics.

=== spi_top ===

   Number of wires:               1374
   Number of wire bits:           9362
   Number of public wires:          72
   Number of public wire bits:     698
   Number of ports:                 16
   Number of port bits:             92
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:               1022
     $lut                          791
     $scopeinfo                      2
     dffr                          213
     dffs                           16

52. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \spi_top..
Removed 2 unused cells and 625 unused wires.
<suppressed ~42 debug messages>

53. Executing BLIF backend.

Warnings: 3 unique messages, 3 total
End of script. Logfile hash: 448ba6c394, CPU: user 1.31s system 0.04s, MEM: 44.75 MB peak
Yosys 0.54+29 (git sha1 7b0c1fe49, g++ 11.4.0-1ubuntu1~22.04 -fPIC -O3)
Time spent: 54% 1x abc (1 sec), 13% 31x opt_expr (0 sec), ...
0